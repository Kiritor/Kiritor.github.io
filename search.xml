<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title></title>
      <link href="/2019/06/07/%E6%AD%A6%E6%B1%89%E4%B9%8B%E8%A1%8C/"/>
      <content type="html"><![CDATA[<html><head><meta charset="UTF-8"><style>    .gallery {        box-shadow:inset 0 0 2px 2px #ccc;    }.title {    font-size: 1.5em;}</style></head><body>    <p class="title">武汉之行~</p><p>出差,忙里偷闲到处逛逛</p>    <div id="wuhan" class="gallery" style="display: none;box-shadow:inset 0 0 2px 2px #ccc;">        <img alt="这个角度的武汉大学很神秘~" src="https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3rjv9jo02j30u00x5b2f.jpg" data-image="https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3rjv9jo02j30u00x5b2f.jpg" data-description="这个角度的武汉大学很神秘~">        <img alt="不知名教学楼" src="https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3rjzfpq1fj30u00y8e89.jpg" data-image="https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3rjzfpq1fj30u00y8e89.jpg" data-description="不知名教学楼">        <img alt="老斋舍:表示很羡慕这种宿舍,书生气满满~" src="https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3rk0y45l1j30u01400uz.jpg" data-image="https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3rk0y45l1j30u01400uz.jpg" data-description="老斋舍:表示很羡慕这种宿舍,书生气满满~">        <img alt="武大草坪一角" src="https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3rk2twfnuj30u0140gpf.jpg" data-image="https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3rk2twfnuj30u0140gpf.jpg" data-description="武大草坪一角">        <img alt="静谧的楚河汉街" src="https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3rk5c48rhj30u00xs7wl.jpg" data-image="https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3rk5c48rhj30u00xs7wl.jpg" data-description="静谧的楚河汉街">        <img alt="东湖一角,适合早上或者晚上骑行" src="https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3rk756phcj30u00z4wlg.jpg" data-image="https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3rk756phcj30u00z4wlg.jpg" data-description="东湖一角,适合早上或晚上骑行">        <img alt="有轨列车,这个车头让人想起了铁胆火车侠~" src="https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3rk9x49nij30zq0u0qva.jpg" data-image="https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3rk9x49nij30zq0u0qva.jpg" data-description="有轨列车,这个车头让人想起了铁胆火车侠~">        <img alt="路飞~" src="https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3rkctek9zj30u00xxhdy.jpg" data-image="https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3rkctek9zj30u00xxhdy.jpg" data-description="路飞~">        <img alt="K11艺术购物中心~" src="https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3rkj2f6akj30u00yau13.jpg" data-image="https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3rkj2f6akj30u00yau13.jpg" data-description="K11艺术购物中心~">        <img alt="K11艺术购物中心~" src="https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3rkfa4b35j30u00zanpj.jpg" data-image="https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3rkfa4b35j30u00zanpj.jpg" data-description="K11艺术购物中心~">           </div>    <script type="text/javascript">        jQuery(document).ready(function() {            jQuery("#wuhan").unitegallery();        });    </script></body></html>]]></content>
      
      <categories>
          
          <category> life </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2019/06/06/%E6%AD%A6%E6%B1%89%E7%BE%8E%E9%A3%9F/"/>
      <content type="html"><![CDATA[<html><head><meta charset="UTF-8"><style>    .gallery {        box-shadow:inset 0 0 2px 2px #ccc;    }.title {    font-size: 1.5em;}</style></head><body>    <p class="title">武汉美食~</p><p>公司安排武汉出差,相对于重庆来说,武汉美食更温和,“过早”美食丰富</p>    <div id="wuhan-food" class="gallery" style="display: none;box-shadow:inset 0 0 2px 2px #ccc;">        <img alt="三鲜豆皮:很好吃,就是太腻了" src="https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3rdvjkdmij30u00x5dhk.jpg" data-image="https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3rdvjkdmij30u00x5dhk.jpg" data-description="三鲜豆皮:很好吃,就是太腻了~">        <img alt="襄阳特色豆腐面,味道很有特色" src="https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3re5paogvj30u0140q4o.jpg" data-image="https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3re5paogvj30u0140q4o.jpg" data-description="襄阳特色豆腐面,味道很有特色">        <img alt="公安锅盔,味道一般" src="https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3re7x28c7j30u014040a.jpg" data-image="https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3re7x28c7j30u014040a.jpg" data-description="公安锅盔,味道一般">        <img alt="煎包,味道很不错" src="https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3re9qjbycj30u0140408.jpg" data-image="https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3re9qjbycj30u0140408.jpg" data-description="煎包:味道很不错">        <img alt="面窝:出差最喜欢的,好吃不腻" src="https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3rega16goj30u0140jtk.jpg" data-image="https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3rega16goj30u0140jtk.jpg" data-description="面窝:出差最喜欢的,好吃不腻">        <img alt="很有特色的烤虾" src="https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3rg9rpqbdj30u014041y.jpg" data-image="https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3rg9rpqbdj30u014041y.jpg" data-description="很有特色的烤虾">        <img alt="武藏の面屋:三刀流拉面,有点特色也特别贵" src="https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3rgbygpo7j30u00wxwjf.jpg" data-image="https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3rgbygpo7j30u00wxwjf.jpg" data-description="武藏の面屋:三刀流拉面,有点特色也特别贵">    </div>    <script type="text/javascript">        jQuery(document).ready(function() {            jQuery("#wuhan-food").unitegallery();        });    </script></body></html>]]></content>
      
      <categories>
          
          <category> life </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>中台的思考</title>
      <link href="/2019/04/28/%E4%B8%AD%E5%8F%B0/"/>
      <content type="html"><![CDATA[<h2 id="中台"><a href="#中台" class="headerlink" title="中台"></a>中台</h2><p>中台更像是一种企业架构,结合互联网技术和行业特性,将企业核心能力(技术&amp;业务)以共享服务中心进行沉淀,形成”大中台、小前台”的组织和业务机制,供企业快速降低成本的进行规模化创新，前台业务快速演变。</p><h3 id="业务中台"><a href="#业务中台" class="headerlink" title="业务中台"></a>业务中台</h3><p>业务角度来看,沉淀能力(技术&amp;业务),可以支持快速创新,让研发更灵活,业务更便捷,应对未来不可预知的市场变化。业务中台即是微服务的业务平台: 用户中心、订单中心、会员中心等各种微服务集散地,基于前台业务发展,灵活快速组合。<br><a id="more"></a></p><h3 id="技术中台"><a href="#技术中台" class="headerlink" title="技术中台"></a>技术中台</h3><p>技术角度来看: 技术中台是为了搭建一个灵活快速应对变化的架构,更快实现前端业务。战略层面上重视业务架构设计,战术层面上即是基于业务架构设计进行相关技术/平台选型: 微服务架构、DevOps平台,PaaS平台、容器云等,这也是”领域驱动设计 DDD”所倡导的: 面向领域级、业务设计直通技术设计的系统分析方法。</p>]]></content>
      
      <categories>
          
          <category> work </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构设计、中台 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>GitLab使用自定义签名开启HTTPS</title>
      <link href="/2019/01/23/gitlab-install/"/>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>公司需要搭建自己的GitLab作为代码管理平台，因为是部署到阿里云，所以使用https访问gitlab相对安全。更好的做法是购买域名，之后再去买SSL证书。在域名没有的前提下, 可以使用自签名的证书。配置方式如下:</p><h2 id="生成CA私钥ca-key"><a href="#生成CA私钥ca-key" class="headerlink" title="生成CA私钥ca.key"></a>生成CA私钥ca.key</h2><p>在gitlab目录下新建ssl目录，生成私钥ca.key<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ mkdir ssl</div><div class="line">$ <span class="built_in">cd</span> ssl</div><div class="line">$ openssl genrsa -out ca.key 2048</div></pre></td></tr></table></figure></p><a id="more"></a><h2 id="生成根证书"><a href="#生成根证书" class="headerlink" title="生成根证书"></a>生成根证书</h2><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>新建一个配置文件<strong>openssl.ca.conf</strong>,内容如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">RANDFILE               = <span class="variable">$ENV</span>::HOME/.rnd</div><div class="line"></div><div class="line"> [ req ]</div><div class="line"> string_mask = utf8only</div><div class="line"> utf8        = yes</div><div class="line"> default_bits           = 2048</div><div class="line"> default_keyfile        = ca.key</div><div class="line"> distinguished_name     = req_distinguished_name</div><div class="line"> prompt                 = no</div><div class="line"></div><div class="line"> [ req_distinguished_name ]</div><div class="line"> C                      = CN</div><div class="line"> ST                     = ChongQing</div><div class="line"> L                      = ChongQing</div><div class="line"> O                      = XXX Inc.</div><div class="line"> OU                     = IT XXX.</div><div class="line"> CN                     = Custom CA</div></pre></td></tr></table></figure></p><p><strong>Tips:</strong>通过配置文件req_distinguished_name指定组织信息</p><h3 id="生成CA根证书ca-crt"><a href="#生成CA根证书ca-crt" class="headerlink" title="生成CA根证书ca.crt"></a>生成CA根证书ca.crt</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl req -config openssl_ca.conf -new -x509 -days 7305 -key ca.key -out ca.crt</div></pre></td></tr></table></figure><p><strong>Tips:</strong>这里也可以不指定-config openssl_ca.conf直接输入组织信息,不从配置文件指定</p><h2 id="生成server私钥"><a href="#生成server私钥" class="headerlink" title="生成server私钥"></a>生成server私钥</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl genrsa -out server.key 2048</div></pre></td></tr></table></figure><h2 id="生成签名请求CSR文件"><a href="#生成签名请求CSR文件" class="headerlink" title="生成签名请求CSR文件"></a>生成签名请求CSR文件</h2><p>通过服务器私钥生成签名请求CSR文件server.csr</p><h3 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h3><p>准备一个配置文件<strong>openssl_server.conf</strong></p>]]></content>
      
      <categories>
          
          <category> work </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitlab </tag>
            
            <tag> https </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Dev-faq</title>
      <link href="/2018/11/15/dev-faq/"/>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>突然想把工作中和学习中遇到的开发上的疑难问题记录一下。不仅仅限于代码层面，可以是一些开发技巧，新的思维、研发工具，甚至是一些TODO。</p><h2 id="工具集"><a href="#工具集" class="headerlink" title="工具集"></a>工具集</h2><h3 id="SSH工具"><a href="#SSH工具" class="headerlink" title="SSH工具"></a>SSH工具</h3><p>虽然Mac的终端可以使用SSH命令远程登录服务器，可是每次都需要输入命令挺麻烦的，而且服务器也多不便于管理。推荐一款跨平台的SSH工具<strong>Termius</strong></p><h3 id="Dash"><a href="#Dash" class="headerlink" title="Dash"></a>Dash</h3><p>开发者必备的API文档聚合工具,随查随用,简单快捷，学会先查API,再Google/baidu<br><a id="more"></a></p><h2 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h2><h3 id="Autowired注解"><a href="#Autowired注解" class="headerlink" title="Autowired注解"></a>Autowired注解</h3><p>与 <strong>@Resource</strong> 做个简单对比:</p><ul><li>@Resource属于JAVAEE,@Autowired属于Spring</li><li>@Autowired按类型装配,可配合@Qualifier按名称装配(目前Spring4泛型注入使用该注解,泛型注入还能根据泛型选择)</li><li>@Resource默认按名称进行装配，在按类型装配，如果指定了name属性则只按名称装配</li></ul><p>由于 <strong>@Resource</strong>属于JAVAEE,耦合度较低，一般情况下推荐使用</p><p>构建springboot+mybatis通用maper、通用service时，使用 <strong>@Resource</strong> 注解报错如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">No qualifying bean of type <span class="string">'tk.mybatis.mapper.common.Mapper&lt;?&gt;'</span> available: expected single matching bean but found <span class="number">2</span>: roleMapper,userMapper</div></pre></td></tr></table></figure></p><p>原因在于多个mapper继承了通用mapper, 又使用了泛型，<strong>@Resource</strong>注解无法装配,采用 <strong>@Autowired</strong>解决。</p><h3 id="查看GitLab版本号"><a href="#查看GitLab版本号" class="headerlink" title="查看GitLab版本号"></a>查看GitLab版本号</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat /opt/gitlab/embedded/service/gitlab-rails/VERSION</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> work </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker实践</title>
      <link href="/2018/02/02/Docker/"/>
      <content type="html"><![CDATA[<h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><p>Docker是世界领先的软件容器平台，Docker的理念是架构与容器之上的。<br>概括来说，容器就是将软件打包成标准化单元，以用于开发、交付和部署：</p><ul><li>容器镜像是轻量的、可执行的独立软件包，包含软件运行所需的所有内容:代码、运行环境、系统工具、系统库和设置。</li><li>容器化软件适用于就要Linux和Windows的应用，在和人环境中都能够始终如一的运行。</li><li>容器富裕了软件独立性，免受外在环境诧异的影响(比如开发环境、测试环境、生产环境)，减少团队间在相同基础设施上运行不同软件时的冲突。<a id="more"></a><center><img src="https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3r8qea0e2j30fw0d0jrt.jpg" alt="容器FAQ"></center></li></ul><h2 id="Docker是什么"><a href="#Docker是什么" class="headerlink" title="Docker是什么"></a>Docker是什么</h2><p>Docker提供了一种打包、输送、运行任意应用的容器将解决方案。Docker是世界领先的软件容器平台。<br>Docker能够自动执行重复性任务，例如搭建和配置开发环境，从而解放了开发人员以便他们专注在真正重要的事情上：构建杰出的软件。<br>用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。</p><center><img src="https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3r8tmjltbj30xe0mgmzy.jpg" alt="docker"></center><p>Docker的思想: <strong>集装化</strong>、<strong>标准化:①运输方式、②存储方式、 ③API接口</strong>、<strong>隔离</strong></p><h3 id="容器-VS-虚拟机"><a href="#容器-VS-虚拟机" class="headerlink" title="容器 VS 虚拟机"></a>容器 VS 虚拟机</h3><p>容器虚拟化的是操作系统而不是硬件，容器之间是共享一套操作系统资源，应用进程直接运行宿主的内核;虚拟机技术是虚拟出一套硬件之后，在其上运行一个完整的操作系统，在系统上运行所需应用进程。相较来说容器的隔离级别低一些，但是容器更容易移植，效率也更高、更轻量。</p><p><img src="https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3r8r52pqgj30j8079wey.jpg" alt="VM"></p><p><img src="https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3r8t7f6m0j30j505f0t7.jpg" alt="Docker"></p><p><strong>容器与VM对比</strong></p><table><thead><tr><th>特性</th><th>容器</th><th>虚拟机</th></tr></thead><tbody><tr><td>启动</td><td>秒级</td><td>分钟级</td></tr><tr><td>硬盘使用</td><td>MB</td><td>GB</td></tr><tr><td>性能</td><td>接近原生</td><td>弱于</td></tr><tr><td>系统支持量</td><td>单机千级</td><td>几十</td></tr></tbody></table><ul><li>容器是一个应用层抽象，用于将代码和依赖资源打包在一起。 多个容器可以在同一台机器上运行，共享操作系统内核，但各自作为独立的进程在用户空间中运行 。与虚拟机相比， 容器占用的空间较少（容器镜像大小通常只有几十兆），瞬间就能完成启动 。</li><li>虚拟机（VM）是一个物理硬件层抽象，用于将一台服务器变成多台服务器。 管理程序允许多个VM在一台机器上运行。每个VM都包含一整套操作系统、一个或多个应用、必要的二进制文件和库资源，因此占用大量空间。而且VM启动也十分缓慢。</li></ul><p>Docker和VM两者有着不同的使用场景，虚拟机更擅长彻底隔离整个运行环境，例如云服务提供商通畅采用虚拟技术隔离不同的用户。Docker通常用于隔离不同的应用，例如前端、后端以及数据库。<strong>容器与虚拟机两者是可以共存的</strong></p><h3 id="Docker容器特点"><a href="#Docker容器特点" class="headerlink" title="Docker容器特点"></a>Docker容器特点</h3><ul><li>轻量，在一台机器上运行的多个Docker容器可以共享这台机器的操作系统内核；它们能够迅速启动，只需占用很少的计算和内存资源。镜像是通过文件系统层进行构造的，并共享一些公共文件。这样就能尽量降低磁盘用量，并能更快地下载镜像。</li><li>标准，Docker容器基于开放式标准，能够在所有主流Linux版本、Microsoft Windows以及包括VM、裸机服务器和云在内的任何基础设施上运行。</li><li>安全，Docker赋予应用的隔离性不仅限于彼此隔离，还独立于底层的基础设施。Docker默认提供最强的隔离，因此应用出现问题，也只是单个容器的问题，而不会波及到整台机器。</li></ul><h3 id="Docker优势"><a href="#Docker优势" class="headerlink" title="Docker优势"></a>Docker优势</h3><ul><li><strong>一致的运行环境:</strong> docker镜像提供了除内核外完整的运行时环境，可以确保开发环境、测试环境的一致性，可移植性。</li><li><strong>更快的启动时间:</strong> 可以做到秒级启动时间，节约了开发、测试、部署时间。</li><li><strong>隔离性:</strong> 避免公用的服务器，资源会容易受到其他用户影响。</li><li><strong>弹性伸缩、快速扩展:</strong> 善于处理集中爆发的服务器使用压力。</li><li><strong>迁移方便:</strong> 可以快速将一个平台上运行的应用迁移到另一个平台，不用担心运行环境变化导致应用无法正常运行。</li><li><strong>CI/CD:</strong> 通过Docker定制应用镜像实现持续集成、持续交付、部署。</li></ul>]]></content>
      
      <categories>
          
          <category> work </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
            <tag> 容器 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于过度设计、设计不足的思考</title>
      <link href="/2017/12/15/%E5%85%B3%E4%BA%8E%E8%BF%87%E5%BA%A6%E8%AE%BE%E8%AE%A1%E3%80%81%E8%AE%BE%E8%AE%A1%E4%B8%8D%E8%B6%B3%E7%9A%84%E6%80%9D%E8%80%83/"/>
      <content type="html"><![CDATA[<p>翻博客的时候,偶然间发现一个词<span class="color">过度设计</span>,与之想对应的则为<span class="color">设计不足</span>,发散下思维,看看些文章做一些自己的总结。</p><h3 id="过度设计"><a href="#过度设计" class="headerlink" title="过度设计"></a>过度设计</h3><p>过度设计指的是:设计实现出来的系统臃肿庞大,功能俱全确不好用,特别是那种巨型的ERP系统。分为需求层面上的过度设计和软件实现层面上的过度设计。</p><blockquote><p> 需求层面上的的过度设计: 需求上的过度设计即过度解读用户需求, 形成了太多的衍生需求,这些需求是否能够真正帮助用户还是两说. 这些衍生需求是                         否需要设计还是丢弃需要权衡。<br> 软件设计层面上的过度设计: 过度的封装、一堆接口和无用的方法、超复杂的xml配置文件,不恰当的框架选型等。造成代码臃肿,难以维护.</p></blockquote><h3 id="设计不足"><a href="#设计不足" class="headerlink" title="设计不足"></a>设计不足</h3><blockquote><p> 设计不足: 指的是设计出来的系统复用性差，扩展性不足，不能灵活的应对变化，甚至达不到用户需求.</p></blockquote><p>总而言之,设计不足和过度设计都是设计不当，实际情况下不论是以需求为导向还是前瞻性的需求为导向到应该寻取两者的平衡点,尽量做到设计简洁、实用.<br><a id="more"></a></p><p>参考资料:<br><a href="https://www.douban.com/note/497860457/" target="_blank" rel="external">https://www.douban.com/note/497860457/</a><br><a href="http://blog.kazaff.me/2017/09/15/%E5%85%B3%E4%BA%8E%E8%BF%87%E5%BA%A6%E8%AE%BE%E8%AE%A1%E7%9A%84%E6%80%9D%E8%80%83/" target="_blank" rel="external">http://blog.kazaff.me/2017/09/15/%E5%85%B3%E4%BA%8E%E8%BF%87%E5%BA%A6%E8%AE%BE%E8%AE%A1%E7%9A%84%E6%80%9D%E8%80%83/</a></p>]]></content>
      
      <categories>
          
          <category> work </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维 </tag>
            
            <tag> 设计 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2017/10/26/%E7%A7%A6%E6%B7%AE%E6%B2%B3/"/>
      <content type="html"><![CDATA[<html><head><meta charset="UTF-8"><style>    .gallery {        box-shadow:inset 0 0 2px 2px #ccc;    }.title {    font-size: 1.5em;}</style></head><body>    <p class="title">南京出差~</p><p>前前后后算起来去南京出差已经几次了，还没有好好逛逛四朝古都呢,趁最后一次机会，就近去夫子庙、秦淮河走一圈~</p>    <div id="qinghuahe" class="gallery" style="display: none;box-shadow:inset 0 0 2px 2px #ccc;">        <img alt="白天的秦淮河也还是多好看,虽然水质不好,毕竟是内河,估摸着晚上会很漂亮~" src="http://o7q5y55yj.bkt.clouddn.com/qinhuai/IMG_6286%202.JPG" data-image="http://o7q5y55yj.bkt.clouddn.com/qinhuai/IMG_6286%202.JPG" data-description="白天的秦淮河也还是多好看,虽然水质不好,毕竟是内河,估摸着晚上会很漂亮~">        <img alt="君子桥,秦淮河北岸是夫子庙和江南贡院,南岸是烟花柳巷,流传着君子不过桥,过桥非君子(君子渡河不过桥)" src="http://o7q5y55yj.bkt.clouddn.com/qinhuai/IMG_0091.JPG" data-image="http://o7q5y55yj.bkt.clouddn.com/qinhuai/IMG_0091.JPG" data-description="君子桥,秦淮河北岸是夫子庙和江南贡院,南岸是烟花柳巷,流传着君子不过桥,过桥非君子(君子渡河不过桥)"> <img alt="科举博物馆里的马车,很有年代感~" src="http://o7q5y55yj.bkt.clouddn.com/qinhuai/IMG_0898.JPG" data-image="http://o7q5y55yj.bkt.clouddn.com/qinhuai/IMG_0898.JPG" data-description="科举博物馆里的马车,很有年代感~">        <img alt="" src="http://o7q5y55yj.bkt.clouddn.com/qinhuai/IMG_2458.JPG" data-image="http://o7q5y55yj.bkt.clouddn.com/qinhuai/IMG_2458.JPG" data-description=""><img alt="" src="http://o7q5y55yj.bkt.clouddn.com/qinhuai/IMG_9526%202.JPG" data-image="http://o7q5y55yj.bkt.clouddn.com/qinhuai/IMG_9526%202.JPG" data-description=""><img alt="" src="http://o7q5y55yj.bkt.clouddn.com/qinhuai/IMG_9538%202.JPG" data-image="http://o7q5y55yj.bkt.clouddn.com/qinhuai/IMG_9538%202.JPG" data-description=""><img alt="" src="http://o7q5y55yj.bkt.clouddn.com/qinhuai/IMG_8517%202.JPG" data-image="http://o7q5y55yj.bkt.clouddn.com/qinhuai/IMG_8517%202.JPG" data-description="太阳城-天工之城的手工艺">    </div>    <p>总的来说，晚上的秦淮河还是值得一去的.领略特色小吃,行船而过,也只有晚上才能稍稍感受到古往的才子佳人、风雅之气</p>    <script type="text/javascript">        jQuery(document).ready(function() {            jQuery("#qinghuahe").unitegallery();        });    </script></body></html>]]></content>
      
      <categories>
          
          <category> life </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>IDEA使用技巧</title>
      <link href="/2017/08/30/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
      <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>工作中一直使用Eclipse作为开发工具,自己下来玩的时候用IDEA居多,然而有时候一些快捷键啊,配置操作啊,容易忘.当时在搜索又比较耗时间,而且网上的文章也不够直接,好记性不如烂笔头,自己做一个记录列表.</p><h2 id="自动import"><a href="#自动import" class="headerlink" title="自动import"></a>自动import</h2><p>IDEA没有类似Eclipse的自动导入清除无用包快捷键optimize imports(ctrl+shift+o),但是可以通过设置让IDE支持自动导入与删除已经明确的包.如下图所示:<br><a id="more"></a><br><img src="http://o7q5y55yj.bkt.clouddn.com/idea%20import.png" alt="自动导入"><br>Tips:需要注意的是如果存在不明确的包,需要手动确认.</p><h2 id="maven-skip-test"><a href="#maven-skip-test" class="headerlink" title="maven skip test"></a>maven skip test</h2><p>maven编译、打包的时候如果编写了单元测试,会先运行单元测试,通过了在继续编译、打包,一般会选择跳过编译.在maven命令面板中点击如下图按钮即可跳过编译.<br><img src="http://o7q5y55yj.bkt.clouddn.com/mavenskiptest.png" alt="跳过测试"></p>]]></content>
      
      <categories>
          
          <category> 技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Boot(三):配置详解</title>
      <link href="/2017/04/05/springboot%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h2 id="写在之前"><a href="#写在之前" class="headerlink" title="写在之前"></a>写在之前</h2><p>在前面Spring Boot的入门篇中,可以很直观的感受到使用Spring Boot没有了原来整合Spring应用时繁琐的XML配置内容,替代它的是在pom.xml中引入模块化的Starter POMs,各个模块具有自己的默认配置.在application.properties文件中,只需要设置少量的应用即可开启应用.</p><p>在实际的项目中,配置是十分复杂的,存在多个配置环境,例如:</p><blockquote><p>开发环境 -&gt; 测试环境 -&gt; 演示环境 -&gt;生产环境</p></blockquote><p>每个环境的配置项总是不同的,而且就算是在开发环境中,不同的开发人员也会有区别,配置文件的读取总是比较伤脑筋.Spring Boot提供了一种优先级配置读取机制很好的解决此问题.<br>在入门篇中,了解到Spring Boot的配置会从application.properties中读取,实际上这只是Spring Boot配置链中的一环而已.<br><a id="more"></a></p><h2 id="配置优先级"><a href="#配置优先级" class="headerlink" title="配置优先级"></a>配置优先级</h2><p>通常应用部署会包括开发、测试和生产等若干个环境,不同环境之间的配置存在覆盖关系.暴力的做法是只有一个配置文件,发版部署的时候在手动去确定某些配置项,容易出错且浪费时间.Spring本身通过引入Environment和概要信息(Profile)API,可以更加灵活的处理不同环境和配置文件的方式.<br>Spring Boot提供了统一的方式来管理应用的配置,允许开发人员使用属性文件、YAML文件、环境变量和命令行参数来定义优先级不同的配置值.<br>Spring Boot配置按照优先级从高到低的顺序如下:</p><blockquote><ol><li>spring-boot-devtools.properties(devtools是active状态的时候)</li><li>@TestPropertySource注解在测试中.</li><li>@SpringBootTest#properties属性注解在测试中.</li><li>命令行参数.</li><li>初始化的ServletConfig、ServletContext参数.</li><li>从java:com/env得到的JNDI属性.</li><li>通过System.getProperties()获取的系统参数.</li><li>操作系统环境变量.</li><li>RandomValuePropertySource生成的”random.*”属性.</li><li>应用jar文件之外的属性文件(通过spring.config.location)参数指定.</li><li>应用jar文件内部的属性文件.</li><li>在应用配置Java类(Configuration、PropertySource注解声明的属性文件)</li><li>通过SpringApplication.setDefaultProperties声明的默认值.</li></ol></blockquote><p>Spring Boot在优先级更高的位置找到了配置,那么它就会无视优先级低的配置.<br>Spring Boot的配置优先顺序看起来比较复杂,可以知道的是优先级最高的是dev-tools用于实现热部署,下面简单的看看一些配置.</p><h3 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h3><p>命令行参数的好处是在于在某些情况下快速的修改配置参数值,而不需要重新打包和部署应用.例如:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar springboot01-1.0.jar --server.port=9999</div></pre></td></tr></table></figure></p><p>部署的时候使用动态指定端口号位9999.SpringApplication类会默认把以”–”开头的命令行参数转化为应用中可以使用的配置参数.等价于在application.properties添加属性server.port=9999.<br>通过命令行来修改属性值固然提供了不错的便利性,但是这样就能更改应用运行的参数存在安全隐患.可以通过如下代码禁用命令行访问属性的设置.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SpringApplication.setAddCommandLineProperties(<span class="keyword">false</span>)</div></pre></td></tr></table></figure></p><h3 id="属性配置文件"><a href="#属性配置文件" class="headerlink" title="属性配置文件"></a>属性配置文件</h3><p>属性文件是最常见的管理配置属性的方式,Spring Boot提供的SpringApplication类搜索并加载application.properties文件来获取配置属性值(也可以是yml文件,但是.properties文件优先级高).搜索规则如下:</p><blockquote><p>● 当前目录的”/config”子目录.<br>● 当前目录.<br>● classpath中的”/config”包.<br>● classpath.</p></blockquote><p>上面的顺序也表示了该位置上包含的属性文件的优先级.优先级按照从高到低的顺序排列.在application.properties中可以配置诸如端口号,数据库链接等信息.例如:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">server.context-path=/springboot01</div><div class="line">server.port=8081</div><div class="line">server.tomcat.uri-encoding=UTF-8</div><div class="line">spring.http.encoding.charset=UTF-8</div><div class="line">spring.http.encoding.enabled=<span class="literal">true</span></div><div class="line">spring.http.encoding.force=<span class="literal">true</span></div><div class="line">spring.messages.encoding=UTF-8</div></pre></td></tr></table></figure></p><h3 id="自定义属性与加载"><a href="#自定义属性与加载" class="headerlink" title="自定义属性与加载"></a>自定义属性与加载</h3><p>在使用Spring Boot的时候,有时候也需要自定义一些属性,例如我们自定义如下属性(在application.properties中):<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">user.userName=Kiritor</div><div class="line">user.age=25</div><div class="line">user.id=1</div></pre></td></tr></table></figure></p><p>然后通过@Value(“${属性名}”)注解来加载对应的自定义属性到javaBean中,具体如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;user.id&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String id;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;user.userName&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String userName;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;user.age&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String age;</div><div class="line">    <span class="comment">//省略getter、setter</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>Spring进行JavaBean管理:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Resource</span></div><div class="line">User user;</div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> user.getId()+<span class="string">":"</span>+user.getUserName()+<span class="string">":"</span>+user.getAge();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="参数间引用"><a href="#参数间引用" class="headerlink" title="参数间引用"></a>参数间引用</h4><p>各个参数之间的属性是可以引用的,例如:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">user.des=<span class="variable">$&#123;user.userName&#125;</span>的年龄是:<span class="variable">$&#123;user.age&#125;</span></div></pre></td></tr></table></figure></p><h4 id="将配置文件的属性一次性注入到JavaBean中"><a href="#将配置文件的属性一次性注入到JavaBean中" class="headerlink" title="将配置文件的属性一次性注入到JavaBean中"></a>将配置文件的属性一次性注入到JavaBean中</h4><p>上面的例子中,通过@Value(“${}”)方式一个一个注入比较麻烦,Spring Boot提供一次性的注入.<br>新建一个NewUser类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"user"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewUser</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String id;</div><div class="line">    <span class="keyword">private</span> String userName;</div><div class="line">    <span class="keyword">private</span> String age;</div><div class="line">    <span class="comment">//省略getter、setter</span></div></pre></td></tr></table></figure></p><p>通过@ConfigurationProperties注解,指定其prefix前缀(例如以user为前缀的属性值会被自动绑定到java类中同名的域上),之后需要在应用类或者application类加上EnableConfigurationProperties注解就可以启用起自动绑定功能,例如:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@EnableConfigurationProperties</span>(&#123;NewUser.class&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewUserController</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    NewUser newUser;</div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/newuser"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> newUser.getId()+<span class="string">":"</span>+newUser.getUserName()+<span class="string">":"</span>+newUser.getAge()+<span class="string">"||"</span>+newUser.getDes();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="配置随机值"><a href="#配置随机值" class="headerlink" title="配置随机值"></a>配置随机值</h3><p>RandomValuePropertySource可以用来生成测试所需要的各种不同类型的随机值,从而免去了代码生成的麻烦.通过${random.}由RandomValuePropertySource生成.例如:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">user.id=$&#123;random.value&#125;</div><div class="line">user.userName=$&#123;random.value&#125;</div><div class="line">user.age=$&#123;random.int[1,100]&#125;</div></pre></td></tr></table></figure></p><h3 id="自定义配置文件"><a href="#自定义配置文件" class="headerlink" title="自定义配置文件"></a>自定义配置文件</h3><p>有时候我们不愿意把配置都写到一个文件中去(application.properties),而是分散到多个配置文件方便管理,Spring Boot也支持自定义配置文件.<br>新建一个配置文件test.properties:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">com.test.userName=<span class="built_in">test</span></div><div class="line">com.test.age=20</div></pre></td></tr></table></figure></p><p>同样,接下来将该配置文件信息赋予给一个javabean作为例子:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@PropertySource</span>(value = <span class="string">"classpath:/config/test.properties"</span>)</div><div class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"com.test"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String userName;</div><div class="line">    <span class="keyword">private</span> Integer age;</div><div class="line">    <span class="comment">//省略getter、setter</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>之后在应用类或者application类加上EnableConfigurationProperties即可自动绑定:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@EnableConfigurationProperties</span>(&#123;NewUser.class , Test.class&#125;)</div></pre></td></tr></table></figure></p><h3 id="CommandLineRunner"><a href="#CommandLineRunner" class="headerlink" title="CommandLineRunner"></a>CommandLineRunner</h3><p>项目启动的时候,需要先启动一些初始化的类,比较常见的做法是通过static块.Spring Boot提供了一个CommandLineRunner接口,实现这个接口的类总是会被优先启动,并优先执行run方法.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public class ApplicationConfigure implements CommandLineRunner &#123;</div><div class="line">    @Value(<span class="string">"<span class="variable">$&#123;app.sysName&#125;</span>"</span>)</div><div class="line">    private String sysName;</div><div class="line">    @Override</div><div class="line">    public void run(String... strings) throws Exception &#123;</div><div class="line">         //预先加载一些类、图片、属性等</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="多环境配置"><a href="#多环境配置" class="headerlink" title="多环境配置"></a>多环境配置</h3><p>实际项目中,通过会存在不同的环境(开发、测试、生成等).其中每个环境的配置是有区别的,例如数据库地址、服务器端口号,如果在为不同环境打包部署的时候都要频繁的修改配置文件的话,那必将是个繁琐且头疼的问题.</p><p>对于多环境的配置,各种项目构建工具或者框架的思路基本一致:通过配置不同环境的配置文件,再通过打包命令指定需要打包的内容之后进行区分打包.<br>以application.properties为例,通过文件名来区分环境application-{profile}.properties.<br>新建开发环境和测试环境application-dev.properties、application-test-properties<br>其中application-dev.properties内容如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">server.port=10086</div></pre></td></tr></table></figure></p><p>application-test.properties内容如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">server.port=10096</div></pre></td></tr></table></figure></p><p>application.properties内容如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">server.port=8081</div><div class="line"><span class="comment">#dev</span></div><div class="line">spring.profiles.active=dev</div></pre></td></tr></table></figure></p><p>通过spring.profiless.active属性来设置哪个具体的配置文件会被加载,其值对应{profile}值.<br>dev环境启动端口为10086,test环境启动端口为10096,且默认application的端口为8081,在实际发版部署的时候,会根据指定的profile加载覆盖正确的配置属性.<br>Spring Boot会先加载默认配置文件,然后使用具体指定的profile中的配置去覆盖默认配置.</p><p>基于以上尝试,Spring Boot多环境配置步骤如下:</p><blockquote><p>●  application.properties中配置通用内容,并设置spring.profiles.active=dev,以开发环境为默认配置<br>●  application-{profile}.properties配置各个环境不同的内容<br>●  通过命令行方式(允许的话)或者修改默认配置文件的pring.profiles.active值激活不同环境的配置</p></blockquote><h3 id="指定外部的配置文件"><a href="#指定外部的配置文件" class="headerlink" title="指定外部的配置文件"></a>指定外部的配置文件</h3><p>有些系统中,基于安全和机密的考虑,关于一些数据库或者第三方账户等信息,起配置并不会配置在项目中暴露给开发人员,对于这种情况,我们可以在运行程序的时候,通过–spring.config.location参数指定一个外部配置文件.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar springboot03.jar --spring.config.location=d:\\application.properties</div></pre></td></tr></table></figure></p><p>其中外部文件的文件名可自行定义.<br>以上就是Spring Boot的一些相关配置,以及如何配置一些简单的配置项.至于后续hibernate的配置,日志配置在慢慢探索.</p>]]></content>
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Boot(二):war包形式发布</title>
      <link href="/2017/04/05/springboot-war/"/>
      <content type="html"><![CDATA[<p>在上一篇入门文章中,也提及了Spring Boot可以发布成war包运行在外包的tomcat中.具体做法如下.</p><ol><li>在POM.XML文件中将<packaging>jar</packaging>改为<packaging>war</packaging></li></ol><ol><li>添加依赖.<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></li></ol><a id="more"></a><p>将tomcat的范围改为provided,编译时需要.</p><p>3.接下来添加ServletInitializer类,内容如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.kiritor.springboot02;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.boot.builder.SpringApplicationBuilder;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.web.support.SpringBootServletInitializer;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletInitializer</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder application)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> application.sources(Application.class);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>其中Application为标注有@SpringBootApplication注解的主启动类.</p><ol><li>需要注意的问题是,如果配置了server.context-path=/spring-boot配置项,则该配置项的值应该和war包名字一致.</li></ol>]]></content>
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Boot(一):快速入门</title>
      <link href="/2017/04/02/springboot%E5%85%A5%E9%97%A8/"/>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Spring Boot是由Pivotal团队提供的全新框架,其设计目的是用来简化新Spring应用的初始搭建及开发过程。JavaEE开发的小伙伴肯定听说过”约定优于配置”、”契约式编程”,就是说系统、类库、框架应该假定合理的默认配置，而非要求提供不必要的配置,简化配置项减少跨平台部署容易出现的问题。基于这些问题Spring Boot应运而生，更简单快捷的构建Spring应用。</p><h2 id="Spring-Boot优点"><a href="#Spring-Boot优点" class="headerlink" title="Spring Boot优点"></a>Spring Boot优点</h2><p>Spring Boot让Spring应用简单、快速、轻量化!传统的Spring应用搭建一个基础的spring web项目需要做些什么呢?</p><blockquote><p> 1) 配置web.xml,加载spring和spring mvc.<br> 2) 配置数据库连接、配置spring事务等.<br> 3) 配置文件的加载、读取.<br> 4) ……</p></blockquote><p>之后的部署,打包十分繁琐.虽然基于”约定优于配置”Spring能够减少了很多的配置项,但是仍然比较臃肿,每个项目都需要这么折腾一遍!但是如果使用微服务Spring Boot框架,只需少量配置即可.<br><a id="more"></a><br>Spring Boot的主要优点</p><blockquote><p>1) 为所有Spring开发者更快的入门.<br>2) 开箱即用(out of the box),提供各种默认配置来简化项目配置.<br>3) 内嵌式容易简化Web项目.<br>4) 没有冗余的代码生成和XML配置的要求.</p></blockquote><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><p>完成Spring Boot基础项目的构建,实现一个简单的Http请求处理,对Spring Boot有一个初步的了解,并体验其结构简单、开发快速的特性.</p><h3 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h3><blockquote><p> ● JDK 1.7及以上<br> ● 开发工具: IDEA</p></blockquote><h3 id="Maven构建项目"><a href="#Maven构建项目" class="headerlink" title="Maven构建项目"></a>Maven构建项目</h3><p>Spring Boot项目构建方法很多,可以通过官网<a href="http://start.spring.io/" target="_blank" rel="external">http://start.spring.io/</a>构建,也可以通过SPRING INITIALIZR插件构建(IDEA社区版不支持).这里笔者通过构建空的maven项目,一步步完成Spring Boot基础工程的搭建.</p><h4 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h4><p>在IDEA选择File-&gt;New-&gt;Project建立一个项目,考虑到是一个持续的过程，建立一个freestyle structure空项目，之后在File-&gt;New-&gt;Module建立一个空的Maven Module.<br>习惯使用Eclipse者初次使用IDEA的注意区分IDEA中的Project与Module的区别.</p><h4 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h4><p>建立好之后,编写pom.xml文件,具体内容如下:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></div><div class="line">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.kiritor.springboot01<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot01<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">relativePath</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- web模块 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--测试模块--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!--maven 编译插件--&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure></p><h4 id="项目结构介绍"><a href="#项目结构介绍" class="headerlink" title="项目结构介绍"></a>项目结构介绍</h4><p>如下图所示,Spring Boot的基础结构共三个文件:<br><img src="http://o7q5y55yj.bkt.clouddn.com/springBoot%E7%9B%AE%E5%BD%95.png" alt="空Module"></p><blockquote><p> src/main/java   源码<br> src/main/resource 配置文件<br> src/test/java 测试代码</p></blockquote><p>另外,Spring Boot建议的package目录结构如下所示:</p><blockquote><ol><li>Application.java建议放到package根目录下面,主要用于做一些框架配置.</li><li>domain目录主要用于实体(Entity)与数据访问层</li><li>service层主要是业务类代码.</li><li>controller负责页面访问控制.</li></ol></blockquote><h4 id="编写hello服务"><a href="#编写hello服务" class="headerlink" title="编写hello服务"></a>编写hello服务</h4><p>创建BaseController,内容如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"hello Springboot"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="简单配置"><a href="#简单配置" class="headerlink" title="简单配置"></a>简单配置</h4><p>1、application.properties<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># 应用访问路径</div><div class="line">server.context-path=/springboot01</div><div class="line"># 端口号</div><div class="line">server.port=8081</div><div class="line">server.tomcat.uri-encoding=UTF-8</div><div class="line">spring.http.encoding.charset=UTF-8</div><div class="line">spring.http.encoding.enabled=true</div><div class="line">spring.http.encoding.force=true</div><div class="line">spring.messages.encoding=UTF-8</div></pre></td></tr></table></figure></p><p>2、banner.txt<br>该配置可以修改springboot启动的欢迎信息,比较有意思:</p><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><p>1、从IDE运行.<br>在IDEA中选择Application直接右键运行如下图所示:<br>打开浏览器访问<a href="http://localhost:8081/springboot01" target="_blank" rel="external">http://localhost:8081/springboot01</a>,可以看到页面输出hello Springboot<br>控制台输出结果如下图:<br><img src="http://o7q5y55yj.bkt.clouddn.com/springbootlog.png" alt="控制台日志"><br>2、jar包运行.<br>通过maven插件执行install命令创建一个可执行的jar(需要注意的是会额外生成一个XXX.jar.original的文件,这是Spring Boot重新打包前maven创建的原始jar文件)使用命令java -jar运行应用,例如:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar springboot01-1.0.jar</div></pre></td></tr></table></figure></p><p>3、Maven插件运行<br>也可以通过maven插件来运行,定位到工程目录下，使用如下命令:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn spring-boot:run</div></pre></td></tr></table></figure></p><p>4、war包运行<br>Spring Boot也可以将web工程打成jar包来运行,具体参考文章.</p><p>完整源码地址:<a href="https://github.com/Kiritor/Spring-Boot-Study" target="_blank" rel="external">https://github.com/Kiritor/Spring-Boot-Study</a>,springboot01</p>]]></content>
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>第一次面试官经历</title>
      <link href="/2017/03/01/Interview-thought/"/>
      <content type="html"><![CDATA[<p>领导出差,临时接到通知让我当面试官。才接到这个通知，内心是比较高兴和担忧的，高兴的是领导对自己技术能力的肯定,担心的点在于面试的是社招,怕自己的技术能力尚不能胜任(后面证明自己想多了)。</p><p>和人资那边协作,拿到面试人员的简历,大致的了解下,就开始面试了。自己作为面试官事先的工作和面试过程都还不错,进行的比较顺利。</p><p>有一些体会:</p><p><strong>面试者:</strong></p><p> • 很多简历存在极大的水分与不实情况,需要面试官甄选(面试官是不容忍的).<br> • 面试者对面试的职位要有认知,技术能力能否达到应聘职位很重要,如果相差甚远反效果(自我认知不够,自欺欺人).<br> • 避免技术罗列,以实际项目用到的技术为准,适当发散.</p> <a id="more"></a><p><strong>面试官:</strong></p><p> • 尽量事先了解面试者简历情况.<br> • 直观的抛出问题,对面试者不清楚的,做适当引导.<br> • 考察面试者是否具有自主学习能力比较重要(体现在一些问题的深入发散,以及工作之外的学习兴趣).</p><p>通过这次面试官的经历自己也学到了很多,首要一点作为技术人员,保持应有的自信和谦逊,对于面试官和面试者都一样.</p><p>无论作为面试官还是面试者,今后都需要提升.</p>]]></content>
      
      <categories>
          
          <category> work </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>jQuery插件练习集</title>
      <link href="/2016/11/02/jQuery-plugin/"/>
      <content type="html"><![CDATA[<p>半吊子前端,整理一些自己没事练习的jQuery插件,权当做个记录.</p><h2 id="SocialShare-社会化分享插件"><a href="#SocialShare-社会化分享插件" class="headerlink" title="SocialShare(社会化分享插件)"></a>SocialShare(社会化分享插件)</h2><p>简单高效的社会化分享插件(sns-share),当站点需要添加社会化分享功能的时候,一般会想到baiduShare,或者JiaThis这类的第三方分享聚合工具,通过灵活的配置很快的就能实现分享功能.<br>不过这种方式也有一些弊端:<strong>性能问题</strong>和<strong>自定义不方便</strong>,界面,交互的体验不是非常好,笔者在自己的个人站点里面也想实现社会化 分享功能,而且喜欢简洁,因此就有了这款社会化分享插件.如图所示:</p><p><center><img src="https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3y7v3joqkg30ho01zgnn.jpg" alt="分享"></center><br>插件地址:<a href="https://github.com/Kiritor/socialShare" target="_blank" rel="external">https://github.com/Kiritor/socialShare</a><br><a id="more"></a></p><h2 id="combobox-下拉框插件"><a href="#combobox-下拉框插件" class="headerlink" title="combobox(下拉框插件)"></a>combobox(下拉框插件)</h2><p>没事练习的下拉框插件,支持参数定义,动态绑定数据,以及一些方便的方法,支持事件自定义实现。<br>插件地址:<a href="https://github.com/Kiritor/combobox" target="_blank" rel="external">https://github.com/Kiritor/combobox</a></p>]]></content>
      
      <categories>
          
          <category> front </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2016/05/22/fish/"/>
      <content type="html"><![CDATA[<html><head><meta charset="UTF-8"><style>    .gallery {        box-shadow:inset 0 0 2px 2px #ccc;    }.title {    font-size: 1.5em;}</style></head><body>    <p class="title">准备开始养鱼了~</p><p>比较宅,平时周末下班也比较闲,想着养点什么东西打发时间.由于住公司,不可能养比较大的宠物,就选择养鱼了(一直觉得养鱼很难,要有耐心,小鱼又很娇贵,不过还是觉得尝试一下!)</p>    <div id="fish" class="gallery" style="display: none;box-shadow:inset 0 0 2px 2px #ccc;">        <img alt="鱼缸:选择了一个选型较大的鱼缸,配合卖家附送的贝壳,水草,搭配还是挺漂亮的~" src="http://o7q5y55yj.bkt.clouddn.com/fishIMG_0116.JPG" data-image="http://o7q5y55yj.bkt.clouddn.com/fishIMG_0116.JPG" data-description="鱼缸:选择了一个选型较大的鱼缸,配合卖家附送的贝壳,水草,搭配还是挺漂亮的~">        <img alt="作为新手,没有选择生态鱼缸(带过滤系统),也没配置过滤装置,只有勤换水了...." src="http://o7q5y55yj.bkt.clouddn.com/fishIMG_0117.JPG" data-image="http://o7q5y55yj.bkt.clouddn.com/fishIMG_0117.JPG" data-description="作为新手,没有选择生态鱼缸(带过滤系统),也没配置过滤装置,只有勤换水了...."> <img alt="买鱼的过程也挺曲折的,总共跑了3次～晕" src="http://o7q5y55yj.bkt.clouddn.com/fishIMG_0116.JPG" data-image="http://o7q5y55yj.bkt.clouddn.com/fishIMG_0116.JPG" data-description="买鱼的过程也挺曲折的,总共跑了3次～晕">        <img alt="草金:本来打算养小金鱼的,奈何没货了,只能先养着草金了(一个说法:养鱼要养单数)" src="http://o7q5y55yj.bkt.clouddn.com/fishIMG_0122.JPG" data-image="http://o7q5y55yj.bkt.clouddn.com/fishIMG_0122.JPG" data-description="草金:本来打算养小金鱼的,奈何没货了,只能先养着草金了(一个说法:养鱼要养单数)"><img alt="比较担心第一个夜晚,果然有一只死了,观察发现是病鱼,好在另外两只状态很好~" src="http://o7q5y55yj.bkt.clouddn.com/fishIMG_0181.JPG" data-image="http://o7q5y55yj.bkt.clouddn.com/fishIMG_0181.JPG" data-description="比较担心第一个夜晚,果然有一只死了,观察发现是病鱼,好在另外两只状态很好~"><img alt="看水质,闻气味,3天左右必须换水,水要提前嗮好,且保持水温一致,过程中别伤到鱼~~" src="http://o7q5y55yj.bkt.clouddn.com/fishIMG_0123.JPG" data-image="http://o7q5y55yj.bkt.clouddn.com/fishIMG_0123.JPG" data-description="看水质,闻气味,3天左右必须换水,水要提前嗮好,且保持水温一致,过程中别伤到鱼~~"><img alt="之前几天一直很怕生,喂食的时候都躲着吃,熟悉环境之后,就很亲人了,主动靠过来要吃的,嘿嘿~" src="http://o7q5y55yj.bkt.clouddn.com/fishIMG_0181.JPG" data-image="http://o7q5y55yj.bkt.clouddn.com/fishIMG_0181.JPG" data-description="之前几天一直很怕生,喂食的时候都躲着吃,熟悉环境之后,就很亲人了,主动靠过来要吃的,嘿嘿~">        <img alt="2周多些了,虽然期间出过一点状况,不过鱼儿们现在状态都比较良好!!(不躲着我了)" src="http://o7q5y55yj.bkt.clouddn.com/fishIMG_0124.JPG" data-image="http://o7q5y55yj.bkt.clouddn.com/fishIMG_0124.JPG" data-description="2周多些了,虽然期间出过一点状况,不过鱼儿们现在状态都比较良好!!(不躲着我了)">    </div>    <script type="text/javascript">        jQuery(document).ready(function() {            jQuery("#fish").unitegallery();        });    </script></body></html>]]></content>
      
      <categories>
          
          <category> life </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>hexo-theme-yilia-l</title>
      <link href="/2016/04/28/yilia-l/"/>
      <content type="html"><![CDATA[<p>修改自yilia主题<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="external">yilia</a><br>笔者非常喜欢yilia主题的简洁、优雅,极致的性能体验。不过其界面的排版不是非常满意,因此久自己改装了下.改了相关样式,新增了一些新鲜的功能:详细界面参考:<a href="http://kiritor.github.io/">我的博客</a></p><blockquote><ol><li>状态栏(最近的一些状态)</li><li>微简历(简单的介绍信息,只在首页显示)</li><li>文章目录(只在文章显示:文章类型为post,不需要目录指定文章类型为post-noTOC)</li><li>借助valine使用评论系统</li><li>站内搜索功能</li><li>捐赠功能</li><li>社会化分享</li></ol></blockquote><p>Github: <a href="https://github.com/Kiritor/hexo-theme-yilia-l" target="_blank" rel="external">https://github.com/Kiritor/hexo-theme-yilia-l</a><br>欢迎star 和 fork ！<br><a id="more"></a></p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3w1096ngfj31fd0u019t.jpg" alt="首页"><br>移动端请扫描二维码体验:</p><center><img src="https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3w17ychadj308c08cglo.jpg" alt="二维码"></center><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://github.com/Kiritor/hexo-theme-yilia-l.git themes/yilia<span class="_">-l</span></div></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>修改修改hexo根目录下的 _config.yml ： theme: yilia-l</p><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> themes/yilia<span class="_">-l</span></div><div class="line">git pull</div></pre></td></tr></table></figure><h2 id="主题配置项"><a href="#主题配置项" class="headerlink" title="主题配置项"></a>主题配置项</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Header</span></div><div class="line">menu:</div><div class="line">  <span class="comment">#主页: /archives</span></div><div class="line">  关于我: /resume</div><div class="line">  <span class="comment">#主页: /</span></div><div class="line">  前端开发: /categories/front</div><div class="line">  工作日志: /categories/work</div><div class="line">  点滴生活: /categories/life</div><div class="line"></div><div class="line">subnav:</div><div class="line">  github: <span class="string">"https://github.com/Kiritor"</span></div><div class="line">  weibo: <span class="string">"http://weibo.com/3206206100/profile?topnav=1&amp;wvr=6"</span></div><div class="line">  rss: <span class="string">"/atom.xml"</span></div><div class="line">  zhihu: <span class="string">"http://www.zhihu.com/people/kiritor"</span></div><div class="line">  <span class="comment">#douban: "#"</span></div><div class="line">  <span class="comment">#mail: "#"</span></div><div class="line">  <span class="comment">#facebook: "#"</span></div><div class="line">  <span class="comment">#google: "#"</span></div><div class="line">  <span class="comment">#twitter: "#"</span></div><div class="line">  <span class="comment">#linkedin: "#"</span></div><div class="line"></div><div class="line">rss: /atom.xml</div><div class="line"></div><div class="line"><span class="comment"># Content</span></div><div class="line">excerpt_link: More</div><div class="line">archive_yearly: <span class="literal">true</span> <span class="comment">#按年存档</span></div><div class="line">fancybox: <span class="literal">true</span></div><div class="line">mathjax: <span class="literal">false</span></div><div class="line"></div><div class="line"><span class="comment"># Miscellaneous</span></div><div class="line">google_analytics: <span class="string">''</span></div><div class="line">favicon: /img/favicon.ico</div><div class="line"></div><div class="line"><span class="comment">#你的头像url</span></div><div class="line">avatar: <span class="string">"http://kiritor.github.io/img/lcore.jpg"</span></div><div class="line"></div><div class="line"><span class="comment">#是否开启分享</span></div><div class="line">socialShare: <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="comment">#是否开启云标签</span></div><div class="line">tagcloud: <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="comment">#是否开启评论</span></div><div class="line">valine: <span class="literal">true</span></div><div class="line"><span class="comment">#是否开启多说最近评论:悬浮于首页(目前弃用多说)</span></div><div class="line"><span class="comment">#recentComment: false</span></div><div class="line"></div><div class="line"><span class="comment">#是否开启捐赠</span></div><div class="line">donate: <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="comment">#是否开启站内搜索</span></div><div class="line">search: <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="comment">#是否开启目录</span></div><div class="line">toc: <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="comment">#是否开启最近通知</span></div><div class="line">recent: <span class="literal">true</span></div><div class="line">recentContent: 最近打算回归学习,记录一点东西,慢慢找回写博客的习惯...</div><div class="line"></div><div class="line"><span class="comment">#是否开启微简历</span></div><div class="line">resume: <span class="literal">false</span></div><div class="line"></div><div class="line"><span class="comment">#是否开启友情链接</span></div><div class="line"><span class="comment">#不开启——</span></div><div class="line">friends: <span class="literal">false</span></div><div class="line"><span class="comment">#开启——</span></div><div class="line"><span class="comment">#friends:</span></div><div class="line">  <span class="comment">#奥巴马的博客: http://localhost:4000/</span></div><div class="line">  <span class="comment">#卡卡的美丽传说: http://localhost:4000/</span></div><div class="line">   <span class="comment">#本泽马的博客: http://localhost:4000/</span></div><div class="line">  <span class="comment">#吉格斯的博客: http://localhost:4000/</span></div><div class="line">  <span class="comment">#习大大大不同: http://localhost:4000/</span></div><div class="line">  <span class="comment">#托蒂的博客: http://localhost:4000/</span></div><div class="line"></div><div class="line"><span class="comment">#是否开启“关于我”。</span></div><div class="line"><span class="comment">#不开启——</span></div><div class="line"><span class="comment">#aboutme: false</span></div><div class="line"><span class="comment">#开启——</span></div><div class="line">aboutme: 乐于分享,喜欢环境音乐,爱看动漫,偶尔写写技术博客的小程一枚...</div></pre></td></tr></table></figure><p>常用的配置不在讲解，一些特别的配置如下:</p><h3 id="TOC"><a href="#TOC" class="headerlink" title="TOC"></a>TOC</h3><p>通过如下配置开启文章目录,需要注意的是所有文章都会开启<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">toc: <span class="literal">true</span></div></pre></td></tr></table></figure></p><p>Tips: 如果某个文章不需要目录,可以指定文章layout: post-noTOC实现<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">layout: post-noTOC</div><div class="line">title: 第一次面试官经历</div><div class="line">date: 2017-03-01 22:07:40</div></pre></td></tr></table></figure></p><h3 id="社会化分享"><a href="#社会化分享" class="headerlink" title="社会化分享"></a>社会化分享</h3><p>通过如下配置开启社会化分享,需要注意的是所有文章都会开启<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">socialShare: <span class="literal">true</span></div></pre></td></tr></table></figure></p><h3 id="valine评论"><a href="#valine评论" class="headerlink" title="valine评论"></a>valine评论</h3><p>基于相关原因，弃用多说，采用valine构建评论系统，关于valine可自行查阅。通过如下配置开启评论(全局文章)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#是否开启评论</span></div><div class="line">valine: <span class="literal">true</span></div></pre></td></tr></table></figure></p><p>Tips: 如果某些文章不想开启评论效果，可在新建文章时,指定comment: false,操作如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">layout: post-noTOC</div><div class="line">comment: <span class="literal">false</span></div><div class="line">title: 第一次面试官经历</div><div class="line">date: 2017-03-01 22:07:40</div><div class="line">category: work</div><div class="line">tags: 面试</div><div class="line">top: <span class="literal">true</span></div><div class="line">---</div><div class="line">......</div></pre></td></tr></table></figure></p><h3 id="捐赠"><a href="#捐赠" class="headerlink" title="捐赠"></a>捐赠</h3><p>通过如下配置，可开启捐赠(全局)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#是否开启捐赠</span></div><div class="line">donate: <span class="literal">true</span></div></pre></td></tr></table></figure></p><p>Tips: 如果某些文章不想开启捐赠,可在新建文章是，指定donate: false,操作如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">layout: post-noTOC</div><div class="line">donate: <span class="literal">false</span></div><div class="line">title: 第一次面试官经历</div><div class="line">date: 2017-03-01 22:07:40</div><div class="line">category: work</div><div class="line">tags: 面试</div><div class="line">top: <span class="literal">true</span></div><div class="line">---</div></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> front </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>碎片代码</title>
      <link href="/2016/04/28/Code-Piece/"/>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>记录一些开发中有用的代码片段(配置、技巧都可以)</p><h2 id="SpringMVC日期处理"><a href="#SpringMVC日期处理" class="headerlink" title="SpringMVC日期处理"></a>SpringMVC日期处理</h2><p>配置文件<br><a id="more"></a><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 处理responseBody 里面日期类型 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span></span></div><div class="line"><span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>&gt;</div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"objectMapper"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.fasterxml.jackson.databind.ObjectMapper"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dateFormat"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"java.text.SimpleDateFormat"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span> <span class="attr">value</span>=<span class="string">"yyyy-MM-dd"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></div></pre></td></tr></table></figure></p><p>还需要在entity时间字段中添加注解:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@DateTimeFormat</span>(pattern=<span class="string">"yyyy-MM-dd"</span>)</div><div class="line"><span class="keyword">private</span> Date startTime;</div></pre></td></tr></table></figure></p><h2 id="Easyui-Treegrid选择"><a href="#Easyui-Treegrid选择" class="headerlink" title="Easyui Treegrid选择"></a>Easyui Treegrid选择</h2><p>1.4.5版本之下(1.4.5新增级联属性),处理Treegrid复选框问题(加载完数据默认勾选,能够单独勾选父节点、子节点:通过操作DOM节点实现),返回的JSON格式带checked<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">onLoadSuccess: <span class="function"><span class="keyword">function</span>(<span class="params">row,data</span>)</span>&#123;</div><div class="line">    $(<span class="keyword">this</span>).treegrid(<span class="string">"expandAll"</span>);</div><div class="line">    <span class="comment">/*</span></div><div class="line">    $(this).treegrid("clearChecked");</div><div class="line">    var rows = data.rows;</div><div class="line">    for(i in rows)&#123;</div><div class="line">        console.info(rows[i].checked)</div><div class="line">        if(rows[i].checked==true)&#123;</div><div class="line">            //$(this).treegrid("checkRow",rows[i].id);</div><div class="line">        &#125;else &#123;</div><div class="line">            $(this).treegrid("uncheckRow",rows[i].id);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    */</div><div class="line"></div><div class="line">&#125;,</div><div class="line"><span class="attr">onCheck</span>: <span class="function"><span class="keyword">function</span>(<span class="params">row</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> kids = $(<span class="keyword">this</span>).treegrid(<span class="string">"getChildren"</span>,row.id);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> kids)&#123;</div><div class="line">        $(<span class="keyword">this</span>).treegrid(<span class="string">"checkRow"</span>,kids[i].id);</div><div class="line">    &#125;</div><div class="line">&#125;,</div><div class="line"><span class="attr">onUncheck</span>: <span class="function"><span class="keyword">function</span>(<span class="params">row</span>)</span>&#123;</div><div class="line">    <span class="comment">/*</span></div><div class="line">    var parent = $(this).treegrid("getParent",row.id);</div><div class="line">    while(parent)&#123;</div><div class="line">        var tr = $("[node-id="+parent.id+"]");</div><div class="line">        tr.removeClass("datagrid-row-checked")</div><div class="line">        tr.find("div.datagrid-cell-check input[type=checkbox]").prop("checked",false);</div><div class="line">        //$(this).treegrid("uncheckRow",parent.id);</div><div class="line">        parent = $(this).treegrid("getParent",parent.id);</div><div class="line">    &#125;</div><div class="line">    */</div><div class="line">    <span class="keyword">var</span> kids = $(<span class="keyword">this</span>).treegrid(<span class="string">"getChildren"</span>,row.id);</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> kids)&#123;</div><div class="line">        <span class="keyword">var</span> tr = $(<span class="string">"[node-id="</span>+kids[i].id+<span class="string">"]"</span>);</div><div class="line">        tr.removeClass(<span class="string">"datagrid-row-checked"</span>)</div><div class="line">        tr.find(<span class="string">"div.datagrid-cell-check input[type=checkbox]"</span>).prop(<span class="string">"checked"</span>,<span class="literal">false</span>);</div><div class="line">        $(<span class="keyword">this</span>).treegrid(<span class="string">"uncheckRow"</span>,kids[i].id);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Maven搭建Hadoop应用开发环境</title>
      <link href="/2016/04/26/Hadoop-dev-install/"/>
      <content type="html"><![CDATA[<h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><blockquote><p>   <strong>Hadoop版本:</strong>2.7.2<br>   <strong>Eclipse版本:</strong>Luna 4.4.1</p></blockquote><a id="more"></a><h2 id="创建maven工程"><a href="#创建maven工程" class="headerlink" title="创建maven工程"></a>创建maven工程</h2><p>如果安装了maven可以通过maven命令行创建简单工程,命令为:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn archetype:generate -DgroupId=my.hadoopstudy -DartifactId=hadoopstudy -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=<span class="literal">false</span></div></pre></td></tr></table></figure></p><p>也可以通过eclipse直接创建maven项目</p><h2 id="pom依赖"><a href="#pom依赖" class="headerlink" title="pom依赖"></a>pom依赖</h2><p>在pom.xml文件添加Hadoop依赖,内容如下:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-hdfs<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure></p><p>这样一个基础的Hadoop工程就构建起来了!</p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>为了测试做一些简单的开发.</p><h3 id="HDFS开发"><a href="#HDFS开发" class="headerlink" title="HDFS开发"></a>HDFS开发</h3><p>首先测试一下HDFS开发,以之前的伪分布式环境为前提:<a href="http://kiritor.github.io/2016/04/24/Hadoop-install/">http://kiritor.github.io/2016/04/24/Hadoop-install/</a><br>1.启动Hadoop,命令为:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/start-all.sh</div></pre></td></tr></table></figure></p><p>2.编码<br>这里通过程序创建文件,列出文件,输出指定文件内容,代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lcore.hadoop;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.net.URI;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FSDataOutputStream;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileStatus;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.IOUtils;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    String uri = <span class="string">"hdfs://localhost:9000/"</span>;  </div><div class="line">        Configuration config = <span class="keyword">new</span> Configuration();  </div><div class="line">        FileSystem fs = FileSystem.get(URI.create(uri), config);  </div><div class="line">   </div><div class="line">        <span class="comment">// 列出hdfs上/user/fkong/目录下的所有文件和目录  </span></div><div class="line">        FileStatus[] statuses = fs.listStatus(<span class="keyword">new</span> Path(<span class="string">"/test/"</span>));  </div><div class="line">        <span class="keyword">for</span> (FileStatus status : statuses) &#123;  </div><div class="line">            System.out.println(status);  </div><div class="line">        &#125;  </div><div class="line">   </div><div class="line">        <span class="comment">// 在hdfs的/user/fkong目录下创建一个文件，并写入一行文本  </span></div><div class="line">        FSDataOutputStream os = fs.create(<span class="keyword">new</span> Path(<span class="string">"/test/hadoop.log"</span>));  </div><div class="line">        os.write(<span class="string">"开启我的Hadoop之旅"</span>.getBytes());  </div><div class="line">        os.flush();  </div><div class="line">        os.close();  </div><div class="line">   </div><div class="line">        <span class="comment">// 显示在hdfs的指定文件的内容 </span></div><div class="line">        InputStream is = fs.open(<span class="keyword">new</span> Path(<span class="string">"/test/hadoop.log"</span>));  </div><div class="line">        IOUtils.copyBytes(is, System.out, <span class="number">1024</span>, <span class="keyword">true</span>); </div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>3.运行<br>直接application或者run on hadoop都可以,必须确保hadoop启动.输出结果如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">FileStatus&#123;path=hdfs://localhost:9000/<span class="built_in">test</span>/hadoop.log; isDirectory=<span class="literal">false</span>; length=24; replication=3; blocksize=134217728; modification_time=1461652343934; access_time=1461652342969; owner=lcore; group=supergroup; permission=rw-r--r--; isSymlink=<span class="literal">false</span>&#125;</div><div class="line">FileStatus&#123;path=hdfs://localhost:9000/<span class="built_in">test</span>/hexo.md; isDirectory=<span class="literal">false</span>; length=1443; replication=1; blocksize=134217728; modification_time=1461565620758; access_time=1461569568851; owner=lcore; group=supergroup; permission=rw-r--r--; isSymlink=<span class="literal">false</span>&#125;</div><div class="line">FileStatus&#123;path=hdfs://localhost:9000/<span class="built_in">test</span>/input; isDirectory=<span class="literal">true</span>; modification_time=1461652730181; access_time=0; owner=lcore; group=supergroup; permission=rwxr-xr-x; isSymlink=<span class="literal">false</span>&#125;</div><div class="line">FileStatus&#123;path=hdfs://localhost:9000/<span class="built_in">test</span>/out; isDirectory=<span class="literal">true</span>; modification_time=1461565736828; access_time=0; owner=lcore; group=supergroup; permission=rwxr-xr-x; isSymlink=<span class="literal">false</span>&#125;</div><div class="line">开启我的Hadoop之旅</div></pre></td></tr></table></figure></p><h3 id="MapReduce开发"><a href="#MapReduce开发" class="headerlink" title="MapReduce开发"></a>MapReduce开发</h3><p>功能描述:统计出现的名字次数.<br>1.编码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lcore.hadoop;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.util.GenericOptionsParser;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NameCount</span> </span>&#123;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Object</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt;</span>&#123;  </div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> IntWritable one = <span class="keyword">new</span> IntWritable(<span class="number">1</span>);  </div><div class="line">        <span class="keyword">private</span> Text name= <span class="keyword">new</span> Text();  </div><div class="line">   </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(Object key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;  </div><div class="line">            <span class="keyword">int</span> idx = value.toString().indexOf(<span class="string">" "</span>);  </div><div class="line">            <span class="keyword">if</span> (idx &gt; <span class="number">0</span>) &#123;  </div><div class="line">                String e = value.toString().substring(<span class="number">0</span>, idx);  </div><div class="line">                name.set(e);  </div><div class="line">                context.write(name, one);  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">   </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>,<span class="title">IntWritable</span>,<span class="title">Text</span>,<span class="title">IntWritable</span>&gt; </span>&#123;  </div><div class="line">        <span class="keyword">private</span> IntWritable result = <span class="keyword">new</span> IntWritable();  </div><div class="line">   </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;  </div><div class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;  </div><div class="line">            <span class="keyword">for</span> (IntWritable val : values) &#123;  </div><div class="line">                sum += val.get();  </div><div class="line">            &#125;  </div><div class="line">            result.set(sum);  </div><div class="line">            context.write(key, result);  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">   </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;  </div><div class="line">        Configuration conf = <span class="keyword">new</span> Configuration();  </div><div class="line">        String[] otherArgs = <span class="keyword">new</span> GenericOptionsParser(conf, args).getRemainingArgs();  </div><div class="line">        <span class="keyword">if</span> (otherArgs.length &lt; <span class="number">2</span>) &#123;  </div><div class="line">            System.err.println(<span class="string">"Usage: NameCount &lt;in&gt; &lt;out&gt;"</span>);  </div><div class="line">            System.exit(<span class="number">2</span>);  </div><div class="line">        &#125;  </div><div class="line">        Job job = Job.getInstance(conf, <span class="string">"name count"</span>);  </div><div class="line">        job.setJarByClass(NameCount.class);  </div><div class="line">        job.setMapperClass(MyMapper.class);  </div><div class="line">        job.setCombinerClass(MyReducer.class);  </div><div class="line">        job.setReducerClass(MyReducer.class);  </div><div class="line">        job.setOutputKeyClass(Text.class);  </div><div class="line">        job.setOutputValueClass(IntWritable.class);  </div><div class="line">        FileInputFormat.addInputPath(job, <span class="keyword">new</span> Path(otherArgs[<span class="number">0</span>]));  </div><div class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(otherArgs[<span class="number">1</span>]));  </div><div class="line">        System.exit(job.waitForCompletion(<span class="keyword">true</span>) ? <span class="number">0</span> : <span class="number">1</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>2.通过maven将打成的jar放在hadoop安装目录:share/hadoop/mapreduce/下.<br>3.创建一下目录及文件用于分析<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">event.log.1</div><div class="line">event.log.2</div><div class="line">event.log.3</div></pre></td></tr></table></figure></p><p>文件内容格式为:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Kiritor ...</div><div class="line">LCore ...</div></pre></td></tr></table></figure></p><p>之后复制文件到HDFS上<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">bin/hdfs dfs -mkdir /<span class="built_in">test</span>/input                             <span class="comment">#新建目录</span></div><div class="line">bin/hdfs dfs -put ~/Documents/event.log.2 /<span class="built_in">test</span>/input       <span class="comment">#复制文件</span></div><div class="line">bin/hdfs dfs -put ~/Documents/event.log.2 /<span class="built_in">test</span>/input</div><div class="line">bin/hdfs dfs -put ~/Documents/event.log.2 /<span class="built_in">test</span>/input</div></pre></td></tr></table></figure></p><p>4.运行<br>使用如下命令运行:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/hadoop jar share/hadoop/mapreduce/hadoop-0.0.1-SNAPSHOT.jar com.lcore.hadoop.EventCount  /<span class="built_in">test</span>/input /<span class="built_in">test</span>/input/out</div></pre></td></tr></table></figure></p><p>执行结果存放在/test/input/out目录下<br>5.查看执行结果<br>使用如下命令查看执行结果:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">bin/hdfs dfs -cat /<span class="built_in">test</span>/input/out/part-r-00000</div><div class="line"><span class="comment">#执行结果</span></div><div class="line">KK2</div><div class="line">Kiritor3</div><div class="line">L.Tao4</div><div class="line">LCore5</div></pre></td></tr></table></figure></p><p>over!</p>]]></content>
      
      <categories>
          
          <category> work </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hadoop </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mac下Hadoop2.7.x配置伪分布环境(wordcount运行)</title>
      <link href="/2016/04/24/Hadoop-install/"/>
      <content type="html"><![CDATA[<p>关于Hadoop的安装与配置其实挺多了,不过大多是1.x.x系列的.将自己的安装配置做个笔记记录.</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>   操作系统:Mac OS X 10.10<br>   Hadoop版本: 2.7.2</p></blockquote><p>安装JDK并配置环境变量</p><h2 id="配置Mac-OS自身ssh环境"><a href="#配置Mac-OS自身ssh环境" class="headerlink" title="配置Mac OS自身ssh环境"></a>配置Mac OS自身ssh环境</h2><p>配置ssh环境,在终端中输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh localhost</div></pre></td></tr></table></figure></p><a id="more"></a><p>如果出现错误提示信息,表示当前用户没有权限.更改设置如下:进入system prference–&gt;sharing–&gt;勾选remote login,并设置allow access for all users.再次输入”ssh localhost”输入密码确认,即可看到ssh成功.<br>比较麻烦的是,每次都会要求输入用户密码.Hadoop提供了无密码验证登陆的方式:</p><blockquote><ol><li>创建ssh-key,命令:ssh-keygen -t dsa -P ‘’ -f ~/.ssh/id_dsa<br>ssh-keygen表示生成秘钥:-t表示秘钥类型;-P用于提供密语;-f指定生成的秘钥文件.这个命令在”~/.ssh”文件夹下创建两个文件<br>id_dsa和id_das_pub,是ssh的一对私钥和公钥</li><li>将公钥和私钥追加到授权的key中,输入:cat ~/.ssh/id_dsa.pub &gt;&gt; ~/.ssh/authorized_keys</li></ol></blockquote><p>然后就可以无密码验证登陆了,成功后输入如下信息:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">LCore:~ lcore$ ssh localhost</div><div class="line">Password:</div><div class="line">Last login: Sun Apr 24 22:06:11 2016</div><div class="line">LCore:~ lcore$</div></pre></td></tr></table></figure></p><h2 id="下载Hadoop"><a href="#下载Hadoop" class="headerlink" title="下载Hadoop"></a>下载Hadoop</h2><p>下载Hadoop安装包有两种方式:<br>1、直接官网下载<br><a href="http://mirrors.hust.edu.cn/apache/hadoop/core/stable/hadoop-2.7.2.tar.gz" target="_blank" rel="external">http://mirrors.hust.edu.cn/apache/hadoop/core/stable/hadoop-2.7.1.tar.gz</a><br>2、使用shell进行下载,命令如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http://mirrors.hust.edu.cn/apache/hadoop/core/stable/hadoop-2.7.2.tar.gz</div></pre></td></tr></table></figure></p><p>接下来解压缩Hadoop到事先指定好的目录,移动并压缩:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mv ~/Downloads/hadoop-2.7.2.tar.gz ~/dev/hadoop</div><div class="line">tar -zxvf hadoop-2.7.2.tar.gz</div></pre></td></tr></table></figure></p><h2 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h2><p>在实际配置Hadoop之前,我们需要配置好环境变量<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> HADOOP_HOME=/Users/lcore/dev/hadoop/hadoop-2.7.2</div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HADOOP_HOME</span>/bin</div></pre></td></tr></table></figure></p><p>Tips:export设置只对当前的bash登陆session有效.可是使用source命令使其立即生效.</p><h2 id="Hadoop配置"><a href="#Hadoop配置" class="headerlink" title="Hadoop配置"></a>Hadoop配置</h2><p>2.7.x系列的版本配置文件在hadoop/etc/hadoop目录下</p><h3 id="配置hadoop-env-sh"><a href="#配置hadoop-env-sh" class="headerlink" title="配置hadoop-env.sh"></a>配置hadoop-env.sh</h3><p>如果该文件里没有配置JDK,可以使用如下命令配置:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> JAVA_HOME=<span class="variable">$&#123;JAVA_HOME&#125;</span></div></pre></td></tr></table></figure></p><p>否则会报错找不到JDK</p><h3 id="配置core-site-xml"><a href="#配置core-site-xml" class="headerlink" title="配置core-site.xml"></a>配置core-site.xml</h3><p>该配置文件用于指定NameNode的主机名与端口<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;configuration&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;fs.defaultFS&lt;/name&gt;</div><div class="line">        &lt;value&gt;hdfs://localhost:9000&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</div><div class="line">        &lt;value&gt;file:/Users/lcore/dev/hadoop/hadoop-2.7.2/tmp&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;io.file.buffer.size&lt;/name&gt;</div><div class="line">        &lt;value&gt;131702&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure></p><h3 id="配置hdfs-site-xml"><a href="#配置hdfs-site-xml" class="headerlink" title="配置hdfs-site.xml"></a>配置hdfs-site.xml</h3><p>该配置文件制定了HDFS的默认参数及副本数,因为仅运行在一个节点上,所以这里的副本数为1<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;configuration&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;</div><div class="line">        &lt;value&gt;file:/Users/lcore/dev/hadoop/hadoop-2.7.2/tmp/hdfs/name&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt;</div><div class="line">        &lt;value&gt;file:/Users/lcore/dev/hadoop/hadoop-2.7.2/tmp/hdfs/data&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line"></div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;dfs.replication&lt;/name&gt;</div><div class="line">        &lt;value&gt;1&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line"></div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt;</div><div class="line">        &lt;value&gt;localhost:9001&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">      &lt;name&gt;dfs.webhdfs.enabled&lt;/name&gt;</div><div class="line">      &lt;value&gt;<span class="literal">true</span>&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure></p><p>其中dfs.namenodename.dir和dfs.datanode.data.dir的路径可以自由设置,最好在hadoop.tmp.dir目录下.</p><h3 id="配置mapred-site-xml-template"><a href="#配置mapred-site-xml-template" class="headerlink" title="配置mapred-site.xml.template"></a>配置mapred-site.xml.template</h3><p>该配置文件制定了JobTracker的主机名与端口<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;configuration&gt;</div><div class="line"></div><div class="line">&lt;property&gt;</div><div class="line"></div><div class="line">&lt;name&gt;mapred.job.tracker&lt;/name&gt;</div><div class="line"></div><div class="line">&lt;value&gt;localhost:9001&lt;/value&gt;</div><div class="line"></div><div class="line">&lt;/property&gt;</div><div class="line"></div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure></p><h2 id="运行hadoop"><a href="#运行hadoop" class="headerlink" title="运行hadoop"></a>运行hadoop</h2><p>在配置完成之后,运行Hadoop</p><h3 id="初始化HDFS"><a href="#初始化HDFS" class="headerlink" title="初始化HDFS"></a>初始化HDFS</h3><p>在hadoop主目录下输入一下命令:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/hdfs namenode -format</div></pre></td></tr></table></figure></p><p>过程中需要进行ssh验证,因为之前已经登录了,所以初始化过程键入y即可,输出结果如下:</p><p><center><img src="/img/hadoop-hdfs.png" alt="hdfs"></center><br>表示已经初始化完成</p><h3 id="开启NameNode和DataNode守护进程"><a href="#开启NameNode和DataNode守护进程" class="headerlink" title="开启NameNode和DataNode守护进程"></a>开启NameNode和DataNode守护进程</h3><p>使用如下命令开启：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sbin/start-dfs.sh</div></pre></td></tr></table></figure></p><p>成功的截图如下:</p><p><center><img src="/img/hadoop-namenode.png" alt="name"></center></p><h3 id="查看进程信息"><a href="#查看进程信息" class="headerlink" title="查看进程信息"></a>查看进程信息</h3><p>使用jps命令查看进程出现如下信息表示DataNode和NameNode都已经开启<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">4368 Jps</div><div class="line">3202 NameNode</div><div class="line">3411 SecondaryNameNode</div><div class="line">3295 DataNode</div></pre></td></tr></table></figure></p><h3 id="查看Web-UI"><a href="#查看Web-UI" class="headerlink" title="查看Web UI"></a>查看Web UI</h3><p>在浏览器中输入:<a href="http://localhost:50070" target="_blank" rel="external">http://localhost:50070</a>,即可查看相关信息,截图如下:</p><p><center><img src="/img/hadoop-webui.png" alt="webui"></center><br>此时,hadoop伪分布式集成环境已经搭建完成,接下来运行一下WordCount例子.</p><h2 id="运行WordCount"><a href="#运行WordCount" class="headerlink" title="运行WordCount"></a>运行WordCount</h2><p>1.新建一个测试文件,内容随意(这里我把一篇博客文章做测试)<br>2.在HDFS中新建测试文件夹test.命令为:bin/hdfs dfs -mkdir /test,使用”bin/hdfs dfs -ls”命令查看是否新建成功.<br>3.上传测试文件,命令如下:bin/hdfs dfs -put ~/dev/blog/hexo.md /test/,可使用之前命令查看是否上传成功.<br>4.运行wordcount,命令如下:bin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.2.jar wordcount /test/hexo.md /test/out,运行完成后,在/test目录下生成名为out的目录,其内容如下所示:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-rw-r--r--   1 lcore supergroup          0 2016-04-25 14:28 /<span class="built_in">test</span>/out/_SUCCESS</div><div class="line">-rw-r--r--   1 lcore supergroup       1470 2016-04-25 14:28 /<span class="built_in">test</span>/out/part-r-00000</div></pre></td></tr></table></figure></p><p>表示已经运行成功,结果存放在part-r-00000文件中<br>5.使用命令:bin/hadoop fs -cat /test/out/part-r-00000 查看结果为如下图所示:</p><p><center><img src="/img/hadoop-wordcount.png" alt="wordcount"></center><br>到此,hadoop-2.7.2伪分布式配置到此结束了!</p>]]></content>
      
      <categories>
          
          <category> work </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hadoop </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mac设置环境变量</title>
      <link href="/2016/04/18/Mac-Env/"/>
      <content type="html"><![CDATA[<p>在mac,linux中配置环境变量对于新手来说,是一个有点头痛的问题.因为经常看到不同的方式配置环境变量.到底应该怎么配置,配置在什么地方(全局/用户级).做个简要的笔记.</p><h2 id="Shell类型"><a href="#Shell类型" class="headerlink" title="Shell类型"></a>Shell类型</h2><p>首先需要判断下使用的Mac OS X是什么样的Shell,使用命令echo $SHELL<br>如果输出的是:csh或者tcsh.那么就是C Shell.<br>如果输出的事:bash,sh,zsh,那么就是Bourne Shell的一个变种.<br>Max OS X 10.2之前默认的是C Shell.<br>Mac os X 10.3之后默认的是Bourne Shell.<br><a id="more"></a></p><h2 id="Mac环境变量配置"><a href="#Mac环境变量配置" class="headerlink" title="Mac环境变量配置"></a>Mac环境变量配置</h2><p>如果是Bourne Shell设置环境变量的地方如下</p><h3 id="etc-profile"><a href="#etc-profile" class="headerlink" title="./etc/profile"></a>./etc/profile</h3><p>全局(共有配置),不管是哪个用户,登陆时都会读取该文件。不建议修改此文件.</p><h3 id="etc-bashrc"><a href="#etc-bashrc" class="headerlink" title="./etc/bashrc"></a>./etc/bashrc</h3><p>全局(共有)配置,bash shell执行时，不管何种方式,都会读取次文件。一般在这个文件中添加系统级别的环境变量.</p><h3 id="bash-profile"><a href="#bash-profile" class="headerlink" title="~/.bash_profile"></a>~/.bash_profile</h3><p>每个用户都可使用该文件输入专用于自己使用的shell信息,当用户登录时,该文件仅仅执行一次!一般在这个文件添加用户级的环境变量,比较建议使用该方式配置。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_25.jdk/contents/Home</div><div class="line">MAVEN_HOME=/Users/lcore/dev/application/apache-maven-3.2.5</div><div class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$MAVEN_HOME</span>/bin</div><div class="line"></div><div class="line"><span class="built_in">export</span> MAVEN_HOME</div><div class="line"><span class="built_in">export</span> PATH</div><div class="line"><span class="built_in">export</span> GOPATH=~/dev/code/go/</div><div class="line"><span class="comment">#export GOBIN=/usr/local/go/bin</span></div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$GOBIN</span></div></pre></td></tr></table></figure></p><p>如果想立即生效,即可执行下面的语句:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">source</span> .bash_profile</div></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> work </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mac实用小技巧</title>
      <link href="/2016/04/18/Mac-Skills/"/>
      <content type="html"><![CDATA[<p>使用Mac已经很长一段时间了,从最开始的生疏到慢慢熟悉,掌握了一些实用的小技巧,这里略作整理,不定期更新.</p><h3 id="终端忽略大小写补全"><a href="#终端忽略大小写补全" class="headerlink" title="终端忽略大小写补全"></a>终端忽略大小写补全</h3><p>打开终端,输入:<br><a id="more"></a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nano .inputrc</div></pre></td></tr></table></figure></p><p>在里面粘贴如下语句:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">set</span> completion-ignore-case on</div><div class="line"><span class="built_in">set</span> show-all-if-ambiguous on</div><div class="line">TAB: menu-complete</div></pre></td></tr></table></figure></p><p>Control+O,回车保存,重启中断,OK~,之后按Tab键即可自动补全~</p>]]></content>
      
      <categories>
          
          <category> work </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Shiro-ini配置</title>
      <link href="/2016/04/04/ini%E9%85%8D%E7%BD%AE/"/>
      <content type="html"><![CDATA[<p>Shiro的配置十分灵活,支持ini、XML等方式.它的配置是从根对象securityManager开始的.</p><h2 id="根对象SecrityManager"><a href="#根对象SecrityManager" class="headerlink" title="根对象SecrityManager"></a>根对象SecrityManager</h2><p>回顾Shiro的架构图可以知道,shiro是从根对象SecurityManager进行身份验证和授权的,这个对象是线程安全且整个应用只有一个,shiro提供了SecurityUtils让我们绑定它为全局的,方便后续使用.<br><a id="more"></a><br>Shiro的类都是POJO的,因此都很容易的放到任何的Ioc容器管理,但是和一般的IoC容器(类似Spring)的区别点在于,shiro是从根对象securityMnanager开始导航;其支持的依赖注入:public孔灿构造器对象的创建、setter依赖注入.</p><h2 id="ini配置"><a href="#ini配置" class="headerlink" title="ini配置"></a>ini配置</h2><p>int配置文件类似于Java中的properties(key/vale),不过体哦那个了讲key/value分区selection的特性,key是每个分区不重复即可,而不是整个配置文件,比如:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[main]</div><div class="line"><span class="comment">#提供了对根对象securityManager及其依赖的配置</span></div><div class="line">securityManager=org.apache.shiro.mgt.DefaultSecurityManager</div><div class="line">securityManager.realms=<span class="variable">$jdbcRealm</span></div><div class="line">[users]</div><div class="line"><span class="comment">#提供了对用户/密码及其角色的配置,用户名=密码,角色1,角色2</span></div><div class="line">username=password,role1,role2</div><div class="line">[roles]</div><div class="line"><span class="comment">#提供了角色及权限之间的关系的配置,角色=权限1,权限2</span></div><div class="line">role1=permission1,permission2</div><div class="line">[urls]</div><div class="line"><span class="comment">#用于web,提供了对web url拦截相关的配置,url=拦截器[参数],拦截器</span></div><div class="line">/index.html = anon</div><div class="line">/admin/** = authc,roles[admin],perms[<span class="string">"permission1"</span>]</div></pre></td></tr></table></figure></p><p><strong>[main]部分</strong><br>提供了对根对象securityManager及其依赖对象的配置.<br><strong>创建对象</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">securityManager=org.apache.shiro.mgt.DefaultSecurityManager</div></pre></td></tr></table></figure></p><p>其构造器必须是public空惨构造器,通过反射创建相应的实例。<br><strong>常量值setter注入</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">dataSource.driverClassName=com.mysql.jdbc.Driver</div><div class="line">jdbcRealm.permissionsLookupEnabled=<span class="literal">true</span></div></pre></td></tr></table></figure></p><p>会自动调用jdbcRealm.setPermissionsLookupEnabled(true),对于这种常量值会自动类型转换.<br><strong>对象引用setter注入</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">authenticator=org.apache.shiro.authc.pam.ModularRealmAuthenticator</div><div class="line">authenticationStrategy=org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy</div><div class="line">authenticator.authenticationStrategy=<span class="variable">$authenticationStrategy</span></div><div class="line">securityManager.authenticator=<span class="variable">$authenticator</span></div></pre></td></tr></table></figure></p><p>会自动通过securityManager.setAuthenticator(authenticator)注入引用依赖.<br><strong>嵌套属性setter注入</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">securityManager.authenticator.authenticationStrategy=<span class="variable">$authenticationStrategy</span></div></pre></td></tr></table></figure></p><p><strong>byte数组setter注入</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#base64 byte[]</span></div><div class="line">authenticator.bytes=aGVsbG8=</div><div class="line"><span class="comment">#hex byte[]</span></div><div class="line">authenticator.bytes=0x68656c6c6f</div></pre></td></tr></table></figure></p><p>默认需要使用Base64进行编码,也可以使用0x十六进制.<br><strong>Array/Set/List setter注入</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">authenticator.array=1,2,3</div><div class="line">authenticator.set=<span class="variable">$jdbcRealm</span>,<span class="variable">$jdbcRealm</span></div></pre></td></tr></table></figure></p><p>Map setter注入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">authenticator.map=<span class="variable">$jdbcRealm</span>:<span class="variable">$jdbcRealm</span>,1:1,key:abc</div></pre></td></tr></table></figure></p><p><strong>实例化/注入顺序</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">realm=Realm1</div><div class="line">realm=Realm12</div></pre></td></tr></table></figure></p><p>后面的会覆盖前面的.<br><strong>[users]部分</strong><br>配置用户名/密码及其角色,格式”用户名=密码,角色1,角色2”,角色部分可以省略<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[users]</div><div class="line">zhang=123,role1,role2</div><div class="line">wang=123</div></pre></td></tr></table></figure></p><p>密码一般生成摘要/加密存储(md5),后续会使用到.<br><strong>[roles]部分</strong><br>配置角色及权限之间的关系,格式: “角色=权限1,权限3”;如:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[roles]</div><div class="line">role1=user:create,user:update</div><div class="line">role2=*</div></pre></td></tr></table></figure></p><p><strong>[urls]部分</strong><br>配置url及相应的拦截器之间的关系,格式: “url=拦截器[参数],拦截器[参数]”,如:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[urls]</div><div class="line">/admin/** = authc, roles[admin], perms[<span class="string">"permission1"</span>]</div></pre></td></tr></table></figure></p><p>在之后的shiro集成到web的例子中在深入了解.</p>]]></content>
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shiro </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Shiro-Authorization(授权)</title>
      <link href="/2016/03/10/shiro-Authorization/"/>
      <content type="html"><![CDATA[<h2 id="Authorization"><a href="#Authorization" class="headerlink" title="Authorization"></a>Authorization</h2><p>授权,也叫访问控制,即在应用中控制控制谁能访问那些资源(比如访问页面,编辑数据等).在授权中,有几个关键的对象需要了解:<strong>主体(Subject)</strong>、<strong>资源(Resources)</strong>、<strong>权限(Permission)</strong>、<strong>角色(Role)</strong>.<br><strong>主体:</strong>即访问应用的用户,在shiro中使用Subject代表主体,用户只有在授权之后才能访问相应的资源.<br><strong>资源:</strong>在应用中用户可以访问、操作的任何东西都可以称作为资源(某个页面,按钮等),用户只有授权之后才能访问.<br><strong>权限:</strong>安全策略中的原子授权单位,通过权限可以表示用户在应用中有没有操作某个资源的权利.Tips：权限仅仅反映了用户在某个资源上的操作允不允许,不反应谁去执行此操作,权限赋予给用户这个操作Shiro并不关心,而是需要应用系统自己去实现。Shiro支持<strong>粗粒度权限</strong>和<strong>细粒度权限</strong>,后续在深入.<br><a id="more"></a><strong>角色:</strong>角色代表了操作集合,也就是权限的集合,大部分情况下我们会赋予用户角色而不是权限,这样用户可以拥有某个角色的一组权限,管理方便。不同的角色拥有一组不同的权限。<br><strong>隐式角色:</strong>角色作为一个隐式的构造,你的应用程序仅仅基于一个角色就蕴含了一组行为(即权限),在软件级别上没有”角色A允许执行操作A,B,C”.直接通过角色来验证用户有没有操作权限,粒度是以角色为单位进行访问控制(<strong>RBAC :Role Based Acess Control,基于角色的访问控制</strong>),粒度较粗,如果权限规则调整则可能造成多处代码修改。<br><strong>DEMO：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//项目经理操作</span></div><div class="line"><span class="keyword">if</span>(user.hasRole(<span class="string">"项目经理"</span>))&#123;</div><div class="line">    <span class="comment">//do something</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//权限调整,设计经理也可以操作,则必须修改此处,或者更多出的代码</span></div><div class="line"><span class="keyword">if</span>(user.hasRole(<span class="string">"项目经理"</span>)||user.hasRole(<span class="string">"设计经理"</span>))&#123;</div><div class="line">    <span class="comment">//do something</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>显然这种方式做权限控制是不合理的,因为角色拥有的权限根据企业的需要可能动态的进行调整,此处以角色为单位控制权限的访问(硬编码)完全无法适应。一个解决方法就是:<br><strong>判断某角色是否具有某种权限不能写死在代码中,应该是根据数据库读取来完成,角色聚合一组权限集合</strong>,以资源为单位。这就是RBAC新解(<strong>Resources Based Acess Control:基于资源的访问控制</strong>)<br><strong>显示角色:</strong>程序中通过权限控制谁能访问某个资源,角色聚合一组权限集合(对应资源),应用可以很明确的知道该角色有哪些权限,这样假设某个角色不能访问某个资源时,只需要从权限集合中移除即可,无需修改任何代码,粒度是以资源为单位的,粒度较细,推荐方式。如下图;</p><p><center><img src="/img/role_resources.png" alt="shiro_high"></center><br>对应我们在编写权限代码的时候例子如下:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#if(shiro.hasPermission("user:create"))</div><div class="line">&lt;a id="create"&gt;新建&lt;/a&gt;</div><div class="line">#end</div></pre></td></tr></table></figure></p><p>上面代码是velocity中对于shiro的应用,意思是用户是否拥有创建用户的权利,有则显示创建按钮,反之则不显示.以user: create资源为单位控制访问,将应用系统资源、角色以及角色和资源的关系(权限规则)剥离出来,粒度细,而且通过改变用户和角色的关系,角色的权限集合实现动态灵活的授权.<br>Shiro既支持隐式方式粗粒度的授权,也支持显示方式细粒度的授权.不过更提倡的是显示角色即基于资源的访问控制.</p><h2 id="授权方式"><a href="#授权方式" class="headerlink" title="授权方式"></a>授权方式</h2><p>Shiro支持三种方式的授权:</p><h3 id="编程式"><a href="#编程式" class="headerlink" title="编程式"></a>编程式</h3><p>通过代码可以实现授权<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Subject sub  = SecurityUtils.getSubject();</div><div class="line"><span class="keyword">if</span>(sub.hasRole(<span class="string">"admin"</span>))&#123;</div><div class="line">    <span class="comment">//do something</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">sub.isPermitted(<span class="string">"user:create"</span>)  <span class="comment">//是否具有创建用户的权利</span></div></pre></td></tr></table></figure></p><h3 id="注解式"><a href="#注解式" class="headerlink" title="注解式"></a>注解式</h3><p>Shiro可以通过注解完成授权,没有权限将抛出相应的异常,不过需要在你的应用程序中启用AOP支持<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequiresRoles</span>(<span class="string">"admin"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createUser</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="meta">@RequiresPermissions</span>(<span class="string">"user:create"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createUser</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="标签式"><a href="#标签式" class="headerlink" title="标签式"></a>标签式</h3><p>shiro也提供页面标签简化前端的代码.以jsp为例子:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;shiro:hasRole name="admin"&gt;</div><div class="line">&lt;a&gt;创建&lt;/a&gt;</div><div class="line">&lt;/shiro:hasRole&gt;</div></pre></td></tr></table></figure></p><h2 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h2><p>下面根据上面的两种权限控制方式，来看看shiro到底是如何进行授权的.</p><h3 id="基于角色的访问控制-隐式角色"><a href="#基于角色的访问控制-隐式角色" class="headerlink" title="基于角色的访问控制(隐式角色)"></a>基于角色的访问控制(隐式角色)</h3><p>ini配置文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[users]</div><div class="line">#用户名及其对应的密码和角色</div><div class="line">L.Tao=LCore,role1,role2</div><div class="line">Kiritor=LCore,role1</div></pre></td></tr></table></figure></p><p>Tips: shiro不负责维护用户-角色信息,需要应用提供,shiro只是提供相应的接口方便验证,这里我们先写死,后续会介绍如何动态获取用户角色(数据库)<br>测试用例<br>先做一个初始化shiro的方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Before</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// 1、通过ini文件获取securityManager工厂</span></div><div class="line">    Factory&lt;SecurityManager&gt; factory = <span class="keyword">new</span> IniSecurityManagerFactory(<span class="string">"classpath:shiro.ini"</span>);</div><div class="line">    <span class="comment">// 2、得到securityManager实例,绑定SecurityUtils</span></div><div class="line">    SecurityManager manager = factory.getInstance();</div><div class="line">    SecurityUtils.setSecurityManager(manager);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>以L.Tao/LCore 用户做测试,测试代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">   <span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">// 1、得到Subject及创建用户名/密码身份验证Token（即用户身份/凭证）</span></div><div class="line">Subject subject = SecurityUtils.getSubject();</div><div class="line">UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">"L.Tao"</span>, <span class="string">"LCore"</span>);</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"><span class="comment">// 2、登录，即身份验证,委托给securityManager</span></div><div class="line">subject.login(token);</div><div class="line">&#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</div><div class="line"><span class="comment">// 3、身份验证失败</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">Assert.assertEquals(<span class="keyword">true</span>, subject.isAuthenticated()); <span class="comment">// 断言用户已经登录</span></div><div class="line">System.out.println(subject.hasRole(<span class="string">"role1"</span>));</div><div class="line">System.out.println(subject.hasRole(<span class="string">"role2"</span>));</div><div class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">list.add(<span class="string">"role1"</span>);</div><div class="line">list.add(<span class="string">"role2"</span>);</div><div class="line"><span class="keyword">for</span>(Boolean temp:subject.hasRoles(list))&#123;</div><div class="line">   System.out.println(temp);</div><div class="line">&#125;</div><div class="line">       System.out.println(subject.hasAllRoles(list));</div><div class="line"><span class="comment">// 4、退出:任何现有的session会清空</span></div><div class="line">subject.logout();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="literal">true</span></div><div class="line"><span class="literal">true</span></div><div class="line"><span class="literal">true</span></div><div class="line"><span class="literal">true</span></div><div class="line"><span class="literal">true</span></div></pre></td></tr></table></figure></p><p>修改上述的用户信息,以Kiritor/LCore测试,输出结果为;<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="literal">true</span></div><div class="line"><span class="literal">false</span></div><div class="line"><span class="literal">true</span></div><div class="line"><span class="literal">false</span></div><div class="line"><span class="literal">false</span></div></pre></td></tr></table></figure></p><p>Shiro提供了hasRole/hasRoles/hasAllRoles用于判断用户是否拥有某个(些)角色;shiro还提供checkRole/checkRoles方法,不同的是当判断为假的时候,会抛出UnauthorizedException异常.</p><h3 id="基于资源的访问控制-显示角色"><a href="#基于资源的访问控制-显示角色" class="headerlink" title="基于资源的访问控制(显示角色)"></a>基于资源的访问控制(显示角色)</h3><p>ini配置文件如下:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[users]</div><div class="line">#用户名及其对应的密码和角色</div><div class="line">L.Tao=LCore,role1,role2</div><div class="line">Kiritor=LCore,role1</div><div class="line">[roles]</div><div class="line">role1=user:create,user:update</div><div class="line">role2=user:create,user:delete</div></pre></td></tr></table></figure></p><p>同样的Shiro也不维护权限信息,shiro只是提供相应的接口方便验证<br>测试代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">   <span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">// 1、得到Subject及创建用户名/密码身份验证Token（即用户身份/凭证）</span></div><div class="line">Subject subject = SecurityUtils.getSubject();</div><div class="line">UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">"L.Tao"</span>, <span class="string">"LCore"</span>);</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"><span class="comment">// 2、登录，即身份验证,委托给securityManager</span></div><div class="line">subject.login(token);</div><div class="line">&#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</div><div class="line"><span class="comment">// 3、身份验证失败</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">Assert.assertEquals(<span class="keyword">true</span>, subject.isAuthenticated()); <span class="comment">// 断言用户已经登录</span></div><div class="line">System.out.println(subject.isPermitted(<span class="string">"user:create"</span>));</div><div class="line">System.out.println(subject.isPermitted(<span class="string">"user:update"</span>));</div><div class="line">System.out.println(subject.isPermitted(<span class="string">"user:delete"</span>));</div><div class="line"><span class="comment">// 4、退出:任何现有的session会清空</span></div><div class="line">subject.logout();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>输出:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="literal">true</span></div><div class="line"><span class="literal">true</span></div><div class="line"><span class="literal">true</span></div></pre></td></tr></table></figure></p><p>修改上述用户,以Kiritor/LCore测试,输出为:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="literal">true</span></div><div class="line"><span class="literal">true</span></div><div class="line"><span class="literal">false</span></div></pre></td></tr></table></figure></p><p>同样shiro提供checkPermission/checkPermissions的方式,不同的是当判断为假的时候,会抛出会抛出UnauthorizedException异常.<br>到此为止基于资源的访问控制就完成了,这种方式的一般规则是”资源标识符:操作”,以资源为单位,一个很大的好处是当权限规则发生变化的时候,基本都是资源级别的修改,不会对其他代码产生影响,粒度较小.需要维护”用户-角色,角色-权限(资源:操作)”之间的关系.就实际情况来说应用系统提供额外模块维护这一关系是非常必要的,可以灵活的定义权限规则.</p><h2 id="授权流程"><a href="#授权流程" class="headerlink" title="授权流程"></a>授权流程</h2><p>shiro内部的授权流程是如何的呢?如下图:</p><p><center><img src="/img/shiro_authorization.png" alt="shiro_high"></center><br><strong>流程如下:</strong></p><blockquote><ol><li>首先调用Subject.isPermitted<em>/hasRole</em>接口,委托给SecurityManager,接着SecuityManager委托给Authorizer;</li><li>Authorizer是真正的授权者,如果调用isPermitted(),会通过PermissionResolver把字符串转换为相应的Permission实例;</li><li>进行授权之前,shiro会调用相应的Realm获取Subject相应的角色/权限用于匹配传入的角色/权限;</li><li>Authorizer会判断Realm的角色/权限是否和传入的匹配,多个Realm则会委托给ModularRealmAuthorizer进行循环判断,匹配返回true,否则返回false(或者抛出异常)表示授权失败.</li></ol></blockquote><p>ModularRealmAuthorizer进行多Realm匹配流程:</p><blockquote><ol><li>检查Realm是否实现了Authorizer;</li><li>如果实现了Authorizer,那么则调用isPermitted<em>/HasRole</em>接口进行匹配;</li><li>如果有一个Realm匹配那么将返回true,否则返回false.</li></ol></blockquote><p>Realm进行授权,应该集成AuthorizingRealm,其流程是:</p><blockquote><ol><li>如果调用hasRole*,则直接获取AuthorizationInfo.getRoles()与传入的角色比较即可;<br>如果调用isPermitted,需要先通过PermissionResolver将权限字符串转换成相应的Permisson实例,默认使用WildcardPermissionResolver,即转换为通配符的WildcardPermission;</li><li>通过AuthorizationInfo.getObjectPermissions()得到Permission实例集合;通过AuthorizationInfo.getStringPermissions()得到字符串集合并通过PermissionResolver解析为<br>Permission实例;然后获取用户的角色,并通过RolePermissionResolver解析角色对应的权限集合</li><li>接着调用Permission.implies()逐个与传入的权限比较,有匹配则返回true,反之返回false.</li></ol></blockquote><p>下面看看授权过程中涉及到的一些接口</p><h3 id="Authorizer"><a href="#Authorizer" class="headerlink" title="Authorizer"></a>Authorizer</h3><p>Authorizer主要是进行授权,作为shiro API中授权核心的入口点,提供了相应的角色/权限判断接口。SecurityManager继承了Authorizer,且提供了ModularRealmAuthorizer用于多Realm时的权限匹配</p><h3 id="PermissionResolver"><a href="#PermissionResolver" class="headerlink" title="PermissionResolver"></a>PermissionResolver</h3><p>PermimssionResolver用于解析权限字符串到Permission实例</p><h3 id="RolePermissionResolver"><a href="#RolePermissionResolver" class="headerlink" title="RolePermissionResolver"></a>RolePermissionResolver</h3><p>RolePermissionResolver用于根据角色解析相应的权限集合.</p>]]></content>
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shiro </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Oracle-数据库实例、表空间、用户、表之间的关系(转)</title>
      <link href="/2015/12/23/Oracle-instance-tablespase-user-table/"/>
      <content type="html"><![CDATA[<p>完整的Oracle数据库通常由两部分组成:<strong>Oracle数据库</strong>和<strong>数据库实例</strong>。</p><blockquote><p>   1)数据库是一系列物理文件的集合(数据文件,控制文件,联机日志,参数文件等);<br>   2)Oracle数据库实例则是一组Oracle后台进程/线程以及在服务器分配的共享内存区;</p></blockquote><p>在启动数据库服务时,实际上实在服务器内存中创建一个Oracle实例(即在服务器内存中分配共享内存的后台内存),然后由这个oracle数据库实例来访问和控制磁盘中的数据文件。Oracle有一个很大的内存块,称为全局区(SGA)<br><a id="more"></a></p><h2 id="一、数据库、表空间、数据文件"><a href="#一、数据库、表空间、数据文件" class="headerlink" title="一、数据库、表空间、数据文件"></a>一、数据库、表空间、数据文件</h2><h3 id="1、数据库"><a href="#1、数据库" class="headerlink" title="1、数据库"></a>1、数据库</h3><p>数据库是数据集合,oracle是一种关系型的数据库管理系统。<br>通常情况下我们称的数据库,并不仅仅指的是物理的数据集合,他包含物理数据、数据管理系统。也即物理数据、内存、操作系统进程的组合体。<br>安装过oracle数据库就知道,我们在安装数据库时会让我们选择启动数据库(即默认的全局数据库):<br>全局数据库:就是一个数据库的标识,在安装时指定,以后一般不会修改.一旦安装,数据库名就写进了控制文件,数据库表,很多地方都会用到这个数据库名。<br>启动数据库:也叫全局数据库,是数据库系统的入口,它会内置一些高级权限的用户如SYS,SYSTEM等。我们用这些搞基权限账号登陆就可以在数据库实例中创建表空间，用户，表。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--查询当前数据库名</span></div><div class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> v$<span class="keyword">database</span></div></pre></td></tr></table></figure></p><h3 id="2、数据库实例"><a href="#2、数据库实例" class="headerlink" title="2、数据库实例"></a>2、数据库实例</h3><p>oracle官方描述:实例是访问Oracle数据库所需的一部分计算机内存和辅助处理后台进程,是由进程和这些进程所使用的内存(SGA)所构成的一个集合。<br>其实就是用来访问和使用数据库的一块进程,只存在于内存中。<br>我们访问oracle都是通过实例来访问到的,如果这个实例关联了数据库文件是可以访问的，否则就会得到实例名不可用的错误。<br>实例名指的是用于响应某个数据库操作的数据库管理系统的名称。同时也叫SID.实例名由参数instance_name决定的。<br>查询当前数据库实例名:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--查询数据库实例名</span></div><div class="line"><span class="keyword">select</span> instance_name <span class="keyword">from</span> v$<span class="keyword">instance</span>;</div></pre></td></tr></table></figure></p><p>数据库实例名(instance_name)用于对外部连接。在操作系统中要取得与数据库的联系,必须使用数据库实例名。比如我们做开发,要连接数据库,就得连接数据库实例名:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jdbc:oracle:thin:@localhost:1521:orcl（orcl就为数据库实例名）</div></pre></td></tr></table></figure></p><p>一个数据库可以有多个实例,在做数据库服务集群的时候可以用到。</p><h3 id="3、表空间"><a href="#3、表空间" class="headerlink" title="3、表空间"></a>3、表空间</h3><p>Oracle数据库是通过表空间来存储物理表的,一个数据库实例可以有多个表空间,表空间下可以有多个表。<br>表空间是数据库的逻辑划分,每个数据库至少有一个表空间(SYSTEM表空间)。为了便于管理和提供运行效率,可以使用一些附加表空间来划分用户和应用程序。例如:USER表空间提供一般用户使用，RBS表空间供回滚段使用。一个表空间只能是属于一个数据库。<br>创建表空间语法：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Create</span> <span class="keyword">TableSpace</span> 表空间名称  </div><div class="line"><span class="keyword">DataFile</span>          表空间数据文件路径  </div><div class="line"><span class="keyword">Size</span>              表空间初始大小  </div><div class="line"><span class="keyword">Autoextend</span> <span class="keyword">on</span></div></pre></td></tr></table></figure></p><p>如:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">tablespace</span> db_test  </div><div class="line"><span class="keyword">datafile</span> <span class="string">'D:\oracle\product\10.2.0\userdata\db_test.dbf'</span>  </div><div class="line"><span class="keyword">size</span> <span class="number">50</span>m  </div><div class="line"><span class="keyword">autoextend</span> <span class="keyword">on</span>;</div></pre></td></tr></table></figure></p><p>查看已经创建好的表空间:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> default_tablespace, temporary_tablespace, d.username  </div><div class="line"><span class="keyword">from</span> dba_users d</div></pre></td></tr></table></figure></p><h3 id="4、用户"><a href="#4、用户" class="headerlink" title="4、用户"></a>4、用户</h3><p>Oracle数据库建好之后，要想在数据库里建表,必须先为数据库建立用户,并未用户指定表空间(一般指定和表空间一样的名字)<br>创建新用户:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span>          用户名  </div><div class="line"><span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span>        密码  </div><div class="line"><span class="keyword">DEFAULT</span> <span class="keyword">TABLESPACE</span>   表空间(默认<span class="keyword">USERS</span>)  </div><div class="line"><span class="keyword">TEMPORARY</span> <span class="keyword">TABLESPACE</span> 临时表空间(默认TEMP)</div></pre></td></tr></table></figure></p><p>如:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> utest  </div><div class="line"><span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> utestpwd  </div><div class="line"><span class="keyword">DEFAULT</span> <span class="keyword">TABLESPACE</span> db_test  </div><div class="line"><span class="keyword">TEMPORARY</span> <span class="keyword">TABLESPACE</span> temp;</div></pre></td></tr></table></figure></p><p>有了用户,要想使用用户账号管理自己的表空间,还的授权:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">GRANT</span> <span class="keyword">CONNECT</span> <span class="keyword">TO</span> utest;</div><div class="line"><span class="keyword">GRANT</span> <span class="keyword">RESOURCE</span> <span class="keyword">TO</span> utest;</div><div class="line"><span class="keyword">GRANT</span> dba <span class="keyword">TO</span> utest;<span class="comment">--dba为最高权限，可以创建数据库，表等。</span></div></pre></td></tr></table></figure></p><p>查看数据库用户:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> dba_users;</div></pre></td></tr></table></figure></p><h3 id="5、表"><a href="#5、表" class="headerlink" title="5、表"></a>5、表</h3><p>有了数据库，表空间和用户，就可以用自定义的用户在自己的表空间创建表了。</p>]]></content>
      
      <categories>
          
          <category> work </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库实例 </tag>
            
            <tag> 表空间 </tag>
            
            <tag> 用户 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Shiro-Authentication(身份验证)</title>
      <link href="/2015/09/28/shiro-Authentication/"/>
      <content type="html"><![CDATA[<h2 id="Authentication"><a href="#Authentication" class="headerlink" title="Authentication"></a>Authentication</h2><p>Authentication是指身份验证的过程:即在应用中能证明他就是他本人.一般需要提供身份标识信息例如:ID,用户名/密码等.<br>在Shiro中,用户需要提供Principals和Credentials给Shiro,从而来验证用户的身份.<br><strong>Principals:</strong> 身份,即是Subject的标识属性,可以是任何东西,诸如用户名、邮箱等,唯一即可.一个主题可以有多个Principal,但是只有一个Primary principal一般是用户名/密码.<br><strong>Credentials:</strong> 证明/凭据,只有主体才知道的安全值,如密码/数字证书.<br>principal/credential配对最常见的就是用户名/密码.<br><a id="more"></a></p><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>在实际研究Shiro身份认证流程之前,先搭建一个架子,进行简单的验证.</p><h3 id="Maven构建"><a href="#Maven构建" class="headerlink" title="Maven构建"></a>Maven构建</h3><p>添加junit、common-logging以及shiro-core等依赖.<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</div><div class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lcore.shiro_01<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro_01<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-nop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure></p><h3 id="shiro配置文件ini方式-shiro-ini"><a href="#shiro配置文件ini方式-shiro-ini" class="headerlink" title="shiro配置文件ini方式(shiro.ini)"></a>shiro配置文件ini方式(shiro.ini)</h3><p>简洁起见,这里仅仅配置一个用户名/密码(principal/credential),其他使用shiro默认配置.<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[users]</div><div class="line">#用户名及其对应的密码</div><div class="line">L.Tao=LCore</div></pre></td></tr></table></figure></p><p>之后编写一个简单的测试用例,shiro最简单的身份认证demo就完成了,代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHello</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">// 1、通过ini文件获取securityManager工厂</span></div><div class="line">Factory&lt;SecurityManager&gt; factory = <span class="keyword">new</span> IniSecurityManagerFactory(</div><div class="line"><span class="string">"classpath:shiro.ini"</span>);</div><div class="line"><span class="comment">// 2、得到securityManager实例,绑定SecurityUtils</span></div><div class="line">SecurityManager manager = factory.getInstance();</div><div class="line">SecurityUtils.setSecurityManager(manager);</div><div class="line"><span class="comment">// 3、得到Subject及创建用户名/密码身份验证Token（即用户身份/凭证）</span></div><div class="line">Subject subject = SecurityUtils.getSubject();</div><div class="line">UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">"L.Tao"</span>, <span class="string">"LCore"</span>);</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"><span class="comment">// 4、登录，即身份验证,委托给securityManager</span></div><div class="line">subject.login(token);</div><div class="line">&#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</div><div class="line"><span class="comment">// 5、身份验证失败</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">Assert.assertEquals(<span class="keyword">true</span>, subject.isAuthenticated()); <span class="comment">// 断言用户已经登录</span></div><div class="line"><span class="comment">// 6、退出:任何现有的session会清空</span></div><div class="line">subject.logout();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>关于上述demo的执行过程,注释已经说得很明白了,需要提及的是,在调用subject.login()身份验证失败时,请捕获AuthenticationException或其子类,常见的如DisabledAccountException(禁用的账户)、LockedAccountException(锁定的账户)、UnknowAccountException(错误的账户)等,具体情况如下图:</p><p><center><img src="/img/shiroExceptionStructure.png" alt="ShiroExceptionStructure"></center></p><h2 id="身份认证流程"><a href="#身份认证流程" class="headerlink" title="身份认证流程"></a>身份认证流程</h2><p>demo中可以简单的了解Shiro的认证过程,接下来从shiro内部体系结构了解其认证流程:</p><p><center><img src="/img/shiroAuthentication.png" alt="ShiroAuthentication"></center><br><strong>流程如下:</strong></p><blockquote><p>  1、首先调用Subject.login()方法进行登录,内部会委托给SecurityManager,调用之前需要通过SecurityUtils,setSecurityManager()设置.<br>  2、SecurityManager委托给Authenticator进行身份验证,Authenticator才是真正的身份验证者,也可以扩展实现自己的Authenticator.<br>  3、Authenticator可能会委托给相应的AuthenticationStrategy进行多Realm身份验证,默认为ModularRealmAuthenticator会调用AuthenticationStrategy进行多Realm身份验证.<br>  4、Authenticator会把相应的token传入Realm,从Realm获取身份验证信息,可以配置多个Realm,将按照相应的顺序和策略进行访问,最后完成身份认证.</p></blockquote><p>阅读源码内部的的流程还是比较复杂的,大致的时序图如下:</p><p><center><img src="/img/sdShiroAuthentication.png" alt="SDShiroAuthentication"></center><br>上述只是一个大致的流程,实际情况复杂的多.</p><h2 id="Realm"><a href="#Realm" class="headerlink" title="Realm"></a>Realm</h2><p>Realm:安全数据源,用于获取安全数据(用户、角色、权限规则),shiro通过SecurityManager验证用户,必须通过Realm获取相应的用户进行比较以确定用户是否合法.同样也是通过Realm得到用户相应的角色/权限控制用户的访问权限.shiro默认提供的Realm如下图:</p><p><center><img src="/img/shiro-Realm.png" alt="shiro-realm"></center><br>上述图中可以知道的是,如果我们实现自定义的Realm一般继承AuthorizingRealm(授权)即可,因为其继承了AuthenticationgRealm和CachingRealm实现了身份验证和缓存.主要实现:</p><blockquote><p>  <strong>IniRealm:</strong> [users]部分指定其用户名/密码及其角色,[roles]部分指定其角色,权限信息.demo中就是使用的此方式.<br>  <strong>JdbcRealm:</strong> 通过SQL查询相应的信息,其相应的sql可以查阅源码查看,也可以通过api进行自定义SQL.</p></blockquote><p>仔细思考一下可以知道,在实际中我们一般不会使用shiro提供的Realm,前面也说了shiro不维护用户/权限,仅仅通过Realm进行注入.Shiro提供的Realm总归不够灵活,因此正如上述所说,一般我们通过继承AuthorizingRealm实现自定义的Realm(结合自身的dao层,获取安全数据).<br>接下来了解下Realm如何使用.</p><h3 id="单Realm配置"><a href="#单Realm配置" class="headerlink" title="单Realm配置"></a>单Realm配置</h3><p>1、 自定义Realm实现:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.shiro_01.realm;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationException;</div><div class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationInfo;</div><div class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationToken;</div><div class="line"><span class="keyword">import</span> org.apache.shiro.authc.IncorrectCredentialsException;</div><div class="line"><span class="keyword">import</span> org.apache.shiro.authc.SimpleAuthenticationInfo;</div><div class="line"><span class="keyword">import</span> org.apache.shiro.authc.UnknownAccountException;</div><div class="line"><span class="keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;</div><div class="line"><span class="keyword">import</span> org.apache.shiro.realm.Realm;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRealm1</span> <span class="keyword">implements</span> <span class="title">Realm</span></span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="string">"myreal1"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(AuthenticationToken token)</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> token <span class="keyword">instanceof</span> UsernamePasswordToken;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> AuthenticationInfo <span class="title">getAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span></span></div><div class="line"><span class="keyword">throws</span> AuthenticationException &#123;</div><div class="line">        String username = token.getPrincipal().toString();</div><div class="line">        String password = <span class="keyword">new</span> String((<span class="keyword">char</span>[])token.getCredentials());</div><div class="line">        System.out.println(<span class="string">"realm1"</span>);</div><div class="line"><span class="comment">//自己实现验证逻辑</span></div><div class="line">        <span class="keyword">if</span>(!username.equals(<span class="string">"L.Tao"</span>))&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnknownAccountException(<span class="string">"没有该用户"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(!password.equals(<span class="string">"LCore"</span>))&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IncorrectCredentialsException(<span class="string">"密码错误"</span>);</div><div class="line">        &#125;</div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(username+<span class="string">"1"</span>, password, getName());</div><div class="line">&#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>2、ini配置文件指定自定义的Realm<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#声明一个realm</div><div class="line">myRealm1=com.shiro_01.realm.MyRealm1</div><div class="line">#指定SecurityManager的realms实现</div><div class="line">securityManager.realms=$myRealm1</div></pre></td></tr></table></figure></p><p>通过$name来引入之前定义好的realm<br>3、测试代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCustomRealm</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">// 1、获取SecurityManager工厂，此处使用Ini配置文件初始化SecurityManager</span></div><div class="line">Factory&lt;org.apache.shiro.mgt.SecurityManager&gt; factory = <span class="keyword">new</span> IniSecurityManagerFactory(</div><div class="line"><span class="string">"classpath:shiro-realm.ini"</span>);</div><div class="line"><span class="comment">// 2、得到SecurityManager实例 并绑定给SecurityUtils</span></div><div class="line">org.apache.shiro.mgt.SecurityManager securityManager = factory</div><div class="line">.getInstance();</div><div class="line">SecurityUtils.setSecurityManager(securityManager);</div><div class="line"></div><div class="line"><span class="comment">// 3、得到Subject及创建用户名/密码身份验证Token（即用户身份/凭证）</span></div><div class="line">Subject subject = SecurityUtils.getSubject();</div><div class="line">UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">"L.Tao"</span>,</div><div class="line"><span class="string">"LCore"</span>);</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"><span class="comment">// 4、登录，即身份验证</span></div><div class="line">subject.login(token);</div><div class="line">&#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</div><div class="line"><span class="comment">// 5、身份验证失败</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line"></div><div class="line">Assert.assertEquals(<span class="keyword">true</span>, subject.isAuthenticated()); <span class="comment">// 断言用户已经登录</span></div><div class="line"><span class="comment">// 6、退出</span></div><div class="line">subject.logout();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="JDBC-Realm"><a href="#JDBC-Realm" class="headerlink" title="JDBC Realm"></a>JDBC Realm</h3><p>Shiro提供的JDBC Realm使用也是比较简单且较为灵活的,使用方法如下:<br>1、maven添加数据库驱动及druid连接池,参考上述pom.xml<br>2、建立测试数据库及数据表数据,建表:users、user_roles,roles_permissions,并且添加一个测试用户:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="comment">-- Table structure for roles_permissions</span></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`roles_permissions`</span>;</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`roles_permissions`</span> (</div><div class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> auto_increment,</div><div class="line">  <span class="string">`role_name`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">default</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`permission`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">default</span> <span class="literal">NULL</span>,</div><div class="line">  PRIMARY <span class="keyword">KEY</span>  (<span class="string">`id`</span>),</div><div class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`idx_roles_permissions`</span> (<span class="string">`role_name`</span>,<span class="string">`permission`</span>)</div><div class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</div><div class="line"></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="comment">-- Records of roles_permissions</span></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="comment">-- Table structure for users</span></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`users`</span>;</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`users`</span> (</div><div class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> auto_increment,</div><div class="line">  <span class="string">`username_`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">default</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`password_`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">default</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`password_salt`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">default</span> <span class="literal">NULL</span>,</div><div class="line">  PRIMARY <span class="keyword">KEY</span>  (<span class="string">`id`</span>),</div><div class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`idx_users_username`</span> (<span class="string">`username_`</span>)</div><div class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">2</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</div><div class="line"></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="comment">-- Records of users</span></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`users`</span> <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'L.Tao'</span>, <span class="string">'LCore'</span>, <span class="string">''</span>);</div><div class="line"></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="comment">-- Table structure for user_roles</span></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`user_roles`</span>;</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user_roles`</span> (</div><div class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> auto_increment,</div><div class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">default</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`role_name`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">default</span> <span class="literal">NULL</span>,</div><div class="line">  PRIMARY <span class="keyword">KEY</span>  (<span class="string">`id`</span>),</div><div class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`idx_user_roles`</span> (<span class="string">`username`</span>,<span class="string">`role_name`</span>)</div><div class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</div></pre></td></tr></table></figure></p><p>之前,也说过Shiro并不维护用户/权限,实际系统的表结构并不像上述的设计,只是shiro的jdbcRealm默认是上述的.不过没关系,我们可以通过相关的接口重新指定验证的SQL,后面会提及.<br>3、ini配置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">jdbcRealm=org.apache.shiro.realm.jdbc.JdbcRealm</div><div class="line">dataSource=com.alibaba.druid.pool.DruidDataSource</div><div class="line">dataSource.driverClassName=com.mysql.jdbc.Driver</div><div class="line">dataSource.url=jdbc:mysql://localhost:3306/shiro</div><div class="line">dataSource.username=root</div><div class="line">dataSource.password=root</div><div class="line">jdbcRealm.dataSource=$dataSource</div><div class="line">#权限认证sql,这里我修改了底层user表的两个字段,因此这里要自己重新指定sql,不然报错,默认的为:</div><div class="line">#select password from users where username = ?</div><div class="line">#同理,角色信息,权限信息也可以自己指定</div><div class="line">jdbcRealm.authenticationQuery=select password_ from users where username_ = ?</div><div class="line">securityManager.realms=$jdbcRealm</div></pre></td></tr></table></figure></p><blockquote><ol><li>变量名=全类名           会自动创建实例</li><li>变量名.属性=值          自动调用相应的setter方法进行赋值</li><li>$变量名                引用之前的一个对象实例</li></ol></blockquote><p>4、测试代码<br>测试代码和上面并无太大区别,主要是初始化SecurityManager使用的配置文件不同</p><h3 id="多Realm配置"><a href="#多Realm配置" class="headerlink" title="多Realm配置"></a>多Realm配置</h3><p>在进行多Realm配置之前,有必要了解下,shiro是如何进行验证的,在之前的shiro验证流程图中已经了解到Subject.login()会交由DefaultSecurityManager的Authenticator进行验证authenticate().<strong>Authenticator的职责是验证用户账号,是ShiroAPI中身份验证的核心入口点.</strong><br>跟踪源码,Authenticator还有一个ModularRealmAuthenticator实现,实际上是它委托给多个(也可以是单个)Realm进行验证,多个Realm的验证规则通过<strong>AuthenticationStrategy接口</strong>指定,阅读源码可知道,ModularRealmAuthenticator构造器默认指定的是AtleastOneSuccessfulStrategy(只要有一个Realm验证成功即可),且返回所有验证成功的认证信息.<br>具体来说Shiro默认提供的验证规则有如下几个:</p><blockquote><ol><li>FirstSuccessfulStrategy:只要有一个Realm验证成功即可,返回第一个Realm验证成功的信息,其余忽略.</li><li>AtLeastOneSuccessfulStrategy:只要有一个验证成功即可,返回所有验证成功的验证信息.</li><li>AllSuccessfulStrategy:所有Realm验证成功即可,返回所有验证成功的验证信息.</li></ol></blockquote><p>多Realm的配置也比较容易,ini配置如下:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">#authenticator</div><div class="line">authenticator=org.apache.shiro.authc.pam.ModularRealmAuthenticator</div><div class="line">securityManager.authenticator=$authenticator</div><div class="line">allSuccessfulStrategy=org.apache.shiro.authc.pam.AllSuccessfulStrategy</div><div class="line">securityManager.authenticator.authenticationStrategy=$allSuccessfulStrategy</div><div class="line">myRealm1=com.shiro_01.realm.MyRealm1</div><div class="line">myRealm2=com.shiro_01.realm.MyRealm2</div><div class="line">myRealm3=com.shiro_01.realm.MyRealm3</div><div class="line">securityManager.realms=$myRealm1,$myRealm3</div></pre></td></tr></table></figure></p><p>SecurityManager会按照realms指定的顺序进行验证,如果不指定,则会按照声明的顺序进行验证.如果显示指定顺序,声明了但是没有指定的会被忽略.上述3个自定义的Realm和之前并无太大区别,可以调整其验证规则,用于测试Shiro提供的3中验证策略.之后根据如下代码获取验证信息:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Subject subject = SecurityUtils.getSubject();</div><div class="line">PrincipalCollection principals = subject.getPrincipals();</div></pre></td></tr></table></figure></p><p>Shiro同样可以实现自定义的验证策略,比如我们实现一个OnlyOneAuthenticatorStrategy(只有一个验证通过才验证通过)<br>1、 实现OnlyOneAuthenticatorStrategy:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.shiro_01.strategy;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationException;</div><div class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationInfo;</div><div class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationToken;</div><div class="line"><span class="keyword">import</span> org.apache.shiro.authc.SimpleAuthenticationInfo;</div><div class="line"><span class="keyword">import</span> org.apache.shiro.authc.pam.AbstractAuthenticationStrategy;</div><div class="line"><span class="keyword">import</span> org.apache.shiro.realm.Realm;</div><div class="line"><span class="keyword">import</span> org.apache.shiro.util.CollectionUtils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Collection;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OnlyOneAuthenticatorStrategy</span> <span class="keyword">extends</span> <span class="title">AbstractAuthenticationStrategy</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">//所有Realm验证之前</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> AuthenticationInfo <span class="title">beforeAllAttempts</span><span class="params">(Collection&lt;? extends Realm&gt; realms, AuthenticationToken token)</span></span></div><div class="line"><span class="keyword">throws</span> AuthenticationException &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo();<span class="comment">//返回一个权限的认证信息</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//每个Realm验证之前</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> AuthenticationInfo <span class="title">beforeAttempt</span><span class="params">(Realm realm, AuthenticationToken token, AuthenticationInfo aggregate)</span></span></div><div class="line"><span class="keyword">throws</span> AuthenticationException &#123;</div><div class="line">        <span class="keyword">return</span> aggregate;<span class="comment">//返回之前合并的</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//每个Realm验证之后</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> AuthenticationInfo <span class="title">afterAttempt</span><span class="params">(Realm realm, AuthenticationToken token, </span></span></div><div class="line">AuthenticationInfo singleRealmInfo, AuthenticationInfo aggregateInfo, Throwable t) </div><div class="line"><span class="keyword">throws</span> AuthenticationException &#123;</div><div class="line">        AuthenticationInfo info;</div><div class="line">        <span class="keyword">if</span> (singleRealmInfo == <span class="keyword">null</span>) &#123;</div><div class="line">            info = aggregateInfo;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (aggregateInfo == <span class="keyword">null</span>) &#123;</div><div class="line">                info = singleRealmInfo;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                info = merge(singleRealmInfo, aggregateInfo);</div><div class="line">                <span class="keyword">if</span>(info.getPrincipals().getRealmNames().size() != <span class="number">1</span>) &#123;</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> AuthenticationException(<span class="string">"只能有一个验证通过"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">return</span> info;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//所有realm验证之后</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> AuthenticationInfo <span class="title">afterAllAttempts</span><span class="params">(AuthenticationToken token, AuthenticationInfo aggregate)</span></span></div><div class="line"><span class="keyword">throws</span> AuthenticationException &#123;</div><div class="line">        <span class="keyword">return</span> aggregate;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>根据策略,我们需要在每次验证之后,合并验证信息,只要验证信息不等于1(都没有通过/通过多于1次)即是验证失败.之后在ini配置文件中,手动指定验证策略即可<br>具体就不在测试了,到此,Shiro身份验证OVER了!</p>]]></content>
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shiro </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Shiro简介</title>
      <link href="/2015/09/18/shiro/"/>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Apache Shiro是apache的一个强大而灵活的开源安全框架,它干净利落的处理身份认证、授权、企业会话管理和加密.Shiro首要的目标是易于使用和理解,提供一个干净而直观的API,来简化开发人员在使用它们的应用程序安全上的努力.这也是Shiro可能并没有Spring Security使用的人却越来越多的因素之一吧.</p><p>Shiro不强制依赖其他第三方框架、容器、或者应用服务器,不仅可以应用在JavaSE环境,也可以用在JavaEE环境.</p><h2 id="Shiro-Features"><a href="#Shiro-Features" class="headerlink" title="Shiro Features"></a>Shiro Features</h2><p>Apache Shiro是一个拥有许多功能的综合性的程序安全框架,帮助我们完成:认证、授权，加密、会话管理、与web集成、缓存等功能.shiro提供的功能如下图:<br><a id="more"></a></p><p><center><img src="http://kiritor.github.io/img/shiro_features.png" alt="Shiro Features"></center><br>Shiro开发团队把身份验证、授权、会话管理、加密作为核心关注点–应用程序四大基石.</p><ul><li><strong>Authentication:</strong> 身份认证/登录,验证用户是不是具有相应的身份;</li><li><strong>Authorization:</strong> 访问控制,授权,即是权限验证,验证用户是否具有某项权限;</li><li><strong>Session Management:</strong>  会话管理,管理用户特定的会话,适用于JavaSE环境、Web环境;</li><li><strong>Cryptography:</strong>  通过加密算法保证数据安全性,同时易于使用;<br>Shiro同样提供了额外的功能来加强在不同环境所关注的方面;</li><li><strong>Web Support:</strong>  Web支持的API能够非常容易的集成到web环境中去;</li><li><strong>Caching:</strong>  缓存,提高查询效率;</li><li><strong>Concurrency:</strong>  并发特性,支持多线程应用;</li><li><strong>Testing:</strong>  提供测试支持;</li><li><strong>Run As:</strong>  允许一个用户假设为另一个用户的功能;</li><li><strong>Remember me:</strong>  记住我,十分常用的功能,登录之后,下次就不用登录了;<br><strong>Shiro提供了这么多的可插拔化的功能,使用时可以根据需要来选择,但是,Shiro不会去维护系统用户,更不会去维护系统的权限规则.针对不同系统,结合自身业务权限设计模型千差万别,Shiro不可能统一维护,也不会提供一套方案.因此对于权限仍然需要我们自行设计/提供,然后通过相应的接口注入给Shiro.</strong><h2 id="Shiro-Architecture"><a href="#Shiro-Architecture" class="headerlink" title="Shiro Architecture"></a>Shiro Architecture</h2>Shiro的架构主要有3个主要的概念:Subject，SecurityManager,Realms.<h3 id="High-Level-Overview"><a href="#High-Level-Overview" class="headerlink" title="High-Level Overview"></a>High-Level Overview</h3>下面的关系图是关于上面上个组件是如何交互的高级概述:<br><center><img src="http://kiritor.github.io/img/shiro_high.png" alt="shiro_high"></center><br>可以看到,直接交互对象是Subject,其每个对象的含义:<br><strong>Subject:</strong> 主体,代表了当前”用户”,这是一个抽象概念,代表了和应用交互的任何东西,所有的Subject都绑定到SecurityManager,与Subject的交互都委托给SecurityManager,SecurityManager是实际的执行者.<br><strong>SecurityManager:</strong> 安全管理器:即所有的与安全有关的操作都会与SecurityManager交互,他是Shiro架构的心脏,控制着所有的Subject协调内部的安全组件之间的交互.<br><strong>Realm:</strong> 域,shiro通过Realm获取安全数据(用户、角色、权限规则等),例如SecurityMananger要验证身份,需要从Realm得到用户的相应信息来确定用户信息是否合法.可以把Realm看做是安全数据源DataSource.从这个意义上来说,Realm本质上是一个特定安全的Dao,它封装了数据源的连接详细信息.shiro提供了立即可用的Realms来连接一些安全数据源(LDAP,数据库,文本配置源ini)<br>对于我们来说,一个Shiro应用:<blockquote><p>  1、应用代码通过Subject来进行认证和授权,Subject委托给SecurityManager;<br>  2、SecurityMananger通过Realm得到合法的用户及权限;</p></blockquote></li></ul><p>上面说到了Shiro不维护用户/权限,而是通过Realm让开发人员自己注入.</p><h3 id="Shiro-Architecture-1"><a href="#Shiro-Architecture-1" class="headerlink" title="Shiro Architecture"></a>Shiro Architecture</h3><p>下图展示的是Shiro内部详细的架构图:</p><p><center><img src="http://kiritor.github.io/img/shiro_detail.png" alt="shiro_detail"></center></p><ul><li><strong>Subject:*</strong> 主体,当前与软件进行交互的实体(用户,第三方服务)等.</li><li><strong>SecurityManager:</strong> SecurityManager是Shiro的心脏,协调其管理的组件,确保他们能够一起顺利的工作,执行每个Suject的安全操作.</li><li><strong>Athenticator:</strong> 认证器,负责主题认证,这是一个可扩展点,可以自定义实现;其需要认证策略(Authentication Strategy),及什么时候用户认证通过.</li><li><strong>Authrizer:</strong> 访问控制器,决定主体是否有权限进行相应的操作,控制用户能访问应用程序的哪些功能.</li><li><strong>Realm:</strong> 可以有一个或者多个实现, 安全数据源,用于获取安全实体;可以是JDBC实现,也可以是LDAP实现等.上面也说道了Shiro不维护用户/权限,因此我们一般应用中都需要实现自己的Realm;</li><li><strong>SessionManager:</strong> 管理用户session生命周期,shiro可以在任何环境下本地化管理用户的session,及时没有可用的Web/servlet容器,他将会使用内置的企业级会话管理来提供同样的编程体验.</li><li><strong>SessionDao:</strong> SessionDao完成session的持久化操作(CRUD),例如放入数据库中,memcached中;另外SessionDao中可以使用缓存,已提高性能.</li><li><strong>CacheManger:</strong> 缓存管理,管理用户,角色、权限等缓存,这类数据一般较少改变,使用缓存可以提升性能.</li><li><strong>Cryptography</strong> 加密模块,安全框架的自然补充,提供了一些常见的加密组件用于如密码的加密/解密.<br>到此为止,对于Shiro框架有了一个大致的了解,接下来也就是跟着资料文档,一步步去实践其各个组件功能了.这也是近期的目标.</li></ul>]]></content>
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shiro </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring MVC + Velocity实现国际化配置</title>
      <link href="/2015/09/11/SpringMVC-i18n/"/>
      <content type="html"><![CDATA[<p>web开发中,国际化是需要考虑的一个问题,而且这个问题一般是越早敲定越好(不然等到系统大了,翻译是个问题).下面是结合实际项目(Spring MVC+Velocity)对实现国际化的一些总结,项目地址:<a href="https://github.com/kiritor/hr" target="_blank" rel="external">https://github.com/kiritor/hr</a><br>需要说明的是,该项目使用的是基于Cookie的国际化配置,其他方式参考本文.</p><h2 id="Spring国际化"><a href="#Spring国际化" class="headerlink" title="Spring国际化"></a>Spring国际化</h2><p><b>I18N</b>:作为”国际化”的简称,其来源是英文单词internationalization的首末字符i和n,18为中间的字符数.<br><a id="more"></a><br>Spring做国际化的配置主要有3个关键点:</p><blockquote><ol><li>ResourceBundleMessageSource:实现国际化资源的定义.</li><li>LocaleResolver:实现本地化信息的解析.</li><li>LocaleChangeInterceptor:实现本地化信息的监听(来实现url参数动态指定locale).</li></ol></blockquote><p><b>LocaleResolver</b><br>LocaleResolver是指用什么策略来检测请求是哪一种locale,Spring MVC提供了一下几种策略:<br><b>AcceptHeaderLocaleResolver</b><br>根据浏览器Http Header中的accept-language域判定浏览器的语言环境,可以通过HttpServletRequest.getLocale获得域的内容,但是无法调用LocaleResolver接口的setLocale设置locale.基于这个策略,在后面的demo中可以实现基于浏览器的国际化案例.<br><b>SessionLocaleResolver</b><br>根据用户本次会话过程中的语言设定决定语言种类,session级别的,在此session周期内可以修改语言种类,但是session失效后,语言设定失效.基于这个策略,在后面的demo中可以实现基于session的国际化案例.<br><b>CookiedLocaleResolver</b><br>根据Cookie判定用于的语言设定(Cookie中保存着用户前一次的语言设定参数).<br><b>FixedLocaleResolver</b><br>一直使用固定的Locale,改变locale是不支持的.<br>如果需要使用哪一种策略,只需要在DispatcherServlet制定的Spring配置文件中配置就行,DispatchServlet将在初始化的时候调用initLocaleResolver(context)方法去配置文件中找名字为localeResolver的bean,如果有就使用配置文件的,没有就使用默认的AcceptHeaderLocaleResovler<br>通过上面,了解了Spring实现国际化的相关概念,下面结合demo实例,看看Spring MVC是如何实现国际化的.</p><h2 id="基于浏览器请求的国际化"><a href="#基于浏览器请求的国际化" class="headerlink" title="基于浏览器请求的国际化"></a>基于浏览器请求的国际化</h2><p>使用AcceptHeaderLocaleResolver策略实现基于浏览器语言的国际化。</p><ol><li><p>首先配置国际化的资源文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 国际化配置 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"messageSource"</span></span></div><div class="line"><span class="attr">class</span>=<span class="string">"org.springframework.context.support.ResourceBundleMessageSource"</span>&gt;</div><div class="line"><span class="comment">&lt;!-- 国际化信息资源文件所在的目录 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basename"</span> <span class="attr">value</span>=<span class="string">"i18n.messages"</span> /&gt;</span></div><div class="line"><span class="comment">&lt;!-- 找不到对应的代码信息,就用这个代码作为标识 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"useCodeAsDefaultMessage"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>定义国际化资源文件内容,后缀为.properties内容如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#中文</span></div><div class="line"><span class="comment">#header</span></div><div class="line">header.message=\u6D88\u606F  </div><div class="line">header.to-list=\u5F85\u529E\u4E8B\u5B9C</div><div class="line">header.language=\u8BED\u8A00</div><div class="line"></div><div class="line"><span class="comment">#英文</span></div><div class="line"><span class="comment">#header</span></div><div class="line">header.message=Message</div><div class="line">header.to-list=ToDo-List</div><div class="line">header.language=Language</div></pre></td></tr></table></figure></li><li><p>配置本地化信息解析策略,这里基于浏览器的为默认配置,因此可以不做配置</p></li><li><p>最后前端界面通过使用spring针对不同view视图提供的标记处理国际化信息.velocity标记</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#springMessage("header.message")</div></pre></td></tr></table></figure></li><li><p>运行测试<br><center><img src="http://kiritor.github.io/img/i18n_01.png" alt="中文环境"></center><br>可以看出当前浏览器语言顺序为中文优先,更改浏览器语言环境为英文优先,刷新页面:<br><center><img src="http://kiritor.github.io/img/i18n_02.png" alt="英文环境"></center><br>到此基于浏览器的国际化配置就完成了,由于是根据浏览器的语言环境来解析的,配置十分的简单.细心的读者可能发现一个问题,前端界面的国际化可以通过配置资源文件解决,那么后端的数据该如何国际化呢?如果只是一些简单的数据,也可以通过配置文件解决,只是压入的view的key-value中的key保持和资源文件一致,实际向view注入对象的时候使用如下方式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//从后台代码获取国际化信息</span></div><div class="line">RequestContext requestContext = <span class="keyword">new</span> RequestContext(request);</div><div class="line">model.addAttribute(<span class="string">"money"</span>, requestContext.getMessage(<span class="string">"money"</span>));</div><div class="line">model.addAttribute(<span class="string">"date"</span>, requestContext.getMessage(<span class="string">"date"</span>));</div></pre></td></tr></table></figure></li></ol><p>但是如果数据量过大,例如从数据库的来的数据考虑国际化问题又是另一个层面上的东西了(而且很少会考虑这块的内容,不会考虑用户的输入)</p><h2 id="基于Session的国际化实现"><a href="#基于Session的国际化实现" class="headerlink" title="基于Session的国际化实现"></a>基于Session的国际化实现</h2><p>基于Session的国际化配置比基于浏览器的略复杂,在其基础上,需要经过如下配置.</p><ol><li><p>配置本地化信息解析策略</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"localeResolver"</span></span></div><div class="line"><span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.i18n.SessionLocaleResolver"</span> /&gt;</div></pre></td></tr></table></figure></li><li><p>SpringMVC配置解析拦截器,我们需要手动切换系统的语言(session和cookie需要该项配置)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 国际化拦截器 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.i18n.LocaleChangeInterceptor"</span> /&gt;</span></div><div class="line"><span class="comment">&lt;!-- 登录拦截器 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.cisdi.ecis.pbs.interceptor.LoginInterceptor"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>提供一个controler方法,用于切换语言</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/lang"</span>)</div><div class="line"><span class="meta">@ResponseBody</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">lang</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</div><div class="line">    String langType = request.getParameter(<span class="string">"langType"</span>);</div><div class="line">    <span class="keyword">if</span> (langType.equals(<span class="string">"zh"</span>)) &#123;</div><div class="line">        Locale locale = <span class="keyword">new</span> Locale(<span class="string">"zh"</span>, <span class="string">"CN"</span>);</div><div class="line">        request.getSession().setAttribute(SessionLocaleResolver.LOCALE_SESSION_ATTRIBUTE_NAME, locale);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (langType.equals(<span class="string">"en"</span>)) &#123;</div><div class="line">        Locale locale = <span class="keyword">new</span> Locale(<span class="string">"en"</span>, <span class="string">"US"</span>);</div><div class="line">        request.getSession().setAttribute(SessionLocaleResolver.LOCALE_SESSION_ATTRIBUTE_NAME, locale);</div><div class="line">    &#125; <span class="keyword">else</span></div><div class="line">        request.getSession().setAttribute(SessionLocaleResolver.LOCALE_SESSION_ATTRIBUTE_NAME, LocaleContextHolder.getLocale());</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>前端和之前一样,运行测试<br><center><img src="http://kiritor.github.io/img/i18n_01.png" alt="中文环境"></center><br>可以看出当前浏览器语言顺序为中文优先,使用”切换语言”菜单手动切换系统语言为英文,之后刷新页面,界面还是为英文,当此session会话结束之后,刷新界面为中文.<br><center><img src="http://kiritor.github.io/img/i18n_02.png" alt="英文环境"></center><br>到此为止,基于session的国际化配置完结,基于session的国际化是相对基于浏览器语言来说是比较常用的一种方式.</p></li></ol><h2 id="基于Cookie的国际化实现"><a href="#基于Cookie的国际化实现" class="headerlink" title="基于Cookie的国际化实现"></a>基于Cookie的国际化实现</h2><p>大多数情况下国际化都是基于Cookie的,用户在设置完一次语言信息之后,之后自己没有修改,就算退出再登录,语言也是之前设定的.除非用户自己手动清空.这种就要通过Cookie来实现了.</p><ol><li><p>配置国际化资源文件(参考基于浏览器国际化配置)</p></li><li><p>配置本地化信息解析策略,这里将基于Session的该项配置替换为如下即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"localeResolver"</span></span></div><div class="line"><span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.i18n.CookieLocaleResolver"</span> /&gt;</div></pre></td></tr></table></figure></li><li><p>SpringMVC配置解析拦截器,我们需要手动切换系统的语言(session和cookie需要该项配置),参考基于session的配置即可</p></li><li><p>提供一个controler方法,用于切换语言</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/lang"</span>)</div><div class="line"><span class="meta">@ResponseBody</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">lang</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span> </span>&#123;</div><div class="line">        String langType = request.getParameter(<span class="string">"langType"</span>);</div><div class="line">        <span class="keyword">if</span> (langType.equals(<span class="string">"zh"</span>)) &#123;</div><div class="line">            Locale locale = <span class="keyword">new</span> Locale(<span class="string">"zh"</span>, <span class="string">"CN"</span>);</div><div class="line">            <span class="comment">//request.getSession().setAttribute(SessionLocaleResolver.LOCALE_SESSION_ATTRIBUTE_NAME, locale);</span></div><div class="line">            <span class="keyword">new</span> CookieLocaleResolver().setLocale(request, response, locale);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (langType.equals(<span class="string">"en"</span>)) &#123;</div><div class="line">            Locale locale = <span class="keyword">new</span> Locale(<span class="string">"en"</span>, <span class="string">"US"</span>);</div><div class="line">            <span class="comment">//request.getSession().setAttribute(SessionLocaleResolver.LOCALE_SESSION_ATTRIBUTE_NAME, locale);</span></div><div class="line">            <span class="keyword">new</span> CookieLocaleResolver().setLocale(request, response, locale);</div><div class="line">        &#125; <span class="keyword">else</span></div><div class="line">        <span class="keyword">new</span> CookieLocaleResolver().setLocale(request, response, LocaleContextHolder.getLocale());</div><div class="line">            <span class="comment">//request.getSession().setAttribute(SessionLocaleResolver.LOCALE_SESSION_ATTRIBUTE_NAME, LocaleContextHolder.getLocale());</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>运行测试<br><center><img src="http://kiritor.github.io/img/i18n_01.png" alt="中文环境"></center><br>可以看出当前浏览器语言顺序为中文优先,使用”切换语言”菜单手动切换系统语言为英文,之后刷新页面,界面还是为英文,当关闭此页面结束session会话,重新打开系统时界面仍为英文<br><center><img src="http://kiritor.github.io/img/i18n_02.png" alt="英文环境"></center><br>而且debug可以看见cookie如图:<br><center><img src="http://kiritor.github.io/img/cookie.png" alt="cooie"></center><br>这里需要多提及一点的是,关于基于cookie国际化的第二点,有3个属性可以配置:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"localeResolver"</span></span></div><div class="line"><span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.i18n.CookieLocaleResolver"</span>&gt;</div><div class="line"><span class="comment">&lt;!-- 设置cookieName名称，可以根据名称通过js来修改设置，默认的名称为 类名+.LOCALE如上图 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cookieName"</span> <span class="attr">value</span>=<span class="string">"lang"</span> /&gt;</span></div><div class="line"><span class="comment">&lt;!-- 设置最大有效时间，如果是-1，则不存储，浏览器关闭后即失效，默认为Integer.MAX_INT --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cookieMaxAge"</span> <span class="attr">value</span>=<span class="string">"100000"</span> /&gt;</span></div><div class="line"><span class="comment">&lt;!-- 设置cookie可见的地址，默认是“/”即对网站所有地址都是可见的，如果设为其它地址，则只有该地址或其后的地址才可见 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cookiePath"</span> <span class="attr">value</span>=<span class="string">"/"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure></li></ol><h2 id="基于ULR请求的国际化实现"><a href="#基于ULR请求的国际化实现" class="headerlink" title="基于ULR请求的国际化实现"></a>基于ULR请求的国际化实现</h2><p>这是一种比较有意思的情况,其实大多数时候不会有这种需求,类似一些常见的天气API,URL后面附带不同的语言的出的数据语种也不一样.不过天气API的实现方式可能有所不同.</p><ol><li><p>首先要扩展AcceptHeaderLocaleResolver类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lcore.hr.utils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Locale;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAcceptHeadersolver</span> <span class="keyword">extends</span> <span class="title">AcceptHeaderLocaleResolver</span></span>&#123;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</div><div class="line">        HttpSession session=request.getSession();</div><div class="line">        Locale locale=(Locale)session.getAttribute(<span class="string">"locale"</span>);</div><div class="line">        <span class="keyword">if</span> (locale==<span class="keyword">null</span>)&#123;</div><div class="line">            session.setAttribute(<span class="string">"locale"</span>,request.getLocale());</div><div class="line">            <span class="keyword">return</span> request.getLocale();</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">return</span> locale;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocale</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Locale locale)</span> </span>&#123;</div><div class="line">        request.getSession().setAttribute(<span class="string">"locale"</span>,locale);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>配置本地化信息解析器为我们自己自定义的解析器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"localeResolver"</span></span></div><div class="line"><span class="attr">class</span>=<span class="string">"com.lcore.hr.utils.MyAcceptHeadersolver"</span>&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>运行测试<br>输入地址:<a href="http://localhost:9999/hr/auth/user/listView?locale=zh_CH" target="_blank" rel="external">http://localhost:9999/hr/auth/user/listView?locale=zh_CH</a> 界面显示为中文<br><center><img src="http://kiritor.github.io/img/i18n_01.png" alt="中文环境"></center><br>输入地址:<a href="http://localhost:9999/hr/auth/user/listView?locale=en" target="_blank" rel="external">http://localhost:9999/hr/auth/user/listView?locale=en</a> 界面显示为英文<br><center><img src="http://kiritor.github.io/img/i18n_02.png" alt="英文"></center><br>OK,到此关于Spring MVC配合Velocity国际化配置也就到此为止了.<br>项目地址:<a href="https://github.com/kiritor/hr" target="_blank" rel="external">https://github.com/kiritor/hr</a><br>需要说明的是,该项目使用的是基于Cookie的国际化配置,其他方式参考本文</p></li></ol>]]></content>
      
      <categories>
          
          <category> work </category>
          
      </categories>
      
      
        <tags>
            
            <tag> i18n </tag>
            
            <tag> velocity </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Golang:go get现实显示进度(转)</title>
      <link href="/2015/07/13/goget-progressbar/"/>
      <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;golang在使用go get下载package时,有些package如果比较大的话,下载时间比较的久(会给我们造成卡死的情况),希望可以有一个下载进度。google一下,已经有人解决了,自己也尝试了下,发现没问题,果断转载过来了.</p><p>&nbsp;&nbsp;&nbsp;&nbsp;原文地址如下:<a href="http://www.leanote.com/blog/view/544ca9a824ab0a1dbd000000" target="_blank" rel="external">http://www.leanote.com/blog/view/544ca9a824ab0a1dbd000000</a><br><a id="more"></a><br>&nbsp;&nbsp;&nbsp;&nbsp;因为leanote在github.com上的包有点大, 所以 go get github.com/leanote/leanote/app 会很慢, 这个会执行几分钟或更长, 不知道的朋友还以为卡死了. 找了下 go get 没有一个选项可以输出进度的, 于是决定修改golang源码(别以为很有技术含量, 还不是go代码?).</p><p>&nbsp;&nbsp;&nbsp;&nbsp;看了下golang的源码 src/cmd/go 下是go命令的源码, 其中, get.go是go get命令的代码, build.go 是go build的代码.</p><p>&nbsp;&nbsp;&nbsp;&nbsp;刚开始走了点弯路, 想着改变get.go来显示进度, 无果之后想了下, go get 其实就是调用git , hg, svn的命令从仓库中下载的, 由此思路找到vcs.go(vcs全称为version control system), 果然这里面包含了调用git, hg, svn的命令. 问题迎刃而解:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">修改git <span class="built_in">clone</span>命令, 添加 --progress选项, 使其输出进度</div><div class="line">修改cmd.Run()执行的地方, 使其将输出定位到标准输出流上</div></pre></td></tr></table></figure><h2 id="1-修改git-clone命令"><a href="#1-修改git-clone命令" class="headerlink" title="1. 修改git clone命令"></a>1. 修改git clone命令</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;找到如下代码, 在createdCmd修改为 clone –progress {repo} {dir}.其它命令hg, svn…添加进度方法类似.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// vcsGit describes how to use Git.</span></div><div class="line"><span class="keyword">var</span> vcsGit = &amp;vcsCmd&#123;</div><div class="line">name: <span class="string">"Git"</span>,</div><div class="line">cmd:  <span class="string">"git"</span>,</div><div class="line"></div><div class="line">createCmd:   <span class="string">"clone &#123;repo&#125; &#123;dir&#125;"</span>, <span class="comment">// 此处修改为 clone --progress &#123;repo&#125; &#123;dir&#125;</span></div><div class="line">downloadCmd: <span class="string">"pull --ff-only"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="2-重定向输出流"><a href="#2-重定向输出流" class="headerlink" title="2. 重定向输出流"></a>2. 重定向输出流</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;找到run1()方法, 在 cmd.Stderr = &amp;buf 下添加两行, 如:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> buf bytes.Buffer</div><div class="line">cmd.Stdout = &amp;buf</div><div class="line">cmd.Stderr = &amp;buf</div><div class="line">cmd.Stdout = os.Stdout <span class="comment">// 重定向标准输出</span></div><div class="line">cmd.Stderr = os.Stderr <span class="comment">// 重定向标准输出</span></div><div class="line">err = cmd.Run()</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;Ok, 搞定, 接下来执行golang源码 src下的 all.bash 重新编译golang, 编译要些时间, 编译完后使用go get 试试:</p><p><a href="http://leanote.com/file/outputImage?fileId=544caf469bf7f1285400005a" target="_blank" rel="external">http://leanote.com/file/outputImage?fileId=544caf469bf7f1285400005a</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;看到进度条就不用担心了吧.</p><p>&nbsp;&nbsp;&nbsp;&nbsp;之前修改golang源码使其关闭变量未使用, 包未使用的错误 : </p><p><a href="http://leanote.com/blog/view/53118d331a9108428c000001" target="_blank" rel="external">关闭golang的 variable declared but not used 和 package imported but not used</a></p><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;linxu、mac下执行all.bash重新编译golang,windows下执行all.bat貌似有问题,可以执行run.bat即可.下面是我使用go get的情况:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Cloning into <span class="string">'/Users/lcore/dev/code/go/src/github.com/kiritor/ini'</span>...</div><div class="line">remote: Counting objects: 36, done.</div><div class="line">remote: Total 36 (delta 0), reused 0 (delta 0), pack-reused 35</div><div class="line">Unpacking objects: 100% (36/36), done.</div><div class="line">Checking connectivity... <span class="keyword">done</span></div><div class="line">b577c9a266676ad31bd94824e2b1a80052f4f33a refs/heads/master</div><div class="line">b577c9a266676ad31bd94824e2b1a80052f4f33a refs/remotes/origin/HEAD</div><div class="line">b577c9a266676ad31bd94824e2b1a80052f4f33a refs/remotes/origin/master</div><div class="line">Already on <span class="string">'master'</span></div></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> go get </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Oracle导出、导入、备份</title>
      <link href="/2015/06/18/Oracle%E5%AF%BC%E5%87%BA%E3%80%81%E5%AF%BC%E5%85%A5%E3%80%81%E5%A4%87%E4%BB%BD/"/>
      <content type="html"><![CDATA[<h2 id="Oracle数据库导入、导出imp-exp"><a href="#Oracle数据库导入、导出imp-exp" class="headerlink" title="Oracle数据库导入、导出imp/exp"></a>Oracle数据库导入、导出imp/exp</h2><p>&#160; &#160; &#160; &#160;imp/exp命令可以实现oracle数据库的还原、备份、迁移.<br>&#160; &#160; &#160; &#160;实际的开发中,由于测试和开发”并行”,会有开发库、测试库的数据迁移,切换,以及数据库升级等。这些操作都伴随着数据库的导入、导出操作.对于Oracle通过导出、导入来进行数据库的迁移(逻辑)是非常方便的,只要安装了oracle客户端,并建立了连接(通过Net configuration Assistant添加正确的服务命名),你就可以把远端的数据库导出到本地,同样你也可以把dmp文件从本地导入到远端数据库服务器中.利用这个功能,可以构建两个相同的数据库:开发库、测试库,并且快速的实现两个库之间数据的迁移.<br><a id="more"></a></p><h2 id="执行环境"><a href="#执行环境" class="headerlink" title="执行环境"></a>执行环境</h2><p>&#160; &#160; &#160;可以在SQLPLUS或者直接在CMD命令行中执行.<br>&#160; &#160; &#160;Tips:在sqlplus环境下执行时需要在前面加’!’号:SQL&gt;!exp …SQL&gt;!imp</p><h2 id="exp导出命令"><a href="#exp导出命令" class="headerlink" title="exp导出命令"></a>exp导出命令</h2><p>&#160; &#160; &#160;exp命令有三种模式(FULL:完全、OWNER:用户、TABLES:表)</p><h3 id="FULL-完全模式"><a href="#FULL-完全模式" class="headerlink" title="FULL:完全模式"></a>FULL:完全模式</h3><p>&#160; &#160; &#160;完全模式表示导出整个数据库,必须具备特殊的权限.一个实际的例子:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">   //导出整个数据库</div><div class="line">exp demo/demo@demo file=F:\demo.dmp full=y</div></pre></td></tr></table></figure></p><p><center><img src="http://kiritor.github.io/img/exp.png" alt="exp"></center></p><h3 id="OWNER-用户模式"><a href="#OWNER-用户模式" class="headerlink" title="OWNER:用户模式"></a>OWNER:用户模式</h3><p>&#160; &#160; &#160;用户模式表示导出某个用户下的所有对象及数据(基表、视图、存储过程等).一个例子:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">   //导出ecisdemo用户下的所有对象</div><div class="line">exp demo/demo@demo owner=user1 file=F:\user1.dmp</div></pre></td></tr></table></figure></p><p>&#160; &#160; &#160;当然,也可以同时导出多个用户的数据,一个例子:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//导出user1、user2用户下的对象</div><div class="line">exp demo/demo@demo file=F:\user.dmp owner(user1,user2)</div></pre></td></tr></table></figure></p><h3 id="TABLES-表模式"><a href="#TABLES-表模式" class="headerlink" title="TABLES:表模式"></a>TABLES:表模式</h3><p>&#160; &#160; &#160;表模式处于用户模式级别下的,用法也比较的灵活,一些例子:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//导出某个用户下的表table1、table2</div><div class="line">exp demo/demo@demo owner=user1 tables(table1,table2) file=F:\user1.dmp </div><div class="line">//数据过滤</div><div class="line">//导出数据库中标table1中的字段name已"LCore"开头的数据导出</div><div class="line">exp demo/demo@demo owner=user1 tables(table1) query=\"where name like'LCore%'\" file=F:\user1.dmp</div></pre></td></tr></table></figure></p><h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><p>&#160; &#160; &#160;也可以对导出的数据进行压缩,在上面的命令加上compress=y即可</p><h2 id="imp导入命令"><a href="#imp导入命令" class="headerlink" title="imp导入命令"></a>imp导入命令</h2><p>&#160; &#160; &#160;与exp命令相对的,imp也有三种模式:</p><h3 id="FULL-完全模式-1"><a href="#FULL-完全模式-1" class="headerlink" title="FULL:完全模式"></a>FULL:完全模式</h3><p>&#160; &#160; &#160;完全模式下的命令也比较简单,例子:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">imp demo/demo@demo file=F:\demo.dmp full=y</div></pre></td></tr></table></figure></p><h3 id="OWNER-用户模式-1"><a href="#OWNER-用户模式-1" class="headerlink" title="OWNER:用户模式"></a>OWNER:用户模式</h3><p>&#160; &#160; &#160;imp的用户模式导入必须指定FROMUSER:源用户,TOUSER:目标用户这样才能导入数据,一个例子:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">将用户fuser的对象导入到用户tuser</div><div class="line">imp demo/demo@demo fromuser=fuser touser=tuser file=F:\demo.dmp</div></pre></td></tr></table></figure></p><p>&#160; &#160; &#160;Tips:需要注意的是如果是相同用户的话,就没有必要指定FROMUSER和TOUSER参数了.</p><h3 id="TABLES-表模式-1"><a href="#TABLES-表模式-1" class="headerlink" title="TABLES:表模式"></a>TABLES:表模式</h3><p>&#160; &#160; &#160;表模式的导入也比较简单,一个例子:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//表table1导入</div><div class="line">imp demo/demo@demo tables=(table1) file=F:\demo.dmp</div></pre></td></tr></table></figure></p><p><center><img src="http://kiritor.github.io/img/imp.png" alt="imp"></center><br>&#160; &#160; &#160;通过上面的例子及命令,实际导入、导出已经够了.</p><h3 id="忽略错误"><a href="#忽略错误" class="headerlink" title="忽略错误"></a>忽略错误</h3><p>&#160; &#160; &#160;在导入的过程中可能存在一些错误,例如已经存在该表了,可以使用ignore=y来忽略创建错误.</p><h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><p>&#160; &#160; &#160;有时候,需要对导入、导出操作做日志,也很简单,可以使用log=fileName即可.</p><h2 id="谈谈备份"><a href="#谈谈备份" class="headerlink" title="谈谈备份"></a>谈谈备份</h2><p>&#160; &#160; &#160;Oracle数据库有两种备份方式:物理备份、逻辑备份.<br>&#160; &#160; &#160;<b>物理备份</b>:实现数据库的完整恢复,但是数据库必须运行在归档模式下(业务数据库在非归档模式下运行),且需要极大的外部存储设备.<br>&#160; &#160; &#160;<b>逻辑备份</b>:不需要数据库运行在归档模式下,不但备份简单,而且可以不需要外部存储设备.一般使用此种备份方式.<br>&#160; &#160; &#160;imp、exp命令即是实现逻辑备份的命令,根据imp、exp命令的不同模式,逻辑备份相应的分为完全备份、用户备份、表备份.</p>]]></content>
      
      <categories>
          
          <category> work </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oracle </tag>
            
            <tag> imp </tag>
            
            <tag> exp </tag>
            
            <tag> 备份 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Golang工程管理</title>
      <link href="/2015/06/05/GolangPrjManager/"/>
      <content type="html"><![CDATA[<h1 id="Go工程管理"><a href="#Go工程管理" class="headerlink" title="Go工程管理"></a>Go工程管理</h1><p>&#160; &#160; &#160; &#160;接触Go也有一段时间了,也写了一些零星的代码,零星的代码无法像工程一样管理起来让我有一种挫败感.而且实际的开发中,也不可能只有一个单一的源文件,逐步编译无意于一场灾难.因此有必要学习一下Go是如何来管理工程的了.<br>&#160; &#160; &#160; &#160;Go工程管理的一个亮点在于消除了工程文件的感念,完全用目录结构和包名来推导工程结构和构建顺序.Go自身提供了良好的工程化管理,几乎不依赖于IDE.</p><h1 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h1><p>&#160; &#160; &#160; &#160;在详细实践GO的工程管理之前,先理解下相关概念,这有助于我们理解Go的工程管理:<span class="color">安装路径</span>、<span class="color">官方包路径</span>、<span class="color">项目路径</span><br><a id="more"></a><br>&#160; &#160; &#160; &#160;Go中只有两个路径:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">   GOROOT:<span class="keyword">go</span>安装路径,官方包路径根据这个设置自动匹配</div><div class="line">GOPATH:工作路径</div></pre></td></tr></table></figure></p><p>&#160; &#160; &#160; &#160;<span class="color">Tips:</span>Go中是没有项目路径这个概念的,只有包.可执行包只是特殊的一种,即是我们常说的项目,GOPATH可以设置多个(不建议).不管是可执行包还是非可执行包,都应该置于$GOPATH/src下.<br>&#160; &#160; &#160; &#160;对于$GOBIN,在之后实践的时候再细说.</p><h1 id="Go项目目录"><a href="#Go项目目录" class="headerlink" title="Go项目目录"></a>Go项目目录</h1><p>&#160; &#160; &#160; &#160;Go官网中有过介绍,Go项目的目录结构一般包含以下几个:</p><ul><li><strong>src:包含项目的源文件</strong></li><li><strong>pkg:包含编译后生成的包/库文件</strong></li><li><strong>bin:包含编译后生成的可执行文件</strong><br>&#160; &#160; &#160; &#160;下面,一步步来看Go是如何进行工程目录的组织管理的,不过在此之前,我们要先配置好环境变量,以及工程目录结构,这里我的工程目录结构是:(GOPATH=E:\code\GoProject)<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">   bin</div><div class="line">  ...</div><div class="line">pkg</div><div class="line">  ...</div><div class="line">src</div><div class="line">  ...</div></pre></td></tr></table></figure></li></ul><h1 id="第一个执行程序-包-、项目"><a href="#第一个执行程序-包-、项目" class="headerlink" title="第一个执行程序(包)、项目"></a>第一个执行程序(包)、项目</h1><p>&#160; &#160; &#160; &#160;前面已经说了,Go的可执行package就项目与项目.建一个可执行包hello(项目),其中包含一个源文件hello.go,目录结构如下:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">   bin</div><div class="line">   ...</div><div class="line">pkg</div><div class="line">   ...</div><div class="line">   src</div><div class="line">   hello</div><div class="line">  |-hello.<span class="keyword">go</span></div></pre></td></tr></table></figure></p><p>&#160; &#160; &#160; &#160;代码如下:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">fmt.Println(<span class="string">"hello"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="go-build"><a href="#go-build" class="headerlink" title="go build"></a>go build</h2><p>&#160; &#160; &#160; &#160;使用go build,你会发现并没有按照期待的,生成在bin目录下:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">   <span class="keyword">go</span> build src/hello                        生成在根目录下</div><div class="line">cd src/hello  <span class="keyword">go</span> build hello.<span class="keyword">go</span>           生成在子包目录下</div></pre></td></tr></table></figure></p><p>&#160; &#160; &#160; &#160;正确的做法是使用go install命令:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">go</span> install hello</div></pre></td></tr></table></figure></p><p>&#160; &#160; &#160; &#160;之后的目录结构:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">   bin</div><div class="line">   |-hello.<span class="keyword">go</span>      <span class="comment">//bin中生成执行程序</span></div><div class="line">pkg</div><div class="line">   ...</div><div class="line">   src</div><div class="line">   hello</div><div class="line">  |-hello.<span class="keyword">go</span></div></pre></td></tr></table></figure></p><p>&#160; &#160; &#160; &#160;<span class="color">Tips:</span>需要注意的是如果设置了环境变量GOBIN,hello程序将被安装到GOBIN目录</p><h1 id="第一个程序库-library"><a href="#第一个程序库-library" class="headerlink" title="第一个程序库(library)"></a>第一个程序库(library)</h1><p>&#160; &#160; &#160; &#160;上面讲了一个可执行包(项目)的管理,接下来看看一个非可执行包(lib库)的管理.首先创建一个库utils,目录结构如下:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">   bin</div><div class="line">   |-hello.exe      <span class="comment">//bin中生成执行程序</span></div><div class="line">pkg</div><div class="line">   ...</div><div class="line">   src</div><div class="line">   hello</div><div class="line">  |-hello.<span class="keyword">go</span></div><div class="line">utils</div><div class="line">  |-utils.<span class="keyword">go</span></div></pre></td></tr></table></figure></p><p>&#160; &#160; &#160; &#160;代码如下:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> utils</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">System</span><span class="params">(str <span class="keyword">string</span>)</span></span> &#123;</div><div class="line">fmt.Println(str)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&#160; &#160; &#160; &#160;同样的,我们使用go install命令进行编译,之后的目录结构如下:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">   bin</div><div class="line">   |-hello.exe      <span class="comment">//bin中生成执行程序</span></div><div class="line">pkg</div><div class="line">   |-windows-amd64</div><div class="line">  |-utils.a</div><div class="line">   src</div><div class="line">   hello</div><div class="line">  |-hello.<span class="keyword">go</span></div><div class="line">utils</div><div class="line">  |-utils.<span class="keyword">go</span></div></pre></td></tr></table></figure></p><p>&#160; &#160; &#160; &#160;在其它包使用它也很简单,一个例子:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"utils"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">utils.System(<span class="string">"hello"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&#160; &#160; &#160; &#160;上面提及了go build、go install,两者有什么区别呢?</p><ul><li><strong>go build:编译包,如果是main包则在当前目录下生成可执行文件,其他包不产生.a文件;</strong></li><li><strong>go install:编译包,同时复制结果到$GOPATH/bin,$GOPATH.pkg等对应的目录下;</strong></li><li><strong>go run gofiles编译列出的文件,并生成可执行文件然后执行,只能作用于main包,否则会出现go run:cannot run non-main pakcage的错误.</strong><br>&#160; &#160; &#160; &#160;此外应该知道的是,go run是不需要设置$GOPATH的,但go build、go install必须设置,所以go run常用来测试一些功能,这些代码一般不包含在最终的项目中(生产环境中)<h1 id="自动化文档"><a href="#自动化文档" class="headerlink" title="自动化文档"></a>自动化文档</h1>&#160; &#160; &#160; &#160;Go的注释可以自动转换成文档.只需要将注释写在package、func之前,中间不能有空格,简单的例子:<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//utils工具包</span></div><div class="line"><span class="keyword">package</span> utils</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">//输出字符串到控制台</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">System</span><span class="params">(str <span class="keyword">string</span>)</span></span> &#123;</div><div class="line">fmt.Println(str)</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p>&#160; &#160; &#160; &#160;在代码中这样写入注释之后,就可以使用godoc utils查看文档了:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">PACKAGE DOCUMENTATION</div><div class="line"></div><div class="line">package utils</div><div class="line">import <span class="string">"utils"</span></div><div class="line"></div><div class="line">utils工具包</div><div class="line"></div><div class="line">FUNCTIONS</div><div class="line"></div><div class="line">func System(str string)</div><div class="line">输出字符串到控制台</div></pre></td></tr></table></figure></p><h1 id="测试框架"><a href="#测试框架" class="headerlink" title="测试框架"></a>测试框架</h1><p>&#160; &#160; &#160; &#160;Go本身是支持测试的,测试源码的命名必须采用如下格式,建议以文件未单位,对应的测试文件未fileName_test.go<br>&#160; &#160; &#160; &#160;测试源码必须包含testing,测试函数必须按照”TestFuncName”的方式命名,一个简单的测试例子.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> utils</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"testing"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSystem</span><span class="params">(t *testing.T)</span></span> &#123;</div><div class="line"><span class="comment">//</span></div><div class="line">System(<span class="string">"test"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&#160; &#160; &#160; &#160;之后运行如下命令进行测试:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">go</span> test uitls   <span class="comment">//测试指定包的测试程序</span></div><div class="line"><span class="keyword">go</span> test         <span class="comment">//执行所有测试程序</span></div></pre></td></tr></table></figure></p><p>&#160; &#160; &#160; &#160;测试结果像这样:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">E:\code\GoProject&gt;go <span class="built_in">test</span> utils</div><div class="line">ok      utils   0.111s</div></pre></td></tr></table></figure></p><h1 id="Benchmark"><a href="#Benchmark" class="headerlink" title="Benchmark"></a>Benchmark</h1><p>&#160; &#160; &#160; &#160;Benchmark是测试框架的一部分,用于函数的运行效率相关信息.<br>&#160; &#160; &#160; &#160;以刚才的例子为例,首先在uitls中添加如下函数:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Add</span><span class="params">(var1,var2 <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</div><div class="line"><span class="keyword">return</span> var1+var2</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&#160; &#160; &#160; &#160;之后在测试文件中添加Benchmark测试代码:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkMulti</span><span class="params">(b *testing.B)</span></span> &#123;</div><div class="line"><span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;b.N;i++ &#123;</div><div class="line">   Add(<span class="number">1</span>,<span class="number">2</span>)</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&#160; &#160; &#160; &#160;执行test,并执行Benchmark:go test utils -bench=BenchmarkMulti ,执行结果如下:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">E:\code\GoProject&gt;<span class="keyword">go</span> test utils -bench=BenchmarkMulti</div><div class="line">test</div><div class="line">PASS</div><div class="line">BenchmarkMulti  <span class="number">2000000000</span>               <span class="number">1.56</span> ns/op</div><div class="line">ok      utils   <span class="number">3.390s</span></div></pre></td></tr></table></figure></p><p>&#160; &#160; &#160; &#160;Tips:如果测试没有通过,Benchmark也不会执行,不过我们可以通过如下命令跳过test,直接执行Benchmark:go test uitls -run=XXX -bench=BenchmarkMulti,执行结果如下:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">E:\code\GoProject&gt;<span class="keyword">go</span> test utils -run=XXX -bench=BenchmarkMulti</div><div class="line">PASS            <span class="comment">//test直接被pass掉了</span></div><div class="line">BenchmarkMulti  <span class="number">2000000000</span>               <span class="number">1.85</span> ns/op</div><div class="line">ok      utils   <span class="number">3.986s</span></div></pre></td></tr></table></figure></p><h1 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h1><ol><li>做好GO工程的管理(包的管理),不然杂乱无章的代码,会有深深的挫败感.</li><li>建议使用一个$GOPATH,一个项目一个$GOPATH并不可取,包无法很好的管理起来.</li><li>尽量使用go install,而不是go build,这样能够规范项目的整体结构(不会造成编译生成的可执行文件到处乱跑)go install作用于包级别<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1>&#160; &#160; &#160; &#160;Go工程管理的时候,稍有不慎就会出现错误,下面是一些比较常见的错误.<h2 id="一个文件夹下面包含多个不同包的源文件"><a href="#一个文件夹下面包含多个不同包的源文件" class="headerlink" title="一个文件夹下面包含多个不同包的源文件"></a>一个文件夹下面包含多个不同包的源文件</h2>&#160; &#160; &#160; &#160;这种情况下执行go install或者go build ,go run 都会错误:<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">can<span class="string">'t load package: package myfunc: found packages myfunc (a.go) and main (b.go)</span></div></pre></td></tr></table></figure></li></ol><p>&#160; &#160; &#160; &#160;<span class="color"><b>每个子目录只能存在一个pakcage,否则会报错.但是可以存在多个源文件,(属于同一package)</b></span></p><h2 id="一个项目不能包含多个main-函数"><a href="#一个项目不能包含多个main-函数" class="headerlink" title="一个项目不能包含多个main()函数"></a>一个项目不能包含多个main()函数</h2><p>&#160; &#160; &#160; &#160;实际上编译是没有问题的,但是这并不是一种正确的做法,一个项目只能有一个入口函数.</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>&#160; &#160; &#160; &#160;<a href="http://dave.cheney.net/2013/06/30/how-to-write-benchmarks-in-go" target="_blank" rel="external">how-to-write-benchmarks-in-go</a><br>&#160; &#160; &#160; &#160;<a href="https://groups.google.com/forum/?fromgroups=#!searchin/golang-nuts/why$20use$20go$20install/golang-nuts/qysy2bM_o1I/khIRe3AJ_wEJ" target="_blank" rel="external">Running multi-file main package</a></p>]]></content>
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> 工程管理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Go语言数组&amp;数组切片整理</title>
      <link href="/2015/06/04/GolangArraySlice/"/>
      <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>&#160; &#160; &#160; &#160;<strong><span class="color">数组</span></strong>是编程语言中最常用的功能之一,顾名思义,数组就是指一系列同一类型数据的集合.数组是很有价值的数据结构,因为它的内存分配是连续的,意味着迭代和移动非常迅速.数组看起来是比较简单的,但是一个数组的设计核心的几个问题需要解决,如::</p><p>&#160; &#160; &#160; &#160;<em> <strong>固定大小或可变大小?</strong><br>&#160; &#160; &#160; &#160;</em> <strong>是类型的一部分?</strong><br>&#160; &#160; &#160; &#160;<em> <strong>多维数组的模型?</strong><br>&#160; &#160; &#160; &#160;</em> <strong>空数组的意义</strong><br>&#160; &#160; &#160; &#160;<em> <em>*…</em></em></p><p>&#160; &#160; &#160; &#160;这些问题的解决影响着数组仅仅是语言的一个功能还是其设计的核心部分.<br><a id="more"></a></p><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>&#160; &#160; &#160; &#160;数组是Go语言非常重要的数据结构(<strong><span class="color">slice</span></strong>、<strong><span class="color">map</span></strong>的底层结构都是基于数组的),长度固定且是值类型:赋值或函数参数调用都将产生一次复制.</p><h2 id="数组声明和初始化"><a href="#数组声明和初始化" class="headerlink" title="数组声明和初始化"></a>数组声明和初始化</h2><p>&#160; &#160; &#160; &#160;数组有如下几种创建方式:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">//声明一个长度为10的int类型的数组</span></div><div class="line"><span class="keyword">var</span> array0 [<span class="number">10</span>]<span class="keyword">int</span>   </div><div class="line"><span class="comment">//声明并初始化</span></div><div class="line"><span class="keyword">var</span> array1 [<span class="number">5</span>]<span class="keyword">int</span> = [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</div><div class="line"><span class="comment">//声明并未索引(0开始)为1和4位置指定元素初始化</span></div><div class="line"><span class="comment">//剩余位置为0</span></div><div class="line"><span class="keyword">var</span> array2 [<span class="number">5</span>]<span class="keyword">int</span> = [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>:<span class="number">1</span>,<span class="number">4</span>:<span class="number">5</span>&#125;</div><div class="line"><span class="comment">//声明并初始化</span></div><div class="line">    array3 :=[<span class="number">5</span>]<span class="keyword">int</span>&#123;&#125;</div><div class="line"><span class="comment">//go编译器推导数组长度2</span></div><div class="line">    array4 :=[...]&#123;<span class="number">1</span>,<span class="number">2</span>&#125;</div><div class="line"><span class="comment">//二维数组</span></div><div class="line"><span class="keyword">var</span> array5 [<span class="number">2</span>][<span class="number">2</span>]<span class="keyword">int</span></div></pre></td></tr></table></figure></p><p>&#160; &#160; &#160; &#160;一旦数组被声明了,那么他的数据类型和长度就不能在改变了,如果你需要更多的元素,请创建一个新的数组,然后把原有数组的数据拷贝进去.</p><p>&#160; &#160; &#160; &#160;Go语言中任何变量被声明时,都会被默认初始化为<strong>各自类型的0值</strong>,数组也是一样的,当一个数组被声明时,它里面的每个元素都会被初始化为0值.</p><h2 id="数组的容量和长度"><a href="#数组的容量和长度" class="headerlink" title="数组的容量和长度"></a>数组的容量和长度</h2><p>&#160; &#160; &#160; &#160;数组的容量和长度是一样的,cap()和len()输出的值一样.</p><h2 id="数组的使用"><a href="#数组的使用" class="headerlink" title="数组的使用"></a>数组的使用</h2><p>&#160; &#160; &#160; &#160;使用[]操作符来访问数组元素:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">   array :=[<span class="number">2</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>&#125;</div><div class="line">array[<span class="number">1</span>] = <span class="number">1</span></div></pre></td></tr></table></figure></p><p>&#160; &#160; &#160; &#160;Go语言中数组是一个<strong>值类型</strong>,所以可以用它来进行赋值操作.一个数组可以被赋值给任意相同类型的数组:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">   <span class="keyword">var</span> array [<span class="number">5</span>]<span class="keyword">int</span></div><div class="line">array1 := [<span class="number">5</span>]<span class="keyword">int</span>&#123;&#125;</div><div class="line">array = array1</div></pre></td></tr></table></figure></p><p>&#160; &#160; &#160; &#160;<strong>Tips:</strong>需要注意的是数组的类型同时包括数组的长度和元素类型,<b>数组类型必须完全相同才能相互赋值</b>,下面的操作是错误的.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">   <span class="keyword">var</span> array [<span class="number">10</span>]<span class="keyword">int</span></div><div class="line">array1 := [<span class="number">5</span>]<span class="keyword">int</span>&#123;&#125;</div><div class="line">array = array1</div></pre></td></tr></table></figure></p><p>&#160; &#160; &#160; &#160;关于上面这一点,《GO语言编程》示例代码也有这一处错误.<br>&#160; &#160; &#160; &#160;数组是值类型,因此数组可以直接通过<b>==</b>,<b>!=</b>判断,示例如下:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> array [<span class="number">10</span>]<span class="keyword">int</span> = [<span class="number">10</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;</div><div class="line"><span class="keyword">var</span> array1 [<span class="number">10</span>]<span class="keyword">int</span> = [<span class="number">10</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;</div><div class="line">flag :=array1==array</div><div class="line">fmt.Println(flag)  <span class="comment">//true</span></div></pre></td></tr></table></figure></p><h2 id="函数中使用数组"><a href="#函数中使用数组" class="headerlink" title="函数中使用数组"></a>函数中使用数组</h2><p>&#160; &#160; &#160; &#160;考虑到这一点:GO语言中数组是值类型的,在函数中使用参数传递数组是非常昂贵的行为,如果变量是数组,意味着传递整个数组,当数组过大时,严重的影响了开销.but开发者并不那么的傻,更好的办法是传递指向数组的指针,这样开销会大大降低,但是注意到如果在函数中改变指针指向的值,那么原始数组的值也会改变(可以规避,但是无法规避的是传递的数组的长度必须相等)<br>&#160; &#160; &#160; &#160;对于上述这个问题,以及开头提出的数组的核心设计问题,幸运的是Go语言的<b><span class="color">slice(切片)</span></b>可以帮我们处理好这些问题.</p><h1 id="Slice-切片"><a href="#Slice-切片" class="headerlink" title="Slice(切片)"></a>Slice(切片)</h1><p>&#160; &#160; &#160; &#160;Slice(切片),首先需要明白的是slice并不是数组,<b>slice描述了与slice变量本身相隔离的,存储在数组里面的连续部分,切片描述的是一段数组</b>.slice可以按照需要增长和收缩,通过内建的appen、relice方法可以很容易的操作slice,而且slice的底层是基于数组的,所以slice的索引、迭代和垃圾回收性能都十分出色.<br>&#160; &#160; &#160; &#160;SO,可以简单认为slice是一种”动态数组”,它拥有自己的数据结构,就像一个struct,包含3个元数据:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">   <span class="keyword">type</span> slice <span class="keyword">struct</span> &#123;</div><div class="line">    slice中元素的长度</div><div class="line"> 指向底层数组的指针</div><div class="line"> slice的容量</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&#160; &#160; &#160; &#160;以上只是一个技术性的猜想.</p><h2 id="声明-amp-初始化"><a href="#声明-amp-初始化" class="headerlink" title="声明&amp;初始化"></a>声明&amp;初始化</h2><p>&#160; &#160; &#160; &#160;GO语言创建slice的方式有很多种,下面依次来看.<br>&#160; &#160; &#160; &#160;1、 内建函数make:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1、make函数创建</span></div><div class="line"><span class="comment">//指定slice长度,这是容量默认为长度</span></div><div class="line"><span class="keyword">var</span> slice1 = <span class="built_in">make</span>([]<span class="keyword">int</span>,<span class="number">5</span>)</div><div class="line"><span class="comment">//同时指定长度3和容量5</span></div><div class="line"><span class="keyword">var</span> slice2 = <span class="built_in">make</span>([]<span class="keyword">int</span>,<span class="number">3</span>,<span class="number">5</span>)</div></pre></td></tr></table></figure></p><p>&#160; &#160; &#160; &#160;需要注意的是不允许创建长度大于容量的slice,否则会出现如下编译错误:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">len</span> larger than <span class="built_in">cap</span> in <span class="built_in">make</span>([]<span class="keyword">int</span>)</div></pre></td></tr></table></figure></p><p>&#160; &#160; &#160; &#160;2、 基于数组创建:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建一个int slice</span></div><div class="line"><span class="comment">//长度和容量都是5</span></div><div class="line">slice :=[]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</div><div class="line"><span class="comment">//初始化一个100元素的slice</span></div><div class="line">slice1 :=[]<span class="keyword">int</span>&#123;<span class="number">99</span>:<span class="number">1</span>&#125;</div><div class="line"><span class="comment">//基于数组创建一个slice</span></div><div class="line"><span class="keyword">var</span> array [<span class="number">10</span>]<span class="keyword">int</span> = [<span class="number">10</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>&#125;</div><div class="line">slice2 :=array[:<span class="number">4</span>]</div></pre></td></tr></table></figure></p><h2 id="nil-amp-empty-slice"><a href="#nil-amp-empty-slice" class="headerlink" title="nil&amp;empty slice"></a>nil&amp;empty slice</h2><p>&#160; &#160; &#160; &#160;考虑到这种场景：在一个返回slice函数发生异常或者数据库查询返回0个结果.nil slice和empty slice都非常有用:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">//创建nil slice</span></div><div class="line">   <span class="keyword">var</span> slice []<span class="keyword">int</span></div><div class="line"><span class="comment">//创建empty slice</span></div><div class="line">slice1 :=<span class="built_in">make</span>([]<span class="keyword">int</span>,<span class="number">0</span>)</div><div class="line"><span class="comment">//or</span></div><div class="line">slice2 :=[]<span class="keyword">int</span>&#123;&#125;</div></pre></td></tr></table></figure></p><p>&#160; &#160; &#160; &#160;而且不管是nil slice还是empty slice,内建函数append,len,cap都不会有影响.</p><h2 id="slice的使用"><a href="#slice的使用" class="headerlink" title="slice的使用"></a>slice的使用</h2><p>&#160; &#160; &#160; &#160;slice为一个指定索引的元素赋值和数组完全相同,改变单个元素的值使用[]操作符:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">slice := []<span class="keyword">int</span>&#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;</div><div class="line">slice[<span class="number">1</span>] = <span class="number">25</span></div></pre></td></tr></table></figure></p><p>&#160; &#160; &#160; &#160;slice描述的是一段数组,且这段数组的某个范围是共享的,举个栗子:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> array [<span class="number">10</span>]<span class="keyword">int</span> =[<span class="number">10</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;</div><div class="line">slice1 :=array[<span class="number">2</span>:<span class="number">8</span>]  <span class="comment">//索引2开始,第8位置结束</span></div><div class="line">slice2 :=array[<span class="number">2</span>:<span class="number">6</span>]</div><div class="line">slice2[<span class="number">3</span>]=<span class="number">999</span>;</div><div class="line">fmt.Println(array)</div><div class="line">fmt.Println(slice1)</div><div class="line">fmt.Println(slice2)</div></pre></td></tr></table></figure></p><p>&#160; &#160; &#160; &#160;上述代码我们得到了两个slice和一个原始的数组,实际上slice1和slice2都具有指向原始数组的指针,但是slice1和slice2描述的一段数组的范围不同(2：8/VS:2:6),因此3者有一定的重合.情况如下图:</p><p><center><img src="http://kiritor.github.io/img/golangslice.png" alt="slice"></center><br>&#160; &#160; &#160; &#160;因此上述代码的输出结果为:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[1 2 3 4 5 999 7 8 9 10]</div><div class="line">[3 4 5 999 7 8]</div><div class="line">[3 4 5 999]</div></pre></td></tr></table></figure></p><p>&#160; &#160; &#160; &#160;再次强调的是不论是array还是slice1、slice2只要改变的是上述共享数组片段里面的值,都会变化.<br>&#160; &#160; &#160; &#160;一个slice只能访问它长度范围内的索引,试图访问超出范围的索引将会出现一个运行时错误.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Runtime Exception:</div><div class="line">panic: runtime error: index out of range</div></pre></td></tr></table></figure></p><h2 id="slice增长"><a href="#slice增长" class="headerlink" title="slice增长"></a>slice增长</h2><p>&#160; &#160; &#160; &#160;slice比较数组的优势在于它可以按照我们的需求增长,我们只需要使用append方法,go已经为我们做好了一切.<br>&#160; &#160; &#160; &#160;append方法需要一个源slice和需要附加到它里面的值,返回一个新的slice,append总是增加slice的长度,另一个方面,如果slice容量足够大,那么底层数组是不会发生改变的,否则会重新分配内存空间.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建一个长度和容量都为5的 slice</span></div><div class="line">slice := []<span class="keyword">int</span>&#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;</div><div class="line"><span class="comment">// 创建一个新的 slice</span></div><div class="line">newSlice := slice[<span class="number">1</span>:<span class="number">3</span>]</div><div class="line"><span class="comment">// 为新的 slice append 一个值</span></div><div class="line">newSlice = <span class="built_in">append</span>(newSlice, <span class="number">60</span>)</div><div class="line"><span class="comment">//slice索引为3的值也变成了60</span></div></pre></td></tr></table></figure></p><p>&#160; &#160; &#160; &#160;如果没有足够可用的容量,append函数会创建一个新的底层数组,拷贝已存在的值和将要被附加的新值:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">   <span class="keyword">var</span> array [<span class="number">2</span>]<span class="keyword">int</span> =[<span class="number">2</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>&#125;</div><div class="line">slice1 :=array[<span class="number">0</span>:]</div><div class="line">slice2 :=array[<span class="number">0</span>:]</div><div class="line">slice2 = <span class="built_in">append</span>(slice2,<span class="number">60</span>)</div><div class="line"><span class="comment">//因为超过了,容量2倍 为4,且不再和slice1、array共享数组片段</span></div><div class="line">slice2[<span class="number">0</span>] =<span class="number">100</span></div><div class="line">fmt.Println(array)</div><div class="line">fmt.Println(slice1)</div><div class="line">fmt.Println(slice2)</div><div class="line">fmt.Println(<span class="built_in">cap</span>(slice2)) <span class="comment">//4</span></div><div class="line"><span class="comment">/*</span></div><div class="line">     result:</div><div class="line">[1 2]</div><div class="line">[1 2]</div><div class="line">[100 2 60]</div><div class="line">4</div><div class="line">   */</div></pre></td></tr></table></figure></p><p>&#160; &#160; &#160; &#160;append函数重新创建底层数组时,容量将是现有数组的两倍(&lt;=1000),大于1000之后,容器因子为1.25倍.</p><p>##底层数组保护机制<br>&#160; &#160; &#160; &#160;细心的人可能发现了,append操作很有可能污染了底层数组(当append没有超过容量的时候,底层数组元素被修改了),有时候这并不是我们原意看到的,Go同样帮我们解决了这一问题.通过使用slice第三个索引参数:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">   <span class="keyword">var</span> array [<span class="number">10</span>]<span class="keyword">int</span> =[<span class="number">10</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;</div><div class="line"><span class="comment">//第三个参数指定容量</span></div><div class="line">slice1:= array[<span class="number">2</span>:<span class="number">8</span>:<span class="number">8</span>]</div><div class="line">slice2:= array[<span class="number">2</span>:<span class="number">8</span>]</div></pre></td></tr></table></figure></p><p>&#160; &#160; &#160; &#160;新建的slice1长度为6,容量也为6,,最大容量为6*2=12计算方法很简单:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">对于 slice[i:j:k] 或者 [<span class="number">2</span>:<span class="number">3</span>:<span class="number">4</span>]</div><div class="line">长度： j - i 或者 <span class="number">3</span> - <span class="number">2</span></div><div class="line">可用容量:  (j - <span class="number">1</span>)*<span class="number">2</span></div><div class="line">实际容量： k - i 或者 <span class="number">4</span> - <span class="number">2</span></div></pre></td></tr></table></figure></p><p>&#160; &#160; &#160; &#160;如果我们试图设置比可用容量更大的容量,会得到一个运行时错误:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">slice1 := <span class="built_in">source</span>[2:8:16]</div><div class="line">Runtime Error:</div><div class="line">panic: runtime error: slice bounds out of range</div></pre></td></tr></table></figure></p><p>&#160; &#160; &#160; &#160;SO,通过第三个索引参数限定,我们可以设置其实际容量和长度相等,这样在append的时候就不会污染底层数组了.内建函数append是变参函数,可以一次添加多个元素.同数组一样另外两个内建函数len、cap返回长度和容量.</p><p>##函数间传递slice<br>&#160; &#160; &#160; &#160;前面就已经知道了,在函数间传递数组是非常昂贵的,使用指针又会出现其他问题,解决的方案就是使用slice.函数间传递slice是非廉价,因为slice相对于是指向底层数组的指针,不过需要注意的是,这里还是会存在污染底层数组的问题(可以规避).</p>]]></content>
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> slice </tag>
            
            <tag> append </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>自己动手开发jQuery插件</title>
      <link href="/2015/05/06/jQueryPlugindevGuide/"/>
      <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;jQuery的使用越来越广泛,现如今的前端框架基本上都使用了jQuery。jQuery凭借其简洁的API,对DOM强大的操控性,易于扩展,开源,社区化的模式越来越受到开发人员的喜爱。jQuery的迅速流行不仅仅是因为jQuery本身的优势,其易于扩展的插件,开源的社区(良好的生态社区)使得jQuery插件越来越丰富稳定极大的简化了web开发人员的工作,这也是jQuery最为成功的地方。<br>&nbsp;&nbsp;&nbsp;&nbsp;jQuery的使用并不算复杂,开发中肯定接触了不少的插件.不过,我们不能仅仅只能使用工具,还要学会如何去编写自己的工具:jQuery插件。<br><a id="more"></a></p><h2 id="插件基础"><a href="#插件基础" class="headerlink" title="插件基础"></a>插件基础</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;在最基础的水平上,创建jQuery插件是非常简单的,但是需要明白的是:简单并不意味正确,遵循一些最佳实践能够改善性能,减少错误,提升交互性,参考jQuery编码规范:<a href="http://kiritor.github.io/2015/04/02/%E7%BC%96%E5%86%99%E6%9B%B4%E5%A5%BD%E7%9A%84jQuery%E7%9A%84%E5%BB%BA%E8%AE%AE-%E8%BD%AC/">编写更好的jQuery的建议</a></p><h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;一般情况下,插件(开发环境)的命名形式为:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jquery.pluginName.js</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;生产环境下(压缩之后的),插件的命名形式为:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jquery.pluginName.min.js</div></pre></td></tr></table></figure></p><h2 id="jQuery插件开发模式"><a href="#jQuery插件开发模式" class="headerlink" title="jQuery插件开发模式"></a>jQuery插件开发模式</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;jQuery高级编程中提到了3中插件开发模式:<br>&nbsp;&nbsp;&nbsp;&nbsp;1. 通过jQuery.fn向jQuery添加新方法.<br>&nbsp;&nbsp;&nbsp;&nbsp;2. 通过jQuery.extend()扩展jQuery.<br>&nbsp;&nbsp;&nbsp;&nbsp;3. 通过jQuery.widget()应用jQueryUI的部件工厂方法创建.<br>&nbsp;&nbsp;&nbsp;&nbsp;先从简单的第二种方法开始,这种插件开发的方式仅仅是在jQuery命名空间(jQuery)上添加了一个静态方法,可以直接通过美元符号(jquery编码的符号,页面解析不出来,用”美元符号代替”)调用,一个简单的例子:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$.extend(&#123;</div><div class="line">   <span class="attr">log</span>:<span class="function"><span class="keyword">function</span>(<span class="params">text</span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"日志:"</span>+text)</div><div class="line">   &#125;</div><div class="line">&#125;);</div><div class="line"><span class="comment">//直接通过$符号进行调用</span></div><div class="line">$.log(<span class="string">"简单的日志插件"</span>)</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;jquery最令人惊叹的便是强大的选择器了,显然这种方式无法利用jquery的选择器,而且这并非是一个规范的做法。jquery.extend用于扩展自身方法,而jquery.fn则是用于扩展jquery类,包括了对方法和对象的操作。为了保持jquery的完整性,推荐使用第一种方法进行插件开发,尽量不要使用第二种。至于第三种方式,则是用于开发更高级jquery部件的,这里就不再细说了,下面重点总结下第一种方式如何进行插件的开发。</p><h2 id="插件开发-雏形"><a href="#插件开发-雏形" class="headerlink" title="插件开发-雏形"></a>插件开发-雏形</h2><p>1、开始<br>&nbsp;&nbsp;&nbsp;&nbsp;根据开篇的命名规范,最初的插件原型可能如下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">jQuery.fn.toolTip = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   <span class="comment">//do something</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;但是为了确保你的插件与其他插件的美元符号不冲突,最好使用一个立即执行的匿名函数,这样就可以放心的使用美元符号了。结构如下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">;<span class="comment">//可以事先加一个";",这是一个好习惯,可以避免与别人的函数相连,造成报错</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"> $ </span>)</span>&#123;  </div><div class="line"></div><div class="line">  $.fn.toolTip = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </div><div class="line">    <span class="comment">//do something</span></div><div class="line">  &#125;;  </div><div class="line"></div><div class="line">&#125;)( jQuery );</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;jQuery高级编程中提及了一种更加安全、结构良好、有序的方式(笔者认为上面的方式已经没问题了)供参考:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">$, window, document,undefined</span>) </span>&#123;</div><div class="line">   </div><div class="line">    $.fn.toolTip = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">       </div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;)(jQuery, <span class="built_in">window</span>, <span class="built_in">document</span>);</div></pre></td></tr></table></figure></p><p>2、基本开发<br>&nbsp;&nbsp;&nbsp;&nbsp;准备工作做的差不多了,至少来写一个简单的插件了吧。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">   给某个元素提示信息</div><div class="line">*/</div><div class="line"></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"> $ </span>)</span>&#123;  </div><div class="line"></div><div class="line">  $.fn.toolTip = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </div><div class="line">      <span class="keyword">var</span> $tip = $(<span class="string">'&lt;span&gt;'</span>+<span class="keyword">this</span>.text()+<span class="string">'&lt;/span&gt;'</span>);</div><div class="line">  $tip.css(&#123;</div><div class="line">      <span class="attr">color</span>:<span class="string">'red'</span>,</div><div class="line">  <span class="attr">fontSize</span>:<span class="string">'10px'</span></div><div class="line">  &#125;);</div><div class="line">  <span class="keyword">this</span>.append($tip);</div><div class="line">  </div><div class="line">  &#125;;  </div><div class="line"></div><div class="line">&#125;)( jQuery );  </div><div class="line"><span class="comment">//调用</span></div><div class="line">$(<span class="string">'#id'</span>).toolTip();</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;元素调用该插件之后,后面会跟一个提示信息(元素的text信息),字体颜色为红色,size为10px。插件已经初具雏形了!</p><h2 id="插件形态二-默认值和选项"><a href="#插件形态二-默认值和选项" class="headerlink" title="插件形态二(默认值和选项)"></a>插件形态二(默认值和选项)</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;上面的事例仅仅是一个插件的雏形,远没有达到插件所要求的那样,不够灵活,不易扩展(调整字体的大小，颜色必须修改插件源码)。<br>&nbsp;&nbsp;&nbsp;&nbsp;为了一些复杂的,可定制化的插件,合理的做法是提供一套默认值,在被调用的时候扩展默认值。这样在实际使用插件时,根据不同的时候配置不同的参数,合理、方便。接上面的插件,实现插件的使用者,自己定义tooltip字体的颜色和大小,可以这样做:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">   给某个空间提示信息</div><div class="line">*/</div><div class="line"></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</div><div class="line"></div><div class="line">    $.fn.toolTip = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> settings = $.extend(&#123;&#125;, $.fn.toolTip.defaults, options);</div><div class="line">        <span class="keyword">var</span> $tip = $(<span class="string">'&lt;span&gt;'</span> + <span class="keyword">this</span>.text() + <span class="string">'&lt;/span&gt;'</span>);</div><div class="line">        $tip.css(&#123;</div><div class="line">            <span class="attr">color</span>: settings.color,</div><div class="line">            <span class="attr">fontSize</span>: settings.fontSize</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">this</span>.append($tip);</div><div class="line"></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">//插件默认参数</span></div><div class="line">    $.fn.toolTip.defaults = &#123;</div><div class="line">        <span class="attr">color</span>: <span class="string">'red'</span>,</div><div class="line">        <span class="attr">fontSize</span>: <span class="string">'8px'</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">&#125;)(jQuery);</div><div class="line"></div><div class="line"><span class="comment">//调用</span></div><div class="line">$(<span class="string">'#toolTip'</span>).toolTip(&#123;</div><div class="line">     <span class="attr">color</span>: <span class="string">'#000'</span>,</div><div class="line">     <span class="attr">fontSize</span>: <span class="string">'30px'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;这样一来的话,就可以通过注入不同的参数来使用插件了,插件真正的做到了灵活扩展,不过离一个强大的插件还不够!</p><h2 id="插件形态三-方法、事件、数据"><a href="#插件形态三-方法、事件、数据" class="headerlink" title="插件形态三(方法、事件、数据)"></a>插件形态三(方法、事件、数据)</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;在此之前先理解一下命名空间,正确的命名空间对于插件开发是十分重要的,这样能确保你的插件不被其他插件重写,也能够避免被页面上其他代码重写。命名空间记录了插件的方法、事件和数据。</p><h2 id="A、插件方法"><a href="#A、插件方法" class="headerlink" title="A、插件方法"></a>A、插件方法</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;千万不在一个插件中为jquery.fn增加多个方法,错误的做法:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"> $ </span>)</span>&#123;  </div><div class="line">  </div><div class="line">  $.fn.tooltip = <span class="function"><span class="keyword">function</span>(<span class="params"> options </span>) </span>&#123; &#125;;  </div><div class="line">  $.fn.tooltipShow = <span class="function"><span class="keyword">function</span>(<span class="params"> </span>) </span>&#123;   &#125;;  </div><div class="line">  $.fn.tooltipHide = <span class="function"><span class="keyword">function</span>(<span class="params"> </span>) </span>&#123;   &#125;;  </div><div class="line">  $.fn.tooltipUpdate = <span class="function"><span class="keyword">function</span>(<span class="params"> content </span>) </span>&#123;   &#125;;  </div><div class="line">  </div><div class="line">&#125;)( jQuery );</div></pre></td></tr></table></figure></p><p>污染了命名空间,可以把所有的方法放在一个对象中,通过参数来调用,正确的姿势如下:(改进上述代码)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">   给某个控件提示信息</div><div class="line">*/</div><div class="line"></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//插件初始化</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params">target,options</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> settings = $.extend(&#123;&#125;, $.fn.toolTip.defaults, options);</div><div class="line">        <span class="keyword">var</span> $tip = $(<span class="string">'&lt;span&gt;'</span> + settings.text+ <span class="string">'&lt;/span&gt;'</span>);</div><div class="line"><span class="keyword">var</span> hidden = <span class="string">''</span>;</div><div class="line"><span class="keyword">if</span>(settings.show==<span class="literal">true</span>)&#123;</div><div class="line">    hidden=<span class="string">'inline-block'</span>;</div><div class="line">&#125;<span class="keyword">else</span></div><div class="line">hidden=<span class="string">'none'</span>;</div><div class="line">$tip.css(&#123;</div><div class="line">            <span class="attr">color</span>: settings.color,</div><div class="line">            <span class="attr">fontSize</span>: settings.fontSize,</div><div class="line"><span class="attr">display</span>:hidden</div><div class="line">        &#125;);</div><div class="line">        $(target).append($tip);</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line">   显示消息提示</div><div class="line">   param:isShow是否显示</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">target,isShow</span>)</span>&#123;</div><div class="line"><span class="keyword">if</span>(isShow==<span class="literal">true</span>)</div><div class="line">       $(target).find(<span class="string">'span'</span>).css(<span class="string">'display'</span>,<span class="string">'inline-block'</span>);</div><div class="line"><span class="keyword">else</span></div><div class="line">   $(target).find(<span class="string">'span'</span>).css(<span class="string">'display'</span>,<span class="string">'none'</span>);</div><div class="line"> </div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">    $.fn.toolTip = <span class="function"><span class="keyword">function</span>(<span class="params">options,param</span>) </span>&#123;</div><div class="line">   </div><div class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> options == <span class="string">'string'</span>)&#123;</div><div class="line">    <span class="keyword">var</span> method = $.fn.toolTip.methods[options];</div><div class="line"><span class="keyword">if</span>(method)</div><div class="line"><span class="keyword">return</span> method(<span class="keyword">this</span>,param);</div><div class="line">&#125;<span class="keyword">else</span> </div><div class="line">init(<span class="keyword">this</span>,options);</div><div class="line"></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">//插件默认参数</span></div><div class="line">    $.fn.toolTip.defaults = &#123;</div><div class="line">        <span class="attr">color</span>: <span class="string">'red'</span>,</div><div class="line">        <span class="attr">fontSize</span>: <span class="string">'8px'</span>,</div><div class="line"><span class="attr">show</span>: <span class="literal">true</span>,</div><div class="line"><span class="attr">text</span>:<span class="string">''</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line"><span class="comment">//插件方法集合</span></div><div class="line"></div><div class="line">$.fn.toolTip.methods = &#123;</div><div class="line">    </div><div class="line"><span class="attr">init</span>:<span class="function"><span class="keyword">function</span>(<span class="params">jq,options</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> jq.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   init(<span class="keyword">this</span>,options);</div><div class="line">&#125;);</div><div class="line">&#125;,</div><div class="line"><span class="attr">show</span>:<span class="function"><span class="keyword">function</span>(<span class="params">jq,isShow</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> jq.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">show(<span class="keyword">this</span>,isShow);</div><div class="line">&#125;);</div><div class="line">&#125;</div><div class="line"> </div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;)(jQuery);</div><div class="line"><span class="comment">//页面进行调用</span></div><div class="line">$(<span class="string">'#toolTip'</span>).toolTip(&#123;</div><div class="line">    <span class="attr">color</span>: <span class="string">'red'</span>,</div><div class="line">    <span class="attr">fontSize</span>: <span class="string">'6px'</span>,</div><div class="line"><span class="attr">text</span>:<span class="string">'我是提示消息'</span></div><div class="line">&#125;);</div><div class="line">$(<span class="string">'#toolTip'</span>).toolTip(<span class="string">'show'</span>,<span class="literal">false</span>)</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;实际情况是:提示信息不在显示了,ok!到此为止就可以给自己的插件添加各种有意思的方法了,插件也是越来越强大了呢!</p><h2 id="B、插件事件"><a href="#B、插件事件" class="headerlink" title="B、插件事件"></a>B、插件事件</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;这里所说的事件和传统的事件略有区别。考虑这样一种需求:当一个插件完成某种操作之后,需要一些自定义的功能。把这一过程叫做事件,这里和浏览器的诸如onclick事件是有很大差异的,更多的是插件业务逻辑上的延伸,本质上是插件完成某件操作事件)之后的回调操作,只是这个操作是用户自己实现。核心实现在于call方法的运用。<br>&nbsp;&nbsp;&nbsp;&nbsp;还是以上面的插件为例子,我们给插件定义一个AfterInit事件,当插件初始化完成之后,用户可以自定义一些操作。这只是操作逻辑上看起来像一个事件,其实本质上是一个空方法(再插件内部调用),代码如下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//插件方法集合</span></div><div class="line"></div><div class="line">$.fn.toolTip.methods = &#123;</div><div class="line">    </div><div class="line"><span class="attr">init</span>:<span class="function"><span class="keyword">function</span>(<span class="params">jq,options</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> jq.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   init(<span class="keyword">this</span>,options);</div><div class="line">&#125;);</div><div class="line">&#125;,</div><div class="line"><span class="attr">show</span>:<span class="function"><span class="keyword">function</span>(<span class="params">jq,isShow</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> jq.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">show(<span class="keyword">this</span>,isShow);</div><div class="line">&#125;);</div><div class="line">&#125;,</div><div class="line"><span class="comment">//定义一个事件(方法),实现为空</span></div><div class="line">AfterInit:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//插件初始化</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params">target,options</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> settings = $.extend(&#123;&#125;, $.fn.toolTip.defaults, options);</div><div class="line">        <span class="keyword">var</span> $tip = $(<span class="string">'&lt;span&gt;'</span> + settings.text+ <span class="string">'&lt;/span&gt;'</span>);</div><div class="line"><span class="keyword">var</span> hidden = <span class="string">''</span>;</div><div class="line"><span class="keyword">if</span>(settings.show==<span class="literal">true</span>)&#123;</div><div class="line">    hidden=<span class="string">'inline-block'</span>;</div><div class="line">&#125;<span class="keyword">else</span></div><div class="line">hidden=<span class="string">'none'</span>;</div><div class="line">$tip.css(&#123;</div><div class="line">            <span class="attr">color</span>: settings.color,</div><div class="line">            <span class="attr">fontSize</span>: settings.fontSize,</div><div class="line"><span class="attr">display</span>:hidden</div><div class="line">        &#125;);</div><div class="line">        $(target).append($tip);</div><div class="line">options.AfterInit.call(target);   <span class="comment">//初始化完成之后,触发事件(本质上就是个方法)</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>本质上就是个方法，只是用起来像一个事件了,接下来,我们在使用中自己实现回调事件的操作:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#toolTip'</span>).toolTip(&#123;</div><div class="line">      <span class="attr">color</span>: <span class="string">'red'</span>,</div><div class="line">      <span class="attr">fontSize</span>: <span class="string">'6px'</span>,</div><div class="line">   <span class="attr">text</span>:<span class="string">'我是提示消息'</span>,</div><div class="line"><span class="attr">AfterInit</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   alert(<span class="string">"插件已经初始化完成!"</span>)</div><div class="line">   &#125;</div><div class="line"> &#125;);</div></pre></td></tr></table></figure></p><p>这样在插件初始化完成之后,就会触发AfterInit事件(方法),完成用户自定义的操作。这样以来,插件的功能更加强大了呢。</p><h2 id="B、插件数据"><a href="#B、插件数据" class="headerlink" title="B、插件数据"></a>B、插件数据</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;在插件开发的时候我们需要在插件中保存设置和信息,这是jquery的data方法就非常有用了,他会获取元素的相关数据,如果数据不存在,创建相应的数据添加到元素上。下面看看如何使用吧:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//插件初始化</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params">target,options</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> settings = $.extend(&#123;&#125;, $.fn.toolTip.defaults, options);</div><div class="line">$<span class="keyword">this</span> = $(target);</div><div class="line"><span class="comment">//保存设置</span></div><div class="line">$<span class="keyword">this</span>.data(<span class="string">'toolTip'</span>);</div><div class="line">        <span class="keyword">var</span> $tip = $(<span class="string">'&lt;span&gt;'</span> + settings.text+ <span class="string">'&lt;/span&gt;'</span>);</div><div class="line"><span class="keyword">var</span> hidden = <span class="string">''</span>;</div><div class="line"><span class="keyword">if</span>(settings.show==<span class="literal">true</span>)&#123;</div><div class="line">    hidden=<span class="string">'inline-block'</span>;</div><div class="line">&#125;<span class="keyword">else</span></div><div class="line">hidden=<span class="string">'none'</span>;</div><div class="line">$tip.css(&#123;</div><div class="line">            <span class="attr">color</span>: settings.color,</div><div class="line">            <span class="attr">fontSize</span>: settings.fontSize,</div><div class="line"><span class="attr">display</span>:hidden</div><div class="line">        &#125;);</div><div class="line">        $<span class="keyword">this</span>.append($tip);</div><div class="line">options.AfterInit.call(target);   <span class="comment">//初始化完成之后,触发事件(本质上就是个方法)</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//插件销毁</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">destory</span>(<span class="params">target</span>)</span>&#123;</div><div class="line">    $(target).removeData(<span class="string">'toolTip'</span>);  <span class="comment">//删除数据</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>使用data方法可以帮助你在插件的各个方法间保持状态和变量,将之放在一个对象中,便于访问,也便于删除。</p><h2 id="插件支持链式调用"><a href="#插件支持链式调用" class="headerlink" title="插件支持链式调用"></a>插件支持链式调用</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;我们知道jquery的一个优雅的设计是支持链式操作的,即使你不准备为你的插件提供链式支持,但是为这准备也是一个很好的实践,上面的插件其实已经实现了,关键在于每次都要return插件本身(this)。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">show:<span class="function"><span class="keyword">function</span>(<span class="params">jq,isShow</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> jq.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">show(<span class="keyword">this</span>,isShow);</div><div class="line">&#125;);</div><div class="line">&#125;</div><div class="line"><span class="comment">//链式调用</span></div><div class="line">$(<span class="string">'#toolTip'</span>).toolTip(&#123;</div><div class="line">    <span class="attr">color</span>: <span class="string">'red'</span>,</div><div class="line">    <span class="attr">fontSize</span>: <span class="string">'6px'</span>,</div><div class="line">    <span class="attr">text</span>:<span class="string">'我是提示消息'</span>,</div><div class="line"><span class="attr">AfterInit</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="string">"插件已经初始化完成!"</span>)</div><div class="line">   &#125;</div><div class="line">    &#125;);</div><div class="line">$(<span class="string">'#toolTip'</span>).toolTip(<span class="string">'show'</span>,<span class="literal">true</span>).css(<span class="string">'color'</span>,<span class="string">'red'</span>);</div></pre></td></tr></table></figure></p><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;下面是编写jquery插件的一些总结与最佳实践。<br>－ 使用(function($){//plugin})(jQuery);来包装你的插件<br>－ 返回this指针保证插件可链式操作<br>－ 使用对象来设置差价的参数和默认值<br>－ 为你的函数、事件、数据附着到某个命名空间</p><h2 id="代码压缩"><a href="#代码压缩" class="headerlink" title="代码压缩"></a>代码压缩</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;代码混淆与压缩不仅能一定程度上保护代码,更是使得插件的体积减小,变得轻量级,加快了下载速度。</p><h2 id="分享"><a href="#分享" class="headerlink" title="分享"></a>分享</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;最后,好的插件要分享出来哦,那样插件才具有生命力,才能不断的优化改进!</p><h2 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h2><p><a href="http://www.cnblogs.com/Wayou/p/jquery_plugin_tutorial.html" target="_blank" rel="external">插件开发精品教程</a><br><a href="http://www.bkjia.com/jQuery/963539.html" target="_blank" rel="external">jquery插件开发</a></p>]]></content>
      
      <categories>
          
          <category> front </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
            <tag> plugin </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Bootstrap-案例集锦</title>
      <link href="/2015/04/22/Bootstrap-%E6%A1%88%E4%BE%8B%E9%9B%86%E9%94%A6/"/>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近想用Java做一个管理系统(不限),夯实一下所学到的东西,其实一直有这个想法,奈何总是难以付诸行动。在开发中自己前端后端都在负责,但是前端也只是个半吊子前端,对easyui比较熟悉,但是体验太差,想着还是有必要学习一下bootstrap。bootstrap有很多的模板可选择,本着学习的效果,自己还是不使用开源的模板,一步一步去实现。下面就是实现过程中的一些小小案例</p><h2 id="顶部菜单"><a href="#顶部菜单" class="headerlink" title="顶部菜单"></a>顶部菜单</h2><p>借助于bootstrap和一些图标字体,加上一些自定义的css代码实现的漂亮的顶部菜单,一般用于管理系统。效果如下:</p><center><img src="http://kiritor.github.io/img/bootstrap_top.png" alt="顶部"></center>]]></content>
      
      <categories>
          
          <category> front </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bootstrap </tag>
            
            <tag> header </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Go语言时间处理</title>
      <link href="/2015/04/15/Go%E8%AF%AD%E8%A8%80%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86/"/>
      <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;一次群里面的朋友在问Unix时间戳的转换问题,刚好无聊在写go代码,于是就查询了下time包,实现了时间戳转换为时间。不用说time包开发中基本是必须用到的包之一,因此也就顺便做一个总结了。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;查看官方文档,time包里面包含了许多数据类型,不过最常见,使用的最多的必然要属Time了,这个Time类型最小可以表示到nanosecond(微毫秒,十亿分之1秒)。<br><a id="more"></a></p><p><center><img src="http://kiritor.github.io/img/go_time.png" alt="go_time"></center><br>&nbsp;&nbsp;&nbsp;&nbsp;接下来介绍一些比较常用的方法和使用</p><h2 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;获取当前的时间戳:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">   t := time.Now().Unix()</div><div class="line">   fmt.Println(t)</div><div class="line"><span class="comment">//1429081897(单位秒)</span></div></pre></td></tr></table></figure></p><h2 id="格式化时间"><a href="#格式化时间" class="headerlink" title="格式化时间"></a>格式化时间</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;最常见的需求,实现方式如下:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">fmt.Println(time.Now().Format(<span class="string">"2006-01-02 15:04:05"</span>))  <span class="comment">// 这是个奇葩,必须是这个时间点, 据说是go诞生之日, 记忆方法:6-1-2-3-4-5</span></div><div class="line"><span class="comment">//2014-01-07 09:42:20</span></div></pre></td></tr></table></figure></p><h2 id="时间戳转换为格式化时间"><a href="#时间戳转换为格式化时间" class="headerlink" title="时间戳转换为格式化时间"></a>时间戳转换为格式化时间</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;思路是先将时间戳转化为时间,在转化为格式化字符串<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">str_time := time.Unix(<span class="number">1389058332</span>, <span class="number">0</span>).Format(<span class="string">"2006-01-02 15:04:05"</span>)</div><div class="line">fmt.Println(str_time)</div><div class="line"><span class="comment">//2014-01-07 09:32:12</span></div></pre></td></tr></table></figure></p><h2 id="格式化字符串转时间"><a href="#格式化字符串转时间" class="headerlink" title="格式化字符串转时间"></a>格式化字符串转时间</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;同样是先将字符串转换为时间,在转化为时间戳,两种方法:<br>&nbsp;&nbsp;&nbsp;&nbsp;方法一:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">the_time := time.Date(<span class="number">2014</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">50</span>, <span class="number">4</span>, <span class="number">0</span>, time.Local)</div><div class="line">unix_time := the_time.Unix()</div><div class="line">fmt.Println(unix_time)</div><div class="line"><span class="comment">//389045004</span></div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;方法二:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">the_time, err := time.Parse(<span class="string">"2006-01-02 15:04:05"</span>, <span class="string">"2014-01-08 09:04:41"</span>)</div><div class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</div><div class="line">        unix_time := the_time.Unix()</div><div class="line">    fmt.Println(unix_time)     </div><div class="line">&#125;</div><div class="line"><span class="comment">//1389171881</span></div></pre></td></tr></table></figure></p><h2 id="时间比较"><a href="#时间比较" class="headerlink" title="时间比较"></a>时间比较</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;Time的比较时使用Before,After,Equal方法,返回值为bool类型</p><h2 id="输出星期信息"><a href="#输出星期信息" class="headerlink" title="输出星期信息"></a>输出星期信息</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;输出星期信息也比较简单,方法如下:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">fmt.Println(time.Now().Weekday())</div><div class="line"><span class="comment">//Wednesday</span></div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;当然Time包下还有许多其他有用的类型例如(Ticker、Timer等),不过这里就不在介绍了,OK,GO时间处理就先到这个地方了!</p>]]></content>
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> time </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Oracle dblink实践</title>
      <link href="/2015/04/14/Oracle-dblink%E5%AE%9E%E8%B7%B5/"/>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;项目开发中,涉及到不同模块之间的数据流转,但是模块间的底层数据又不在同一个数据库中,要实现不同模块间的数据交互方法其实很多。比较常见的两种方式便是webService和dblink。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;webService方式即是模块之间各自提供数据流入接口和流出接口,这种方式需要开发,而且由于业务变化很容易造成接口的调整,好处是各业务模块的底层数据库是完全耦合的。在大型系统(模块多且之间交互复杂)不利。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;dblink的方式是通过创建dblink到远程数据库,执行远程程序,这样一来,模块间的数据流转就会变得非常简单,各自模块无需提供数据接口。但是有一个问题是,模块底层数据库之间不是耦合的,在系统实际上线之前我们要规范好各个模块数据库之间的link关系,之后按照规范,部署数据库实例,前期的准备工作比较麻烦。<br><a id="more"></a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;经过一些权衡,以及实际项目开发的情况,选择了以dblink的方式来解决各模块之间数据流转的问题</p><h2 id="dblink概述"><a href="#dblink概述" class="headerlink" title="dblink概述"></a>dblink概述</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;dblink定义一个数据库到另一个数据库路径的对象,它允许你查询远程表及执行远程程序,在任何分布式的生产环境中,dblink都是必要的(结合物化视图),而且dblink是单向的连接。<br>dblink存在于多个数据库之间,因此在创建dblink之前需要保证本地库和远程库的网络连接是正确的,TNS Ping要能成功,而且该用户在远程数据库上有相应的访问权限。</p><p>对于dblink就不深入介绍了,比较有参考意义的一篇文章:<a href="http://czmmiao.iteye.com/blog/1236562" target="_blank" rel="external">Oracle dblink详解</a></p><h2 id="dblink的创建"><a href="#dblink的创建" class="headerlink" title="dblink的创建"></a>dblink的创建</h2><p>创建dblink有两种方式:基于TNS Name和不基于TNS Name<br>首先是基于TNS Name,语法如下:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">SHARED</span> <span class="keyword">PUBLIC</span> <span class="keyword">database</span> <span class="keyword">link</span> GNIS</div><div class="line"><span class="keyword">AUTHENTICATED</span> <span class="keyword">BY</span> USERNAME <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="keyword">PASSWORD</span></div><div class="line"><span class="keyword">USING</span> ‘TNSNAME’;</div></pre></td></tr></table></figure></p><p>其次,不使用TNS Name进行创建:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">database</span> <span class="keyword">link</span> link_name</div><div class="line"><span class="keyword">CONNECT</span> <span class="keyword">TO</span> <span class="keyword">user</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> screct</div><div class="line"><span class="keyword">USING</span> <span class="string">'(DESCRIPTION =</span></div><div class="line">(ADDRESS_LIST =</div><div class="line">(ADDRESS = (PROTOCOL = TCP)(HOST = sales.company.com)(PORT = 1521))</div><div class="line">)</div><div class="line">(CONNECT_DATA =</div><div class="line">(SERVICE_NAME = sales)</div><div class="line">)</div><div class="line">)';</div></pre></td></tr></table></figure></p><h2 id="dblink的使用"><a href="#dblink的使用" class="headerlink" title="dblink的使用"></a>dblink的使用</h2><p>dblink的使用方式很简单,一个简单的例子如下:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> table_name@<span class="keyword">database</span> <span class="keyword">link</span>;</div><div class="line"><span class="comment">--不想让人知道dblink的名字的时候</span></div><div class="line"><span class="comment">--可以使用oracle的synonym(同义词)进行包装下</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">SYNONYM</span> table_name <span class="keyword">FOR</span> table_name@<span class="keyword">database</span> <span class="keyword">link</span>;</div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> table_name;</div><div class="line"><span class="comment">-- 或者，也可以建立一个视图来封装</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> table_name <span class="keyword">AS</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span>  table_name@<span class="keyword">database</span> <span class="keyword">link</span>;</div></pre></td></tr></table></figure></p><p>对于dblink的更详细的一些操作,可以参考上述链接(大牛的文章),这里就不过多做介绍了。</p><h2 id="Hibernate使用dblink"><a href="#Hibernate使用dblink" class="headerlink" title="Hibernate使用dblink"></a>Hibernate使用dblink</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;了解了dblink理论以及dblink的使用,接下来的重点就是如何将其用于生产环境中了,这里已我自己实际中遇到的例子为例.<br>首先是创建dblink:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">PUBLIC</span> <span class="keyword">database</span> <span class="keyword">link</span> ecistest_dblink</div><div class="line"><span class="keyword">AUTHENTICATED</span> <span class="keyword">BY</span> ecis <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> ecis</div><div class="line"><span class="keyword">USING</span> <span class="string">'JULI'</span></div></pre></td></tr></table></figure></p><p>其次为了方便hibernate的操作我们使用oracle的同义词SYNONYM给要查询的对象创建一个封装名(能够用SYNONY是因为hibernate是支持同义词映射的),方法如下:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--CREATE SYNONYM SYN_TABLE_NAME FOR MM_MATERIALCATEGORY@ecistest_dblink;</span></div><div class="line"><span class="comment">--通过别称使用</span></div><div class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> syn_table_name;</div></pre></td></tr></table></figure></p><p>之后在hibernate映射文件或者entity类中(注解)使用别名进行底层数据表的映射了,以注解为例:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Inheritance</span>( strategy = InheritanceType.TABLE_PER_CLASS )</div><div class="line"><span class="meta">@Table</span>( name = <span class="string">"syn_table_name"</span> )</div></pre></td></tr></table></figure></p><p>接下来,我们就可以使用hibernate通过dblink的方式操作远程数据库了,不过实际运行会报错,错误信息如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ORA-24777 不可使用不可移植的数据库链路</div></pre></td></tr></table></figure></p><p>通过谷歌,发现是dblink的创建有问题,需要创建一个共享的数据库连接,因此删除创建好的dblink,重新创建shared方式的dblink:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DROP</span> <span class="keyword">database</span> <span class="keyword">link</span> ecistest_dblink;</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">SHARED</span> <span class="keyword">database</span> <span class="keyword">link</span> ecistest_dblink</div><div class="line"><span class="keyword">AUTHENTICATED</span> <span class="keyword">BY</span> ecis <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> ecis</div><div class="line"><span class="keyword">USING</span> <span class="string">'JULI'</span></div></pre></td></tr></table></figure></p><p>shared dblink需要指定dblink authentication(该用户必须能在远程数据库创建session,且具有数据库相关操作权限)<br>接下来,运行程序很可能出现如下的错误:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ORA-02020 : 过多的数据库链接在使用中</div></pre></td></tr></table></figure></p><p>出现该错误的原因是shared方式的dblink数据库会限制到远程数据库的session数量,这样以避免过多的连接对远程数据库造成太大的压力,而且在使用shared dblink的时候,到database link的连接会在连接以后与本地连接断开,为防止为授权的session还需要指定link_authentication,关于这方面更多的资料,参考上述连接.</p><p>出现上述错误,我们可以通过扩增dblink连接数来解决,方法如下:<br>1、首先看一下连接数:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">show</span> parameter open_links;</div><div class="line"><span class="comment">--笔者修改过后的为</span></div><div class="line">NAME                                 TYPE        VALUE</div><div class="line"><span class="comment">------------------------------------ ----------- ------------------------------</span></div><div class="line">open_links                           integer     50</div><div class="line">open_links_per_instance              integer     50</div><div class="line">open_links:每个session最多允许的dblink数量</div><div class="line">open_links_per_instance：指每个实例最多允许的dblink个数</div></pre></td></tr></table></figure></p><p>2、修改连接数<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">alter</span> <span class="keyword">system</span> <span class="keyword">set</span> open_links=<span class="number">50</span> <span class="keyword">scope</span>=<span class="keyword">spfile</span>;</div><div class="line"><span class="keyword">alter</span> <span class="keyword">system</span> <span class="keyword">set</span> open_links_per_instance=<span class="number">50</span> <span class="keyword">scope</span>=<span class="keyword">spfile</span>;</div></pre></td></tr></table></figure></p><p>3、重新启动数据库<br>修改之后需要重新启动数据库该设置才能够生效。<br>之后在hibernate中就可以正常的使用dblink了。</p><h2 id="问题补充1"><a href="#问题补充1" class="headerlink" title="问题补充1"></a>问题补充1</h2><p>&nbsp;&nbsp;&nbsp;&amp;nbsp在实际使用的过程中,还出现了一个问题,那就是由于oracle版本不一致导致的,一个为oracle10g一个为oracle11g。错误信息如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ORA-01017: 用户名/口令无效; 登录被拒绝</div><div class="line">ORA-02063: 紧接着 2 lines (起自 POSTGRESQL)</div></pre></td></tr></table></figure></p><p>通过查询得知这是由于oracle11G用户名、密码大小写敏感的原因,而且oracle10的网关日志中显示用户名、密码最后都是以大写的形式呈现的。因此创建shared dblink的方式需要修改成如下形式:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">SHARED</span> <span class="keyword">PUBLIC</span> <span class="keyword">database</span> <span class="keyword">link</span> mccprd_dblink</div><div class="line"><span class="keyword">CONNECT</span> <span class="keyword">TO</span> <span class="string">"cpmtest"</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">"cpmtest"</span></div><div class="line"><span class="keyword">AUTHENTICATED</span> <span class="keyword">BY</span> <span class="string">"cpmtest"</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">"cpmtest"</span></div><div class="line"><span class="keyword">USING</span> <span class="string">'(DESCRIPTION =</span></div><div class="line">(ADDRESS_LIST =</div><div class="line">(ADDRESS = (PROTOCOL = TCP)(HOST = 10.73.1.141)(PORT = 1521))</div><div class="line">)</div><div class="line">(CONNECT_DATA =</div><div class="line">(SERVICE_NAME = MCCPRD)</div><div class="line">)</div><div class="line">)';</div></pre></td></tr></table></figure></p><h2 id="问题补充2"><a href="#问题补充2" class="headerlink" title="问题补充2"></a>问题补充2</h2><p>&nbsp;&nbsp;&nbsp;&amp;nbsp在实际使用dblink时发现了一个问题:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ORA--22992:无法使用远程表选择的LOB定位器，database link</div></pre></td></tr></table></figure></p><p>出现这个问题是因为跨库连接查询的数据表存在CLOB、或则BLOB类型的字段。需要注意:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1、不能使用select * from x</div><div class="line">2、不能将blob、clob类型的字段出现在脚本中。</div></pre></td></tr></table></figure></p><p>解决方案有两种,第一种:select X.name的形式,去掉blob类型的字段,这种方法不是非常恰当(除非不需要blob类型的字段)<br>第二种方案:使用零时表,之后把远程的含BLOB字段的表导入到零时表中,再导入到表<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">global</span> <span class="keyword">temporary</span> <span class="keyword">table</span> demo_temp <span class="keyword">as</span> <span class="keyword">select</span> * <span class="keyword">from</span> demo;</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> demo_temp <span class="keyword">select</span> * <span class="keyword">from</span> demo@D_LINK;</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> demo <span class="keyword">select</span> * <span class="keyword">from</span> demo_temp;</div><div class="line"><span class="keyword">commit</span>;</div></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> work </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oracle </tag>
            
            <tag> dblink </tag>
            
            <tag> hibernate </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Oracle之物化视图</title>
      <link href="/2015/04/14/Oracle%E4%B9%8B%E7%89%A9%E5%8C%96%E8%A7%86%E5%9B%BE/"/>
      <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;项目中,物料的摘要字段是通过视图拼接各个基础字段形成的,单条查询并不会存在性能问题。但是考虑到物料的结构化,对摘要进行搜索的时候,如果物料库的大小以量级的大小增加,那么性能将是一个严重的问题。单纯的视图优化(索引等)并不能根本上解决该问题。经过一些思考,决定采用物化视图的方式来解决。</p><h2 id="物化视图概述"><a href="#物化视图概述" class="headerlink" title="物化视图概述"></a>物化视图概述</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;物化视图(material view)是相对于普通视图而言的,普通的视图是虚拟表,本质上是DBMS转换为对视图SQL语句的查询,性能上没有好处。物化视图可以看成是一种特殊的物理表,他包括一个查询结果的数据库对象,可以是远程数据库的本地副本,也可以是基于数据基本求和的汇总表。物化视图存储基于远程的数据(本地可以以),也被称为快照。<br><a id="more"></a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;物化视图可以查询表,视图和其他物化视图.</p><h2 id="物化视图分类"><a href="#物化视图分类" class="headerlink" title="物化视图分类"></a>物化视图分类</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;物化视图一般情况下有三种:包含聚集的物化视图、只包含连接的物化视图、嵌套的物化视图。不过这种分类的方式并不是从其特点上来进行分类的,不利于理解。下面看另几种分类方式:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">1、刷新方式:  FAST/COMPLETE/FORCE</div><div class="line"></div><div class="line">2、刷新时间:  ON DEMAND/ON COMMIT</div><div class="line"></div><div class="line">3、是否可更新: UPDATABLE/READ ONLY</div><div class="line"></div><div class="line">4、是否支持查询重写: ENABLE QUERY REWRITE/DISABLEQUERY REWRITE</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;默认的情况下,Oracle的刷新模式为FORCE何DEMAND </p><h2 id="创建方式"><a href="#创建方式" class="headerlink" title="创建方式"></a>创建方式</h2><p>物化视图的创建有两种方式BUILD IMMEDIATE 和 BUILD DEFERRED两种。</p><p>BUILD IMMEDIATE是在创建视图的时候就生成数据.</p><p>BUILD DEFERRED则是在创建的时候不生成数据,以后根据需要生成数据,Oracle默认是按照BUILD IMMEDIATE方式创建的。这个仅仅是说了视图的创建方式,后续介绍完视图的相关特点之后,再介绍如何完整的创建一个物化视图。 </p><h2 id="刷新模式"><a href="#刷新模式" class="headerlink" title="刷新模式"></a>刷新模式</h2><p>按刷新模式来区分物化视图类别是比较常规合理的方式。这里的刷新模式包含两个方面的内容:刷新方式和刷新时间,以刷新时间为主。</p><p>前面也说了,物化视图的刷新方式有两种ON COMMIT 和 ON DEMAND</p><p>ON COMMIT指的是当基表一旦有了commit(事务提交),就会立刻更新物化视图,使得数据和物化视图一致,但是值得注意的是对于基表来说,平常的commit操作,在设置物化视图刷新方式为ON COMMIT之后速度会大大降低,实际开发中基本不纳入考虑范围。</p><p>ON DEMAND顾名思义,仅在该物化视图需要刷新的时候才进行刷新,我们可以手工的通过DBMS.MVIEW.REFRESH的方法进行刷新(编写存储过程),也可以通过JOB定时任务进行刷新,甚至可以编写脚本定时更新物化视图,保证其数据和基本数据保持一致。</p><p>前面提及了物化视图的三种刷新方式,COMPLETE、FAST、FORCE。这其实是物化视图在刷新时生成数据的方式。</p><ol><li><p>完全刷新 (COMPLETE): 会先删除物化视图中的数据,在重新生成数据。</p></li><li><p>快速刷新 (FAST): 采用增量刷新的方式,只将上次刷新以后对基表进行的所有操作刷新到物化视图中去。FAST刷新方式,必须建立基于主表的视图日志。</p></li><li><p>FROCE方式: 自动判断是否满足增量刷新方式,满足则进行增量刷新,反之进行完全刷新。 </p></li></ol><h2 id="查询重写"><a href="#查询重写" class="headerlink" title="查询重写"></a>查询重写</h2><p>包括ENBLE QUERY REWRITE 和DISABLE QUERY REWRITE,指出物化视图是否支持查询重写。查询重写指的是当对物化视图的基表进行查询时,Oracle会自动判断能否通过查询查询物化视图得到数据,如果可以则避免了聚集和连接操作,直接从物化视图中查询,效率会块很多。默认情况不支持查询重写。 </p><h2 id="创建物化视图"><a href="#创建物化视图" class="headerlink" title="创建物化视图"></a>创建物化视图</h2><p>了解上上述关于物化视图的一些知识,下面来看看如何创建物化视图吧。工具选择PL/SQL。</p><p>物化视图创建参数:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">BUILD -- 创建方式</div><div class="line">REFRESH -- 刷新(获取数据房还是)</div><div class="line">ON(ON DEMAND)--刷新方式</div><div class="line">START WITH-- 通知数据库完成从主表到本地表第一次复制的时间</div><div class="line">NEXT-- 说明刷新的时间间隔</div><div class="line">ENBALE QUERY REWRITE -- 是否支持查询重写</div></pre></td></tr></table></figure></p><p>简单的例子:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--创建基表</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">TEST</span>(</div><div class="line"> order_id <span class="built_in">varchar</span>(<span class="number">20</span>),</div><div class="line"> job_id <span class="built_in">varchar</span>(<span class="number">20</span>) PRIMARY <span class="keyword">KEY</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">--创建基表日志</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">MATERIALIZED</span> <span class="keyword">VIEW</span> <span class="keyword">LOG</span> <span class="keyword">ON</span> <span class="keyword">TEST</span> <span class="keyword">WITH</span> <span class="keyword">ROWID</span>,<span class="keyword">SEQUENCE</span>(job_id,order_id) <span class="keyword">INCLUDING</span> <span class="keyword">NEW</span> <span class="keyword">VALUES</span>;</div><div class="line"></div><div class="line"><span class="comment">--创建物化视图</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">MATERIALIZED</span> <span class="keyword">VIEW</span> MV_TEST</div><div class="line"><span class="keyword">BUILD</span> <span class="keyword">IMMEDIATE</span><span class="comment">--默认,创建时生成数据</span></div><div class="line"><span class="keyword">REFRESH</span> <span class="keyword">FAST</span><span class="comment">--FAST必须创建基表日志</span></div><div class="line"><span class="keyword">ON</span> <span class="keyword">DEMAND</span></div><div class="line"><span class="keyword">START</span> <span class="keyword">WITH</span> <span class="keyword">SYSDATE</span> <span class="comment">--第一次刷新时间</span></div><div class="line"><span class="keyword">NEXT</span> <span class="keyword">SYSDATE</span> + <span class="number">1</span> <span class="comment">--以后每一天刷新一次</span></div><div class="line"><span class="keyword">AS</span> </div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">TEST</span></div></pre></td></tr></table></figure></p><p>实例2:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">MATERIALIZED</span> <span class="keyword">VIEW</span> MM_TOGETHER_MATERIALIZED</div><div class="line"><span class="keyword">REFRESH</span> <span class="keyword">COMPLETE</span> <span class="keyword">ON</span> <span class="keyword">DEMAND</span></div><div class="line"><span class="keyword">START</span> <span class="keyword">WITH</span> <span class="keyword">TO_DATE</span>(<span class="string">'25-03-2015 11:12:09'</span>, <span class="string">'DD-MM-YYYY HH24:MI:SS'</span>) <span class="keyword">NEXT</span> <span class="keyword">SYSDATE</span> + <span class="number">5</span> </div><div class="line"><span class="keyword">AS</span></div><div class="line"><span class="keyword">SELECT</span></div><div class="line">  material.id <span class="keyword">id</span>,</div><div class="line">  <span class="keyword">REPLACE</span> (</div><div class="line">WMSYS.WM_CONCAT (av. <span class="keyword">VALUE</span> || U .unitname),</div><div class="line"><span class="string">','</span>,</div><div class="line"><span class="string">'；'</span></div><div class="line">  )  || <span class="string">' '</span> || material.materialname || <span class="string">' '</span> || material.materialcode || <span class="string">' '</span> || material.remark || <span class="string">' '</span> || CATEGROY.categoryname together</div><div class="line"><span class="keyword">FROM</span></div><div class="line">  mm_attrvalue av,</div><div class="line">  mm_unit U,</div><div class="line">  MM_MATERIALMNG material,</div><div class="line">  MM_MATERIALCATEGORY categroy</div><div class="line"><span class="keyword">WHERE</span></div><div class="line">  material. <span class="keyword">ID</span> = av.materialid(+)</div><div class="line"><span class="keyword">AND</span> av.unitid = U . <span class="keyword">ID</span> (+)</div><div class="line"><span class="keyword">AND</span> CATEGROY.id = MATERIAL.CATEGORYID</div><div class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></div><div class="line">(</div><div class="line">   MATERIAL.ID,</div><div class="line">   material.materialname,</div><div class="line">   material.materialcode,</div><div class="line">   material.remark,</div><div class="line">   CATEGROY.categoryname</div><div class="line">);</div></pre></td></tr></table></figure></p><h2 id="删除物化视图"><a href="#删除物化视图" class="headerlink" title="删除物化视图"></a>删除物化视图</h2><p>删除物化视图及物化视图日志的时候传统的Drop语句不起作用,需要使用如下语句:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DROP</span> <span class="keyword">MATERIALIZED</span> <span class="keyword">VIEW</span> <span class="keyword">LOG</span> <span class="keyword">ON</span> GG_ZLX_ZHU@TOCPEES;</div><div class="line"><span class="keyword">DROP</span> <span class="keyword">MATERIALIZED</span> <span class="keyword">VIEW</span> GG_ZLX_ZHU;</div></pre></td></tr></table></figure></p><h2 id="存储过程刷新"><a href="#存储过程刷新" class="headerlink" title="存储过程刷新"></a>存储过程刷新</h2><p>上面提及了可以通过DBMS.MVIEW.REFRESH来刷新物化视图。而且根据一些业务场景的需要,可能不定时刷新,所以不能是JOB,而且如果数量多也不能一个个刷新。编写的存储过程如下:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">PROCEDURE</span> P_MVIEW_REFRESH <span class="keyword">AS</span></div><div class="line"></div><div class="line"><span class="keyword">BEGIN</span> </div><div class="line"></div><div class="line">DBMS_MVIEW.refresh(<span class="string">'MM_TOGETHER_MATERIALIZED,MM_MMDESCRIPTION_MATERIALIZED'</span>,<span class="string">'cc'</span>);</div><div class="line"></div><div class="line"><span class="keyword">END</span>;</div></pre></td></tr></table></figure></p><p>第一个参数为物化视图名称,多个以”,”分隔,第二个参数为每个视图对应的刷新方式(f:增量刷新,c:完全刷新,?:强制刷新)</p><p>之后即可在命令窗口中通过 exec P_MVIEW_REFRESH即可执行该存储过程。 </p>]]></content>
      
      <categories>
          
          <category> work </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oracle </tag>
            
            <tag> 物化视图 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>像极客一样去写作~</title>
      <link href="/2015/04/12/hexo/"/>
      <content type="html"><![CDATA[<p>写博客也有很长一段时间了,各个平台都有过相当时间的尝试。CSDN-&gt;开源中国-&gt;博客园-&gt;SAE(Wordpress)~~~~回顾一下,在CSDN的时间是最长的,从大学到毕业吧,那时候的文章也是初级的,当做一些学习笔记,积累了不少人气,也挺怀恋的:<br><a id="more"></a><br><img src="http://kiritor.github.io/img/CSDN.png" alt="CSDN"><br>之后觉得CSDN越来越趋向商业化,就滋生了创建自己的独立博客的想法,期间也去开源中国,博客园尝试过,都不大理想,加之自己也开始做前端这块的工作(苦逼),觉得更有必要搭建自己的独立博客了,接下来就是在SAE有了自己的独立博客(仿简书网,花了自己很大的心血的):<br><img src="http://kiritor.github.io/img/SAE.png" alt="SAE"><br><img src="http://kiritor.github.io/img/SAE2.png" alt="SAE"><br>自己在SAE上花了很多功夫美化了很多的东西,但是时代在变迁,wordpress搭建的博客慢慢已经跟不上潮流了.现阶段流行的是静态博客(Node.js、go语言搭建)。简单来说静态博客有如下的好处:</p><p>####1、高效的性能.</p><p>####2、无需数据库支持.</p><p>####3、markdown语法,极客方式的写作.</p><p>####4、备份,迁移更加简单.<br>因此笔者纠结了很久,觉得转向这一阵营(比较适合个人使用),这也是本站点的由来,有时间的话笔者会把本站点的搭建做一个教程。</p>]]></content>
      
      <categories>
          
          <category> front </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Go语言日志处理</title>
      <link href="/2015/04/10/Go%E8%AF%AD%E8%A8%80%E6%97%A5%E5%BF%97%E5%A4%84%E7%90%86/"/>
      <content type="html"><![CDATA[<p>Go语言有一个标准的库(log),提供了最基本的日志记录功能。</p>]]></content>
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> log </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Golang操作MySQL数据库,使用mymysql驱动</title>
      <link href="/2015/04/09/Golang%E6%93%8D%E4%BD%9CMySQL%E6%95%B0%E6%8D%AE%E5%BA%93-%E4%BD%BF%E7%94%A8mymysql%E9%A9%B1%E5%8A%A8/"/>
      <content type="html"><![CDATA[<p>玩golang也有几周了,了解了基本的语法之后,做了一个简单的webdemo(反射、数据库操作、路由等)，对于系统来说很多都离不开数据库。此篇文章就是对golang如何进行数据库(mysql)操作进行一下尝试,使用的数据库驱动为mymysql</p><h2 id="MyMySQL驱动"><a href="#MyMySQL驱动" class="headerlink" title="MyMySQL驱动"></a>MyMySQL驱动</h2><p>MyMySQL的原作者是波兰的<a href="https://github.com/ziutek/mymysql" target="_blank" rel="external">ziutek</a>,他根据mysql的协议标准使用go语言实现了mymysql包,该包可以用在mysql4.1或更高的版本上,且在5.x系列版本上经过了项目的实际验证。<br><a id="more"></a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装mymysql包必须要先安装如下包:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">go get github.com/ziutek/mymysql/thrsafe</div><div class="line">go get github.com/ziutek/mymysql/autorc</div><div class="line">go get github.com/ziutek/mymysql/godrv</div><div class="line">...</div></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">go get github.com/ziutek/mymysql</div></pre></td></tr></table></figure><p>打开gopath目录下的mymysql包可以看见如下的几部分:</p><p>####1、mysql:go实现的mysql客户端(没有额外的依赖模块)</p><p>####2、native:线程不安全的引擎</p><p>####3、thrsafe:线程安全的引擎</p><p>####4、autorc：自动重新连接接口</p><p>####5、godrv:go提供的database/sql的实现<br>OK,也就是说,使用mymysql驱动,我们可以灵活多样的操作mysql数据库了,下面看一些实际的例子。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>上面已经说了,mymysql提供了5个子包,我们可以选择灵活的搭配来操作数据库,例如线程安全与非线程安全(到底如何选择这点是基于业务是否要求多线程,线程安全必然更加耗费性能)。</p><h2 id="mysql-thrsafe-native"><a href="#mysql-thrsafe-native" class="headerlink" title="mysql+thrsafe/native"></a>mysql+thrsafe/native</h2><p>首先尝试一下mysql子包的用法,通过查阅文档,编写的代码如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">//<span class="string">"github.com/ziutek/mymysql/autorc"</span>  //自动连接</div><div class="line">    <span class="string">"github.com/ziutek/mymysql/mysql"</span></div><div class="line">    _ <span class="string">"github.com/ziutek/mymysql/native"</span> // 线程不安全</div><div class="line">    // _ <span class="string">"github.com/ziutek/mymysql/thrsafe"</span> // 线程安全</div><div class="line">)</div><div class="line"></div><div class="line">func <span class="function"><span class="title">main</span></span>() &#123;</div><div class="line">    //得到一个连接</div><div class="line">    db := mysql.New(<span class="string">"tcp"</span>, <span class="string">""</span>, <span class="string">"127.0.0.1:3306"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>, <span class="string">"webdemo"</span>)</div><div class="line">    //建立连接</div><div class="line">    err := db.Connect()</div><div class="line">    <span class="keyword">if</span> err != nil &#123;</div><div class="line">        panic(err)</div><div class="line">    &#125;</div><div class="line">    //查询</div><div class="line">    rows, result, err := db.Query(<span class="string">"select * from user"</span>)</div><div class="line">    <span class="keyword">if</span> err != nil &#123;</div><div class="line">        panic(err)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> _, row := range rows &#123;</div><div class="line">        fmt.Println(row.Str(0)+<span class="string">":"</span>+row.Str(1)+<span class="string">":"</span>+row.Str(2))  //打印</div><div class="line">    &#125;</div><div class="line">fmt.Println(result.AffectedRows())  //影响行数</div><div class="line">fmt.Println(result.Message())</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>上述代码只是一个非常简单的操作,详细的细节处理(预处理,元数据),可以查阅文档。</p><h2 id="database-sql-godrv"><a href="#database-sql-godrv" class="headerlink" title="database/sql+godrv"></a>database/sql+godrv</h2><p>mymysql也提供了golang原生的操作mysql的实现,使用这种方式的兼容性更加可靠,也是推荐的做法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line">import (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"database/sql"</span></div><div class="line">    <span class="string">"github.com/ziutek/mymysql/godrv"</span></div><div class="line">)</div><div class="line">// 用户结构</div><div class="line"><span class="built_in">type</span> User struct &#123;</div><div class="line">    uid int</div><div class="line">    username string</div><div class="line">    password string</div><div class="line">&#125;</div><div class="line">func <span class="function"><span class="title">main</span></span>() &#123;</div><div class="line">    // 设置连接编码</div><div class="line">    godrv.Register(<span class="string">"SET NAMES utf8"</span>)</div><div class="line">    // 连接数据库</div><div class="line">    db, err := sql.Open(<span class="string">"mymysql"</span>, <span class="string">"tcp:127.0.0.1:3306*webdemo/root/root"</span>)</div><div class="line">    <span class="keyword">if</span> err != nil &#123;</div><div class="line">        panic(err)</div><div class="line">    &#125;</div><div class="line">    defer db.Close()</div><div class="line">    // 插入数据</div><div class="line">    stmt, err := db.Prepare(<span class="string">"insert into user values(null, ?, ?)"</span>)</div><div class="line">    <span class="keyword">if</span> err != nil &#123;</div><div class="line">        panic(err)</div><div class="line">    &#125;</div><div class="line">    defer stmt.Close()</div><div class="line">    // sql参数</div><div class="line">    result, err := stmt.Exec(<span class="string">"LCore"</span>, <span class="string">"LCore"</span>)</div><div class="line">    <span class="keyword">if</span> err != nil &#123;</div><div class="line">        panic(err)</div><div class="line">    &#125;</div><div class="line">    // 获取影响的行数</div><div class="line">    affect, err := result.RowsAffected()</div><div class="line">    <span class="keyword">if</span> err != nil &#123;</div><div class="line">        panic(err)</div><div class="line">    &#125;</div><div class="line">    fmt.Printf(<span class="string">"%d\n"</span>, affect)</div><div class="line">    // 获取自增id</div><div class="line">    id, err := result.LastInsertId()</div><div class="line">    <span class="keyword">if</span> err != nil &#123;</div><div class="line">        panic(err)</div><div class="line">    &#125;</div><div class="line">    fmt.Printf(<span class="string">"%d\n"</span>, id)</div><div class="line">    // 查询数据</div><div class="line">    rows, err := db.Query(<span class="string">"select * from user"</span>)</div><div class="line">    <span class="keyword">if</span> err != nil &#123;</div><div class="line">        panic(err)</div><div class="line">    &#125;</div><div class="line">    defer rows.Close()</div><div class="line">    // 获取的用户</div><div class="line">    users := []User&#123;&#125;</div><div class="line">    // 读取数据</div><div class="line">    <span class="keyword">for</span> rows.<span class="function"><span class="title">Next</span></span>() &#123;</div><div class="line">        user := User&#123;&#125;</div><div class="line">        err := rows.Scan(&amp;user.uid, &amp;user.username, &amp;user.password)</div><div class="line">        <span class="keyword">if</span> nil != err &#123;</div><div class="line">            panic(err)</div><div class="line">        &#125;</div><div class="line">        users = append(users, user)</div><div class="line">    &#125;</div><div class="line">    // 显示用户信息</div><div class="line">    <span class="keyword">for</span> _, user := range users &#123;</div><div class="line">        fmt.Printf(<span class="string">"%d, %s, %s\n"</span>, user.uid, user.username, user.password)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="事务处理"><a href="#事务处理" class="headerlink" title="事务处理"></a>事务处理</h2><p>mymysql驱动同样支持事务处理,一个简单的例子(基于mysql子包):<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"github.com/ziutek/mymysql/mysql"</span></div><div class="line">    //_ <span class="string">"github.com/ziutek/mymysql/native"</span> // 线程不安全</div><div class="line">     _ <span class="string">"github.com/ziutek/mymysql/thrsafe"</span> // 线程安全</div><div class="line">)</div><div class="line"></div><div class="line">func <span class="function"><span class="title">main</span></span>() &#123;</div><div class="line">    db := mysql.New(<span class="string">"tcp"</span>, <span class="string">""</span>, <span class="string">"127.0.0.1:3306"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>, <span class="string">"webdemo"</span>)</div><div class="line"></div><div class="line">    err := db.Connect()</div><div class="line">    <span class="keyword">if</span> err != nil &#123;</div><div class="line">        panic(err)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    rows, result, err := db.Query(<span class="string">"select * from user"</span>)</div><div class="line">    <span class="keyword">if</span> err != nil &#123;</div><div class="line">        panic(err)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> _, row := range rows &#123;</div><div class="line">        fmt.Println(row.Str(0)+<span class="string">":"</span>+row.Str(1)+<span class="string">":"</span>+row.Str(2))</div><div class="line">    &#125;</div><div class="line">fmt.Println(result.AffectedRows())</div><div class="line">fmt.Println(result.Message())</div><div class="line">ins,err:=db.Prepare(<span class="string">"insert into user values(?,?,?)"</span>)</div><div class="line"><span class="keyword">if</span> err!=nil &#123;</div><div class="line">fmt.Println(err)</div><div class="line">&#125;</div><div class="line">//开启事务,db处于lock状态,只有当事务提交或者回滚之后才会解锁</div><div class="line">tr,_:=db.Begin()</div><div class="line">//处于事务且线程安全</div><div class="line">/**</div><div class="line">      start方法属于db,因此下面两条插入语句都不会执行</div><div class="line">    */</div><div class="line">go <span class="function"><span class="title">func</span></span>()&#123;</div><div class="line">tr.Start(<span class="string">"insert user valies(50,'LCore','LCore')"</span>)</div><div class="line">&#125;()</div><div class="line">tr.Start(<span class="string">"insert user valies(70,'LCore','LCore')"</span>)</div><div class="line">tr.Do(ins).Run(60,<span class="string">"LCore"</span>,<span class="string">"LCore"</span>)</div><div class="line">tr.Commit()   //事务提交</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="Type-Mapping"><a href="#Type-Mapping" class="headerlink" title="Type Mapping"></a>Type Mapping</h2><p>我们可以使用格式化的方式嵌入到查询sql中去,例如:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rows, res, err := db.Query(<span class="string">"select * from X where id &gt; %d"</span>, id)</div></pre></td></tr></table></figure></p><p>mymysql的查询结果对应在[]byte类型中,因此需要自己转换为对应的类型<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fmt.Println(string(rows[0][1].([]byte)))</div></pre></td></tr></table></figure></p><p>或者使用Str函数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">fmt.Println(rows[0].Str(1))</div><div class="line">fmt.Pritnln(rows[0].int(1))</div></pre></td></tr></table></figure></p><p>以上的例子都是返回结果矩阵中的第0行,第一列(下标0开始),但是一般情况下,我们习惯于通过列名进行访问.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">name := res.Map(<span class="string">"name"</span>)</div><div class="line">fmt.Print(rows[0].Str(name))</div></pre></td></tr></table></figure></p><p>MySQL服务器映射/转换特定MySQL存储类型。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">         string  --&gt;  MYSQL_TYPE_STRING</div><div class="line">         []byte  --&gt;  MYSQL_TYPE_VAR_STRING</div><div class="line">    int8, uint8  --&gt;  MYSQL_TYPE_TINY</div><div class="line">  int16, uint16  --&gt;  MYSQL_TYPE_SHORT</div><div class="line">  int32, uint32  --&gt;  MYSQL_TYPE_LONG</div><div class="line">  int64, uint64  --&gt;  MYSQL_TYPE_LONGLONG</div><div class="line">      int, uint  --&gt;  protocol <span class="built_in">integer</span> <span class="built_in">type</span> <span class="built_in">which</span> match size of int</div><div class="line">           bool  --&gt;  MYSQL_TYPE_TINY</div><div class="line">        <span class="built_in">float</span>32  --&gt;  MYSQL_TYPE_FLOAT</div><div class="line">        <span class="built_in">float</span>64  --&gt;  MYSQL_TYPE_DOUBLE</div><div class="line">      time.Time  --&gt;  MYSQL_TYPE_DATETIME</div><div class="line">mysql.Timestamp  --&gt;  MYSQL_TYPE_TIMESTAMP</div><div class="line">     mysql.Date  --&gt;  MYSQL_TYPE_DATE</div><div class="line">  time.Duration  --&gt;  MYSQL_TYPE_TIME</div><div class="line">     mysql.Blob  --&gt;  MYSQL_TYPE_BLOB</div><div class="line">            nil  --&gt;  MYSQL_TYPE_NULL</div></pre></td></tr></table></figure></p><p>收到结果MySQL存储类型被映射到/ mymysql类型如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">                             TINYINT  --&gt;  int8</div><div class="line">                    UNSIGNED TINYINT  --&gt;  uint8</div><div class="line">                            SMALLINT  --&gt;  int16</div><div class="line">                   UNSIGNED SMALLINT  --&gt;  uint16</div><div class="line">                      MEDIUMINT, INT  --&gt;  int32</div><div class="line">    UNSIGNED MEDIUMINT, UNSIGNED INT  --&gt;  uint32</div><div class="line">                              BIGINT  --&gt;  int64</div><div class="line">                     UNSIGNED BIGINT  --&gt;  uint64</div><div class="line">                               FLOAT  --&gt;  <span class="built_in">float</span>32</div><div class="line">                              DOUBLE  --&gt;  <span class="built_in">float</span>64</div><div class="line">                             DECIMAL  --&gt;  <span class="built_in">float</span>64</div><div class="line">                 TIMESTAMP, DATETIME  --&gt;  time.Time</div><div class="line">                                DATE  --&gt;  mysql.Date</div><div class="line">                                TIME  --&gt;  time.Duration</div><div class="line">                                YEAR  --&gt;  int16</div><div class="line">    CHAR, VARCHAR, BINARY, VARBINARY  --&gt;  []byte</div><div class="line"> TEXT, TINYTEXT, MEDIUMTEXT, LONGTEX  --&gt;  []byte</div><div class="line">BLOB, TINYBLOB, MEDIUMBLOB, LONGBLOB  --&gt;  []byte</div><div class="line">                                 BIT  --&gt;  []byte</div><div class="line">                           SET, ENUM  --&gt;  []byte</div><div class="line">                                NULL  --&gt;  nil</div></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mymysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Golang Import的理解</title>
      <link href="/2015/04/03/Golang-Import%E7%9A%84%E7%90%86%E8%A7%A3/"/>
      <content type="html"><![CDATA[<p>初学go不久,在使用beego的时候发现了不同的import方式,于是查阅相关资料,做个备注。<br>初期我们编写go语言的时候经常使用import这个命令来导入包文件,导入的方式一般如下方式:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div></pre></td></tr></table></figure></p><a id="more"></a><p>之后通过如下的方式调用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fmt.Println(<span class="string">"go"</span>)</div></pre></td></tr></table></figure></p><p>我们知道fmt是Go语言的标准库,他其实是去goroot下加载该模块。而且Go语言提供两种加载模块的方式:<strong>相对路径</strong>、绝对路径<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">import <span class="string">"./model"</span>    --相对路径,不推荐</div><div class="line">import <span class="string">"XXX/model"</span>  --个gopath/src/XXX下的model模块,最常见</div></pre></td></tr></table></figure></p><p>不过,在阅读某些开源项目时,会看到一些令人费解的import方式,下面来一一探寻下:</p><h1 id="点操作"><a href="#点操作" class="headerlink" title="点操作"></a>点操作</h1><p>我们有时候可以看到如下的导入方式<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import (. <span class="string">"fmt"</span>)</div><div class="line">......</div><div class="line">Println(<span class="string">"go"</span>)</div></pre></td></tr></table></figure></p><p>这个点操作的含义就是这个包导入之后,使用该包函数的使用可以省略前缀</p><h1 id="别名操作"><a href="#别名操作" class="headerlink" title="别名操作"></a>别名操作</h1><p>别名操作可以把包名换成一个容易记忆的名字(对于那些包名过长的)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import (f <span class="string">"fmt"</span>)</div><div class="line">...</div><div class="line">f.Println(<span class="string">"go"</span>)</div></pre></td></tr></table></figure></p><h1 id="“-”操作"><a href="#“-”操作" class="headerlink" title="“_”操作"></a>“_”操作</h1><p>这个操作比较令人费解,beego里面就有使用到(bee new xx生成的)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import (</div><div class="line">_ <span class="string">"beego_cms/routers"</span></div><div class="line"><span class="string">"github.com/astaxie/beego"</span></div><div class="line">)</div><div class="line"></div><div class="line">func <span class="function"><span class="title">main</span></span>() &#123;</div><div class="line">beego.Run()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>“_”操作其实是引入该包,但是并不直接使用包里面的函数,而是调用该包里面的init函数,如何理解这个问题?通过如下的图,来理解一下go包的加载机制:</p><p><center><img src="http://kiritor.github.io/img/go_import.png" alt="go_import"></center><br>程序的初始化和执行都起始于main包。如果main包还导入了其他包,那么就会在编译时将他们一次导入。同一个包只会被导入一次。当一个包被导入时,如果还包含了其他包,那么会先将其他包导入进来,然后在对这些包中的包及常量和变量进行初始化,接着执行init函数(如果有的话),依次类推。等所有的包都导入完了,就开始对main包中的包级常量和变量进行初始化,然后执行main包里面的init函数(若果有),最后执行main函数。</p><p>_操作只是将该包引入了,只初始化里面的init函数和一些变量,但是往往这些init函数里面是注册自己包里面的引擎,让外部可以方便的使用。和很多实现database/sql的一样,在init函数里面都是调用了sql.Register(name string,driver driver.Driver)注册自己,然后外部可以使用了。</p><p>原文地址:<a href="http://blog.beego.me/blog/2013/07/27/golang-import-shi-yong-ru-men/" target="_blank" rel="external">http://blog.beego.me/blog/2013/07/27/golang-import-shi-yong-ru-men/</a></p>]]></content>
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> import </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>jQuery中的冲突-noConfilic解决机制</title>
      <link href="/2015/04/02/jQuery%E4%B8%AD%E7%9A%84%E5%86%B2%E7%AA%81-noConfilic%E8%A7%A3%E5%86%B3%E6%9C%BA%E5%88%B6/"/>
      <content type="html"><![CDATA[<p>许多的JS框架类库都选择使用符号作为函数或变量名,而且在实际的项目开发中,使用模板语言的话有可能符号即为该模板语言的关键字。例如Veclocity模板语言,是关键字.与jQuery一起使用可能会存在冲突(页面中直接写jq代码,引入的js文件不存在该问题)。吐槽下为啥这么多js库喜欢用( is money?)。</p><p>   jQuery是使用符号作为函数或变量名最为典型的一个。在jQuery中,符号只是window.jQuery对象的一个引用,因此即使被删除,jQuery依然能保证整个类库的完整性。<br><a id="more"></a></p><p>   jQuery的设计充分考虑了多框架之间的引用冲突。我们可以使用jQuery.noConflict方法来轻松实现控制权的转交。</p><p>   在论述如何解决jQuery冲突之前,我们有必要先对noConflict函数做一个了解,解决冲突的方法就藏在里面。<br>jQuery.noConflict</p><p>jQuery.noConflict([removeAll]);</p><p>   缺省参数情况下:</p><p>   运行这个函数将变量$的控制权让渡给第一个实现它的库。在运行完这个函数之后,就只能使用jQuery变量访问jQuery对象(函数不带参数),例如jQuery(“div p”)。不过需要注意的是该函数必须在你导入jQuery文件之后,并且在导入另一个导致冲突的库”之前”使用。当然也应该在其他冲突库被使用之前,除非jQuery是最后一个导入的。</p><p>   当参数为true时,执行noConflict则会将$和jQuery对象本省的控制权全部移交给第一个产生他们的库。</p><p>   不过具体的移交机制是如何实现的呢?查阅源码即可发现,在jQuery源码中定义了两个私有变量<em>jQuery,</em>。具体如下截图:</p>   <center><img src="http://liangtao-wordpress.stor.sinaapp.com/uploads/2014/06/QQ截图20140618134225.png" alt=""></center><p>   容易理解的是,jQuery通过上面两个私有的变量映射了window环境下的jQuery和$两个对象,防止了变量被强行覆盖。一旦noConflict被调用,jquery可以通过<em>jQuery,</em>,jQuery,四者之间的差异,来决定控制权的移交方式,具体代码如下图:</p>   <center><img src="http://liangtao-wordpress.stor.sinaapp.com/uploads/2014/06/QQ截图20140618134652.png" alt=""></center><p>   接下来看看参数设定问题,如果deep没有设置,_覆盖了window,此时jQuery的别名失效了,但是jQuery变量未失效,仍可使用。此时如果有其他库或代码重新定义了$变量的话,其控制权就转交出去了。反之deep设置为true时，_jQuery进一步覆盖window.jQuery,此时和jQuery都将失效。</p><p>   这种操作的好处是,不管是框架混用还是jQuery多版本共存这种高度冲突的执行环境,由于noConflict的控制权移交机制,以及本身返回违背覆盖的私有变量jQuery对象,完全能够通过变量映射的方式解决冲突。<br>示例</p><p>   了解了jQuery内部解决冲突的实现方式,接下来看看一些实际的情况吧。</p><p>   1、将$引用的对象映射回原始的对象。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">jQuery.noConflict();</div><div class="line">// 使用 jQuery</div><div class="line">jQuery(<span class="string">"div p"</span>).hide();</div><div class="line">// 使用其他库的 $()</div><div class="line">$(<span class="string">"content"</span>).style.display = <span class="string">'none'</span>;</div></pre></td></tr></table></figure></p><p>   2、恢复使用别名$,然后创建并执行一个函数,在这个函数的作用域中仍然将$作为jQuery的别名来使用。在这个函数中,原来的$对象是无效的。这个函数对于大多数不依赖于其他库的插件都十分有效。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">jQuery.noConflict();</div><div class="line">(<span class="keyword">function</span>($) &#123; </div><div class="line">  $(<span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">    // 使用 $ 作为 jQuery 别名的代码</div><div class="line">  &#125;);</div><div class="line">&#125;)(jQuery);</div><div class="line">// 其他用 $ 作为别名的库的代码</div></pre></td></tr></table></figure></p><p>   3、创建一个新的别名用来在接下来的库中使用jQuery对象。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var j = jQuery.noConflict();</div><div class="line">// 基于 jQuery 的代码</div><div class="line">j(<span class="string">"div p"</span>).hide();</div><div class="line">// 基于其他库的 $() 代码</div><div class="line">$(<span class="string">"content"</span>).style.display = <span class="string">'none'</span>;</div></pre></td></tr></table></figure></p><p>   基于这种方式,所有的jQuery代码都通过j进行调用,避免了冲突的可能。</p><p>   4、完全将jQuery移到一个新的命名空间。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var dom = &#123;&#125;;</div><div class="line">dom.query = jQuery.noConflict(<span class="literal">true</span>);</div></pre></td></tr></table></figure></p><p>   结果:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 新 jQuery 的代码</div><div class="line">dom.query(<span class="string">"div p"</span>).hide();</div><div class="line">// 另一个库 $() 的代码</div><div class="line">$(<span class="string">"content"</span>).style.display = <span class="string">'none'</span>;</div><div class="line">// 另一个版本 jQuery 的代码</div><div class="line">jQuery(<span class="string">"div &gt; p"</span>).hide();</div></pre></td></tr></table></figure></p><h1 id="解决冲突方式"><a href="#解决冲突方式" class="headerlink" title="解决冲突方式"></a>解决冲突方式</h1><p> 冲突的方式无非3中情况：<br> 1、其他库先于jQuery引用(被占用).<br>  最简单的我们可以在任何地方调用jQuery.noConflict函数,之后使用jQuery()座位jQuery对象的制造工厂。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">jQuery.noConflict();       //将变量$的控制权移交给先导入的库</div><div class="line"> jQuery(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line"> jQuery(<span class="string">"p"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;   //使用jQuery变量 </div><div class="line"> </div><div class="line"> &#125;);</div><div class="line">&#125;);</div><div class="line">$(<span class="string">"pp"</span>).style.display=<span class="string">'none'</span>;   //其他库的调用</div></pre></td></tr></table></figure></p><p> 此外,如果你想确保jQuery不会与其他库冲突,但又想使用一个类似”$”的快捷方式,可以使用如下代码:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var <span class="variable">$mj</span>=jQuery.noConflict();       //自定义快捷变量</div><div class="line"> <span class="variable">$mj</span>(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line"> <span class="variable">$mj</span>(<span class="string">"p"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;   //使用jQuery变量 </div><div class="line"> </div><div class="line"> &#125;);</div><div class="line">&#125;);</div><div class="line">$(<span class="string">"pp"</span>).style.display=<span class="string">'none'</span>;   //其他库的调用</div></pre></td></tr></table></figure></p><p>如果你不想给jQuery自定义名称,却想使用$，有不与其他库冲突.可以有两种解决方式:<br> 其一:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">jQuery.noConflict();       </div><div class="line">jQuery(<span class="keyword">function</span>($)&#123;</div><div class="line">  $(<span class="string">"p"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;   //在函数内部继续使用</div><div class="line"> </div><div class="line">  &#125;);</div><div class="line">&#125;);</div><div class="line">$(<span class="string">"pp"</span>).style.display=<span class="string">'none'</span>;   //其他库的调用</div></pre></td></tr></table></figure></p><p>其二:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">jQuery.noConflict();       //将变量$控制权让渡</div><div class="line">(<span class="keyword">function</span>($)&#123;               //定义匿名函数形参为$</div><div class="line">$(<span class="function"><span class="title">function</span></span>()&#123;      //匿名函数内部均为jQuery的$</div><div class="line">           $(<span class="string">"p"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">           </div><div class="line">           &#125;);</div><div class="line">        &#125;);</div><div class="line">&#125;)(jQuery);                //执行匿名函数且传递实参jQuery</div><div class="line"> $(<span class="string">"pp"</span>).style.display=<span class="string">'none'</span>;   //其他库的调用</div></pre></td></tr></table></figure></p><p> 这是较为理想的方式,因为可以改变最少的代码来实现全面的兼容性<br> 2、其他库后于jQuery被引用<br>你可以参考上述做一些冲突解决的方法,其实其根本就不冲突,你可以使用jQuery变量做一些jQuery的处理工作。同时可以使用()方法作为其他库的快捷方式。<br> 3、不同版本jQuery、且有其他库<br>可以参考上述示例,将jQuery完全移到另一个命名空间。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var dom = &#123;&#125;;</div><div class="line">dom.query = jQuery.noConflict(<span class="literal">true</span>);</div><div class="line">// 新 jQuery 的代码</div><div class="line">dom.query(<span class="string">"div p"</span>).hide();</div><div class="line">// 另一个库 $() 的代码</div><div class="line">$(<span class="string">"content"</span>).style.display = <span class="string">'none'</span>;</div><div class="line">// 另一个版本 jQuery 的代码</div><div class="line">jQuery(<span class="string">"div &gt; p"</span>).hide();</div></pre></td></tr></table></figure></p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>   jQuery解决冲突的机制是十分灵活的,有了这些冲突解决方案,就可以在项目中安心的使用jQuery了。</p>]]></content>
      
      <categories>
          
          <category> front </category>
          
      </categories>
      
      
        <tags>
            
            <tag> noConfilic </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>jQuery对象、DOM对象?傻傻分不清楚</title>
      <link href="/2015/04/02/jQuery%E5%AF%B9%E8%B1%A1%E3%80%81DOM%E5%AF%B9%E8%B1%A1-%E5%82%BB%E5%82%BB%E5%88%86%E4%B8%8D%E6%B8%85%E6%A5%9A/"/>
      <content type="html"><![CDATA[<p>   初学jQuery时,经常分辨不清楚哪些是jQuery对象,哪些是DOM对象。这是十分不好的现象。必须明确区分何为jQuery对象、何为DOM对象,对于后续的学习、理解才更方便。</p><p>   先从DOM对象开始,之后在谈谈jQuery对象(jq对象基于DOM对象)。</p><h1 id="DOM、DOM对象"><a href="#DOM、DOM对象" class="headerlink" title="DOM、DOM对象"></a>DOM、DOM对象</h1><p>   DOM(Document Object Model,文档对象模型),DOM是W3C的标准。定义了访问HTML和XML文档的标准。<br>文档对象模型是中立于平台和语言的接口,允许程序和脚本动态的访问和更新文档的内容、结构以及样式,更具体来说就是我们可以通过js、jQuery代码动态的更新某个html元素的样式、属性等。<br><a id="more"></a><br>   W3C DOM标准分为3部分:</p><ol><li>核心DOM-针对任何结构化文档的标准模型。</li><li>XML DOM-针对XML文档的标准模型。</li><li><p>HTML DOM-针对HTML文档的标准模型。<br>这里我们关注的是HTML DOM以及其是如何获取、修改、添加或删除html元素(DOM对象)的。<br>DOM节点<br>根据W3C的HTML DOM标准,HTML文档中的所有内容都是节点:<br>1、整个文档是一个文档节点<br>2、每个HTML元素是一个元素节点<br>3、每个HTML属性是一个属性节点<br>4、注释是注释节点</p><h1 id="HTML-DOM节点树"><a href="#HTML-DOM节点树" class="headerlink" title="HTML DOM节点树"></a>HTML DOM节点树</h1><p>HTML DOM将HTML文档视作树结构。这种结构成为节点树:<br>一个实例：<br><center><img src="http://liangtao-wordpress.stor.sinaapp.com/uploads/2014/06/ct_htmltree.gif" alt="Dom树"></center><br>关于DOM的介绍就这么多了,详细了解的话可查阅W3CSCHOOL手册。</p><h1 id="DOM对象"><a href="#DOM对象" class="headerlink" title="DOM对象"></a>DOM对象</h1><p>简单的来说通过JavaScript中的getElementsByTagName或者getElementById来获取元素节点,得到的DOM元素就是DOM对象。DOM对象可以使用JavaScript中的方法,简单实例:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var obj = document.getElementById(<span class="string">"id"</span>);//获取DOM对象</div><div class="line">var ObjHTML = obj.innerHTML;                //使用js方法</div></pre></td></tr></table></figure></li></ol><h1 id="jQuery对象"><a href="#jQuery对象" class="headerlink" title="jQuery对象"></a>jQuery对象</h1><p>   jQuery对象就是通过jQuery包装DOM对象所产生的对象。</p><p>   需注意的是jQuery对象是jQuery独有的。如果一个对象是jQuery对象,那么就可以使用jQuery里的方法。</p><p>   一个简单的例子:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#foo"</span>).html();   //获取id为foo的元素内的html代码.html()为jQuery里的方法</div></pre></td></tr></table></figure></p><p>   该代码等价于:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">document.getElementById(<span class="string">"id"</span>).innerHTML</div></pre></td></tr></table></figure></p><h1 id="相互转换"><a href="#相互转换" class="headerlink" title="相互转换"></a>相互转换</h1><p>   核心提示:jQuery选择器得到的jquery对象和标准的DOM对象是两种不同的对象,jquery对象不能使用DOM对象的属性方法。同样的DOM对象也不能使用jquery对象的方法、属性。</p><p>   不过前面了解到,jquery对象本来就是DOM对象包装而来的,那么两者肯定是能够进行转换的。</p><p>   在讨论jQuery对象和DOM对象的相互转换之前,先约定好定义变量的风格。jquery对象在前面加上$，例如:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var <span class="variable">$test</span> = jQuery 对象;        //jquery变量</div><div class="line">var <span class="built_in">test</span> = DOM 对象;           //dom变量</div></pre></td></tr></table></figure></p><h2 id="jQuery对象-gt-DOM对象"><a href="#jQuery对象-gt-DOM对象" class="headerlink" title="jQuery对象-&gt;DOM对象"></a>jQuery对象-&gt;DOM对象</h2><p>   jQuery对象是不能使用DOM中的方法的,但是如果对jQuery对象的方法不熟悉,或者jQuery对象没有封装想要的方法,不得不使用DOM对象的时候,可以通过以下两种方式将jQuery对象转换为DOM对象。</p><p>   (1) jQuery对象是一个数组对象,可以通过[index]得到相应的DOM对象。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var <span class="variable">$vars</span> = $(<span class="string">"#vars"</span>);           //jQuery对象</div><div class="line">var <span class="built_in">test</span> = <span class="variable">$vars</span>[0];               //DOM对象</div><div class="line">console.info(test.checked);    //检查该对象是否选中</div></pre></td></tr></table></figure></p><p>   (2) 通过jQuery本身提供的get(index)方法返回DOM对象。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var <span class="variable">$vars</span> = $(<span class="string">"#vars"</span>);           //jQuery对象</div><div class="line">var <span class="built_in">test</span> = <span class="variable">$vars</span>.get(0);             //DOM对象</div><div class="line">console.info(test.checked);    //检查该对象是否选中</div></pre></td></tr></table></figure></p><h2 id="DOM对象-gt-jQuery对象"><a href="#DOM对象-gt-jQuery对象" class="headerlink" title="DOM对象-&gt;jQuery对象"></a>DOM对象-&gt;jQuery对象</h2><p>   对于一个DOM对象,只需要用$()将DOM对象包装起来就可以转换为jQuery对象了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var cr = document.getElementById(<span class="string">"id"</span>);     //DOM对象</div><div class="line">var <span class="variable">$cr</span> = $(cr);                            //jQuery对象</div></pre></td></tr></table></figure></p><p>   转换后,可以任意使用jQuery中的方法。</p><p>   通过以上方法可以实现DOM对象和jQuery对象的相互转换,但是一般情况下jQuery对象提供了一套更加完善的工具用于操作DOM,因此优选使用jQuery对象操作DOM是一个不错的选择。<br>示例<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;title&gt;jQuery对象和DOM对象&lt;/title&gt;</div><div class="line">    &lt;script src=<span class="string">"js/jquery-1.9.1.js"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;style <span class="built_in">type</span>=<span class="string">"text/css"</span>&gt;</div><div class="line">        body &#123;</div><div class="line">            text-align: center;</div><div class="line">        &#125;</div><div class="line">    &lt;/style&gt;</div><div class="line">    &lt;script&gt;</div><div class="line">/*使用原生js代码判断复选框是否被选中*/</div><div class="line">$(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">var <span class="variable">$cr</span>=$(<span class="string">"#cr"</span>);</div><div class="line">var cr = <span class="variable">$cr</span>.get(0);</div><div class="line"><span class="variable">$cr</span>.on(<span class="string">'click'</span>,<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line"><span class="keyword">if</span>(cr.checked)&#123;</div><div class="line">console.info(<span class="string">"感谢您的支持,你可以继续操作!"</span>);</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line">&#125;);</div><div class="line">/*使用jQuery的方式判断复选框是否被选中*/</div><div class="line">$(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">   var <span class="variable">$cr</span> = $(<span class="string">"#cr"</span>);</div><div class="line"><span class="variable">$cr</span>.on(<span class="string">'click'</span>,<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line"><span class="keyword">if</span>(<span class="variable">$cr</span>.is(<span class="string">":checked"</span>))&#123;</div><div class="line">alert(<span class="string">"通过jQuery方式选中"</span>);</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line">&#125;);</div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line"></div><div class="line">&lt;body&gt;</div><div class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"checkbox"</span> id=<span class="string">"cr"</span>/&gt;</div><div class="line">    &lt;label <span class="keyword">for</span>=<span class="string">"cr"</span>&gt;我同意该服务条款&lt;/label&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p><p>   控制台输出js选中,并弹出jquery选中的信息。</p>]]></content>
      
      <categories>
          
          <category> front </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DOM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>编写更好的jQuery的建议-转</title>
      <link href="/2015/04/02/%E7%BC%96%E5%86%99%E6%9B%B4%E5%A5%BD%E7%9A%84jQuery%E7%9A%84%E5%BB%BA%E8%AE%AE-%E8%BD%AC/"/>
      <content type="html"><![CDATA[<p>   最近学习JQuery,在<a href="http://blog.jobbole.com/" target="_blank" rel="external">伯乐在线</a>里面看到了一片非常不错的翻译文章,觉得对于新手来说非常实用,打算转载过来,自己也略作了一些修改,例如链式操作。<br>   文章出处:<a href="http://blog.jobbole.com/52770/" target="_blank" rel="external">http://blog.jobbole.com/52770/</a><br>   译文地址:<a href="http://flippinawesome.org/2013/11/25/writing-better-jquery-code/" target="_blank" rel="external">原文</a><br>   以下为翻译正文:</p><p>讨论jQuery和javascript性能的文章并不罕见。然而,本文我计划总结一些速度方面的技巧和我本人的一些建议,来提升你的jQuery和javascript代码。好的代码会带来速度的提升。快速渲染和响应意味着更好的用户体验。</p><p>   首先,在脑子里牢牢记住jQuery就是javascript。这意味着我们应该采用相同的编码惯例,风格指南和最佳实践。<br>   如果你是一个javascript新手,我建议您阅读《JavaScript初学者的最佳实践》,这是一篇高质量的javascript教程,接触jQuery之前最后先阅读。<br>   当你准备使用jQuery,我强烈建议你遵循下面这些指南:<br><a id="more"></a></p><h1 id="缓存变量"><a href="#缓存变量" class="headerlink" title="缓存变量"></a>缓存变量</h1><p>   要知道DOM的遍历是昂贵的,所以尽量将会重用的元素缓存到一个变量中。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 糟糕</div><div class="line">h = $(<span class="string">'#element'</span>).height();</div><div class="line">$(<span class="string">'#element'</span>).css(<span class="string">'height'</span>,h-20);</div><div class="line">// 建议</div><div class="line"><span class="variable">$element</span> = $(<span class="string">'#element'</span>);</div><div class="line">h = <span class="variable">$element</span>.height();</div><div class="line"><span class="variable">$element</span>.css(<span class="string">'height'</span>,h-20);</div></pre></td></tr></table></figure></p><h1 id="避免全局变量"><a href="#避免全局变量" class="headerlink" title="避免全局变量"></a>避免全局变量</h1><p>jQuery与javascript一样,一般来说,最好确保你的变量在函数作用域内。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 糟糕</div><div class="line"> </div><div class="line"><span class="variable">$element</span> = $(<span class="string">'#element'</span>);</div><div class="line">h = <span class="variable">$element</span>.height();</div><div class="line"><span class="variable">$element</span>.css(<span class="string">'height'</span>,h-20);</div><div class="line"> </div><div class="line">// 建议</div><div class="line"> </div><div class="line">var <span class="variable">$element</span> = $(<span class="string">'#element'</span>);</div><div class="line">var h = <span class="variable">$element</span>.height();</div><div class="line"><span class="variable">$element</span>.css(<span class="string">'height'</span>,h-20);</div></pre></td></tr></table></figure></p><h1 id="使用匈牙利命名法"><a href="#使用匈牙利命名法" class="headerlink" title="使用匈牙利命名法"></a>使用匈牙利命名法</h1><p>在变量前加$前缀,便于识别出jQuery对象。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 糟糕</div><div class="line"> </div><div class="line">var first = $(<span class="string">'#first'</span>);</div><div class="line">var second = $(<span class="string">'#second'</span>);</div><div class="line">var value = <span class="variable">$first</span>.val();</div><div class="line"> </div><div class="line">// 建议 - 在jQuery对象前加$前缀</div><div class="line"> </div><div class="line">var <span class="variable">$first</span> = $(<span class="string">'#first'</span>);</div><div class="line">var <span class="variable">$second</span> = $(<span class="string">'#second'</span>),</div><div class="line">var value = <span class="variable">$first</span>.val();</div></pre></td></tr></table></figure></p><h1 id="使用Var链-单Var模式"><a href="#使用Var链-单Var模式" class="headerlink" title="使用Var链(单Var模式)"></a>使用Var链(单Var模式)</h1><p>将多条var语句合并为一条语句,我建议将未复制的变量放到后面。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var</div><div class="line">  <span class="variable">$first</span> = $(<span class="string">'#first'</span>),</div><div class="line">  <span class="variable">$second</span> = $(<span class="string">'#second'</span>),</div><div class="line">  value = <span class="variable">$first</span>.val(),</div><div class="line">  k = 3,</div><div class="line">  cookiestring = <span class="string">'SOMECOOKIESPLEASE'</span>,</div><div class="line">  i,</div><div class="line">  j,</div><div class="line">  myArray = &#123;&#125;;</div></pre></td></tr></table></figure></p><h1 id="‘on’附加事件"><a href="#‘on’附加事件" class="headerlink" title="‘on’附加事件"></a>‘on’附加事件</h1><p>在新版jQuery中,更短的on(‘click’)用来取代类似click()这样的函数。在之前的版本中on()就是bind()。自从jQuery1.7版本后,on()?附加事件的方式为处理程序的首选方式。然而,出于一致性考虑,你可以简单的全部使用on()方法。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">// 糟糕</div><div class="line"> </div><div class="line"><span class="variable">$first</span>.click(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">    <span class="variable">$first</span>.css(<span class="string">'border'</span>,<span class="string">'1px solid red'</span>);</div><div class="line">    <span class="variable">$first</span>.css(<span class="string">'color'</span>,<span class="string">'blue'</span>);</div><div class="line">&#125;);</div><div class="line"> </div><div class="line"><span class="variable">$first</span>.hover(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">    <span class="variable">$first</span>.css(<span class="string">'border'</span>,<span class="string">'1px solid red'</span>);</div><div class="line">&#125;)</div><div class="line"> </div><div class="line">// 建议</div><div class="line"><span class="variable">$first</span>.on(<span class="string">'click'</span>,<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">    <span class="variable">$first</span>.css(<span class="string">'border'</span>,<span class="string">'1px solid red'</span>);</div><div class="line">    <span class="variable">$first</span>.css(<span class="string">'color'</span>,<span class="string">'blue'</span>);</div><div class="line">&#125;)</div><div class="line"> </div><div class="line"><span class="variable">$first</span>.on(<span class="string">'hover'</span>,<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">    <span class="variable">$first</span>.css(<span class="string">'border'</span>,<span class="string">'1px solid red'</span>);</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><h1 id="精简代码"><a href="#精简代码" class="headerlink" title="精简代码"></a>精简代码</h1><p>一般来说,最好尽可能合并函数。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">// 糟糕</div><div class="line"> </div><div class="line"><span class="variable">$first</span>.click(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">    <span class="variable">$first</span>.css(<span class="string">'border'</span>,<span class="string">'1px solid red'</span>);</div><div class="line">    <span class="variable">$first</span>.css(<span class="string">'color'</span>,<span class="string">'blue'</span>);</div><div class="line">&#125;);</div><div class="line"> </div><div class="line">// 建议</div><div class="line"> </div><div class="line"><span class="variable">$first</span>.on(<span class="string">'click'</span>,<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">    <span class="variable">$first</span>.css(&#123;</div><div class="line">        <span class="string">'border'</span>:<span class="string">'1px solid red'</span>,</div><div class="line">        <span class="string">'color'</span>:<span class="string">'blue'</span></div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><h1 id="链式操作"><a href="#链式操作" class="headerlink" title="链式操作"></a>链式操作</h1><p>jQuery支持非常优雅的链式编码风格,不过需要注意的是进行链式编码的时候可能带来代码的难以阅读,添加缩进和换行来提高代码可读性是十分有必要的。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">// 糟糕</div><div class="line"> </div><div class="line"><span class="variable">$second</span>.html(value);</div><div class="line"><span class="variable">$second</span>.on(<span class="string">'click'</span>,<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">    alert(<span class="string">'hello everybody'</span>);</div><div class="line">&#125;);</div><div class="line"><span class="variable">$second</span>.fadeIn(<span class="string">'slow'</span>);</div><div class="line"><span class="variable">$second</span>.animate(&#123;height:<span class="string">'120px'</span>&#125;,500);</div><div class="line"> </div><div class="line">// 建议</div><div class="line"> </div><div class="line"><span class="variable">$second</span>.html(value);</div><div class="line"><span class="variable">$second</span>.on(<span class="string">'click'</span>,<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">    alert(<span class="string">'hello everybody'</span>);</div><div class="line">&#125;).fadeIn(<span class="string">'slow'</span>).animate(&#123;height:<span class="string">'120px'</span>&#125;,500);</div></pre></td></tr></table></figure></p><p>上述代码可读性也不是太好,我们可以考虑添加一条链就换行,如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">    //链式操作的时候添加紧缩和换行提高代码的可读性。</div><div class="line">    $(<span class="string">".has_children"</span>).on(<span class="string">'click'</span>, (<span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">               $(this).addClass(<span class="string">"highlight"</span>) //点击该元素的时候高亮</div><div class="line">               .children(<span class="string">"a"</span>)</div><div class="line">                .show()</div><div class="line">               .end() //显示该元素的子元素</div><div class="line">               .siblings()</div><div class="line">               .removeClass(<span class="string">"highlight"</span>) //获取兄弟元素并去掉其高亮(实际效果就是之高亮一个)</div><div class="line">            .children(<span class="string">"a"</span>)</div><div class="line">       .hide(); //隐藏兄弟元素的子元素</div><div class="line">   &#125;));</div><div class="line"> &#125;);</div></pre></td></tr></table></figure></p><p> 上述代码相较于之前,层次更加清晰了,可读性加强。不过如果你认为代码行数过多的话,可以考虑以功能块来进行换行。例如上述代码可改写成:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">         //链式操作的时候添加紧缩和换行提高代码的可读性。</div><div class="line">         $(<span class="string">".has_children"</span>).on(<span class="string">'click'</span>, (<span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">             $(this).addClass(<span class="string">"highlight"</span>) //点击该元素的时候高亮</div><div class="line">             .children(<span class="string">"a"</span>).show().end() //显示该元素的子元素</div><div class="line">             .siblings().removeClass(<span class="string">"highlight"</span>) //获取兄弟元素并去掉其高亮(实际效果就是之高亮一个)</div><div class="line">             .children(<span class="string">"a"</span>).hide(); //隐藏兄弟元素的子元素</div><div class="line">         &#125;));</div><div class="line">     &#125;);</div></pre></td></tr></table></figure></p><h1 id="选择短路求值"><a href="#选择短路求值" class="headerlink" title="选择短路求值"></a>选择短路求值</h1><p>短路求值是一个从左到右求值的表达式,用$$或||操作符。如果追求极致性能的话,你甚至可以考虑&amp;和|操作符。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// 糟糕</div><div class="line"> </div><div class="line"><span class="keyword">function</span> initVar(<span class="variable">$myVar</span>) &#123;</div><div class="line">    <span class="keyword">if</span>(!<span class="variable">$myVar</span>) &#123;</div><div class="line">        <span class="variable">$myVar</span> = $(<span class="string">'#selector'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">// 建议</div><div class="line"> </div><div class="line"><span class="keyword">function</span> initVar(<span class="variable">$myVar</span>) &#123;</div><div class="line">    <span class="variable">$myVar</span> = <span class="variable">$myVar</span> || $(<span class="string">'#selector'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="选择捷径"><a href="#选择捷径" class="headerlink" title="选择捷径"></a>选择捷径</h1><p>精简代码的其中一种方式便是利用编码的捷径。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">// 糟糕(其实也算不上糟糕啦)</div><div class="line"> </div><div class="line"><span class="keyword">if</span>(collection.length &gt; 0)&#123;..&#125;</div><div class="line"> </div><div class="line">// 建议</div><div class="line"> </div><div class="line"><span class="keyword">if</span>(collection.length)&#123;..&#125;</div><div class="line"></div><div class="line">繁重的操作中分离元素</div><div class="line"></div><div class="line">      如果你打算对DOM元素做大量操作(连续设置多个属性或css样式),建议首先分离元素然后在添加。</div><div class="line"></div><div class="line">// 糟糕</div><div class="line"> </div><div class="line">var</div><div class="line">    <span class="variable">$container</span> = $(<span class="string">"#container"</span>),</div><div class="line">    <span class="variable">$containerLi</span> = $(<span class="string">"#container li"</span>),</div><div class="line">    <span class="variable">$element</span> = null;</div><div class="line"> </div><div class="line"><span class="variable">$element</span> = <span class="variable">$containerLi</span>.first(); </div><div class="line">//... 许多复杂的操作</div><div class="line"> </div><div class="line">// better</div><div class="line"> </div><div class="line">var</div><div class="line">    <span class="variable">$container</span> = $(<span class="string">"#container"</span>),</div><div class="line">    <span class="variable">$containerLi</span> = <span class="variable">$container</span>.find(<span class="string">"li"</span>),</div><div class="line">    <span class="variable">$element</span> = null;</div><div class="line"> </div><div class="line"><span class="variable">$element</span> = <span class="variable">$containerLi</span>.first().detach(); </div><div class="line">//... 许多复杂的操作</div><div class="line"> </div><div class="line"><span class="variable">$container</span>.append(<span class="variable">$element</span>);</div></pre></td></tr></table></figure><h1 id="熟记技巧"><a href="#熟记技巧" class="headerlink" title="熟记技巧"></a>熟记技巧</h1><p>你可能对使用jQuery中的方法缺少经验,一定要查看文档,因为可能会有一个更好或更快的方法来使用,当然,这个过程需要积累。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 糟糕</div><div class="line"> </div><div class="line">$(<span class="string">'#id'</span>).data(key,value);</div><div class="line"> </div><div class="line">// 建议 (高效)</div><div class="line"> </div><div class="line">$.data(<span class="string">'#id'</span>,key,value);</div></pre></td></tr></table></figure></p><h1 id="使用子查询缓存的父元素"><a href="#使用子查询缓存的父元素" class="headerlink" title="使用子查询缓存的父元素"></a>使用子查询缓存的父元素</h1><p>jQuery最便利的就是查询了,不过正如前面所提到了,DOM遍历查询是一项昂贵的操作。典型的做法是缓存父元素并在选择子元素时重用这些缓存元素。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// 糟糕</div><div class="line"> </div><div class="line">var</div><div class="line">    <span class="variable">$container</span> = $(<span class="string">'#container'</span>),</div><div class="line">    <span class="variable">$containerLi</span> = $(<span class="string">'#container li'</span>),</div><div class="line">    <span class="variable">$containerLiSpan</span> = $(<span class="string">'#container li span'</span>);</div><div class="line"> </div><div class="line">// 建议 (高效)</div><div class="line"> </div><div class="line">var</div><div class="line">    <span class="variable">$container</span> = $(<span class="string">'#container '</span>),</div><div class="line">    <span class="variable">$containerLi</span> = <span class="variable">$container</span>.find(<span class="string">'li'</span>),</div><div class="line">    <span class="variable">$containerLiSpan</span>= <span class="variable">$containerLi</span>.find(<span class="string">'span'</span>);</div></pre></td></tr></table></figure></p><h1 id="避免通用选择符"><a href="#避免通用选择符" class="headerlink" title="避免通用选择符"></a>避免通用选择符</h1><p>将通用选择符放到后代选择符中,性能是非常糟糕的。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 糟糕</div><div class="line"> </div><div class="line">$(<span class="string">'.container &gt; *'</span>); </div><div class="line"> </div><div class="line">// 建议</div><div class="line"> </div><div class="line">$(<span class="string">'.container'</span>).children();</div></pre></td></tr></table></figure></p><h1 id="避免隐式通用选择符"><a href="#避免隐式通用选择符" class="headerlink" title="避免隐式通用选择符"></a>避免隐式通用选择符</h1><p>通用选择符有时是隐式的,不容易被发现,后续可能会造成严重后果。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 糟糕</div><div class="line"> </div><div class="line">$(<span class="string">'.someclass :radio'</span>); </div><div class="line"> </div><div class="line">// 建议</div><div class="line"> </div><div class="line">$(<span class="string">'.someclass input:radio'</span>);</div></pre></td></tr></table></figure></p><h1 id="优化选择符"><a href="#优化选择符" class="headerlink" title="优化选择符"></a>优化选择符</h1><p>例如,id选择符是唯一的,所以没有必要画蛇添足的添加额外的选择符。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 糟糕</div><div class="line"> </div><div class="line">$(<span class="string">'div#myid'</span>); </div><div class="line">$(<span class="string">'div#footer a.myLink'</span>);</div><div class="line"> </div><div class="line">// 建议</div><div class="line">$(<span class="string">'#myid'</span>);</div><div class="line">$(<span class="string">'#footer .myLink'</span>);</div></pre></td></tr></table></figure></p><h1 id="避免多个ID选择符"><a href="#避免多个ID选择符" class="headerlink" title="避免多个ID选择符"></a>避免多个ID选择符</h1><p>在此强调,id选择符是唯一的,不需要添加额外的选择符,更不需要多个后代ID选择符。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 糟糕</div><div class="line"> </div><div class="line">$(<span class="string">'#outer #inner'</span>); </div><div class="line"> </div><div class="line">// 建议</div><div class="line"> </div><div class="line">$(<span class="string">'#inner</span></div></pre></td></tr></table></figure></p><h1 id="坚持最新版本"><a href="#坚持最新版本" class="headerlink" title="坚持最新版本"></a>坚持最新版本</h1><p>新版本的通常更好:更轻量级,更高效。显然,你需要考虑你要支持的代码的兼容性。例如,2.0版本不支持ie 6/7/8。<br>摒弃弃用方法，关注每个新版本的废弃方法是非常重要的并尽量避免使用这些方法。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 糟糕 - live 已经废弃</div><div class="line"> </div><div class="line">$(<span class="string">'#stuff'</span>).live(<span class="string">'click'</span>, <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">  console.log(<span class="string">'hooray'</span>);</div><div class="line">&#125;);</div><div class="line"> </div><div class="line">// 建议</div><div class="line">$(<span class="string">'#stuff'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">  console.log(<span class="string">'hooray'</span>);</div><div class="line">&#125;);</div><div class="line">// 注：此处可能不当，应为live能实现实时绑定，delegate或许更合适</div></pre></td></tr></table></figure></p><h1 id="利用CDN"><a href="#利用CDN" class="headerlink" title="利用CDN"></a>利用CDN</h1><p>   谷歌的CDN能保证选择离用户最近的缓存并迅速响应。(使用谷歌CDN请自行搜索地址,此处地址已不能使用,推荐使用jquery官网提供的CDN地址)<br>组合jQuery和javascript原生代码</p><p>   如上所述,jQuery就是javascript,这意味着使用jquery能做的事,同样可以用原生代码来做。原生代码的可读性和可维护性可能不如jquery，而且代码量更大。但是也意味着高效(通常更接近底层代码可读性越差,性能越高)。牢记没有任何框架能比原生代码更小、更轻、更高效。</p><p>   鉴于vanilla和jQuery之间的性能差异,我强烈建议吸收两人的精华,使用(可能的话)和JQuery等价的原生代码。<br>最后忠告</p><p>   最后,我记录这篇文章的目的是提高jQuery性能和其他一些好的建议。如果你想深入研究对这个话题你会发现很多乐趣。记住,jQuery并非不可或缺,仅仅是一种选择。思考为什么使用它。DOM操作?ajax?模板?css动画?还是选择符引擎?或许javascript微型框架或jQuery的定制版是更好的选择,又或许大道至简,最终选择原生js也说不准呢。</p>]]></content>
      
      <categories>
          
          <category> front </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>前端素材集锦-转</title>
      <link href="/2015/04/02/%E5%89%8D%E7%AB%AF%E7%B4%A0%E6%9D%90%E9%9B%86%E9%94%A6-%E8%BD%AC/"/>
      <content type="html"><![CDATA[<h1 id="酷站集"><a href="#酷站集" class="headerlink" title="酷站集"></a>酷站集</h1><p>他山之石,可以攻玉,从别人的设计里面吸取灵感。</p><p>1.<a href="http://www.awwwards.com/" target="_blank" rel="external">Awwwards</a>–The awards for design, creativity and innovation on the internet</p><p>2.<a href="http://www.csswinner.com/" target="_blank" rel="external">CSS</a> Winner–CSS Award Gallery for Web Design Inspiration</p><p>3.<a href="http://www.bestcss.in/" target="_blank" rel="external">Best CSS</a>–Best CSS, Website Gallery, CSS Galleries, Best CSS Design Gallery</p><p>4.<a href="http://www.cssdesignawards.com/" target="_blank" rel="external">CSS Design Awards</a>–CSSDA ~ Web Awards ~ Reviews ~ Web Design Inspiration</p><p>5.<a href="http://www.sj63.com/" target="_blank" rel="external">设计路上</a>–::设计路上::酷站收藏大全,酷站欣赏,韩国网站欣赏,欧美网站,国内网站欣赏,设计欣赏，网页设计,网站建设<br>6.<a href="http://www.8bears.com/" target="_blank" rel="external">八只熊酷站</a>–八只熊酷站<em>酷站欣赏</em>优秀设计师访谈<em>设计配色教程</em>网页素材下载<em>作品欣赏</em>八只熊酷站</p><p>7.<a href="http://web.2008php.com/" target="_blank" rel="external">欧莱凯</a>–欧莱凯酷站欣赏_分享优秀网站网页设计作品</p><p>8.待续……<br><a id="more"></a></p><h1 id="设计师交流社区"><a href="#设计师交流社区" class="headerlink" title="设计师交流社区"></a>设计师交流社区</h1><p>交流创意,我秀我乐,开发分享,获得成长</p><p>1.<a href="http://www.zcool.com.cn/" target="_blank" rel="external">站酷</a>–中国最具人气的大型综合性设计网站，年轻创意人群的原创设计交流平台</p><p>2.<a href="http://www.uisdc.com/" target="_blank" rel="external">优设</a>–有着良好职业交流氛围的网页设计行业联盟，与优设哥、獠麝鸡、你丫才美工一起听讲座，聊设计</p><p>3.<a href="http://shijue.me/home" target="_blank" rel="external">视觉中国</a>–中国最具活力的视觉图片分享社区及创意设计产品社会化电商平台</p><p>4.<a href="http://www.68design.net/" target="_blank" rel="external">网页设计师联盟</a>–国内专业网页设计人才基地,为广大设计师提供学习交流空间</p><p>5.<a href="http://www.uisheji.com/" target="_blank" rel="external">UI设计网</a>–专业探讨交流用户界面设计、flat ui设计、ui界面设计、交互设计、用户体验，一起分享优秀的设计</p><p>6.<a href="http://www.guimobile.net/" target="_blank" rel="external">莫贝网</a>–为UI设计师提供移动设备、移动终端界面设计、交互设计、用户体验、用户研究、市场信息资讯的分享</p><p>7.<a href="http://www.boxui.com/" target="_blank" rel="external">盒子UI</a>–分享以用户体验为中心的设计</p><p>8.<a href="http://loveui.cn/" target="_blank" rel="external">LOVEUI</a>–专注UI设计,UI设计师作品分享,UI设计爱好者</p><p>9.<a href="http://www.ui63.com/" target="_blank" rel="external">UI路上</a>–是UI设计网站,提供游戏UI,UI设计,UI设计教程,游戏界面,GUI,WUI网站,图标等设计案例</p><p>10.<a href="http://www.fondcool.com/index.html" target="_blank" rel="external">方酷</a>–中国最具人气的App设计分享网站</p><p>11.<a href="http://www.cger.com.cn/" target="_blank" rel="external">CGER</a>–灵感是非常重要的东西，稍纵即逝，如果能随时随地的记下这些灵感、并能浏览和查看其他人随即迸发的灵感，是件很美妙的事情</p><p>12.<a href="http://www.zhisheji.com/" target="_blank" rel="external">致设计</a>–中国最大的电商设计师交流平台，是电商领域设计师们的福音、灵感库、素材库</p><p>13.待续……</p><h1 id="UED团队博客"><a href="#UED团队博客" class="headerlink" title="UED团队博客"></a>UED团队博客</h1><p>著名UED团队博客,里面的分享非常精彩</p><p>1.<a href="http://ued.taobao.org/blog/" target="_blank" rel="external">淘宝UED</a>–做地球上最好的UED</p><p>2.<a href="http://ued.tmall.com/" target="_blank" rel="external">天猫UED</a>–天猫商场用户体验设计</p><p>3.<a href="http://ux.etao.com/" target="_blank" rel="external">一淘网UX</a>–一淘网用户体验中心</p><p>4.<a href="http://www.aliued.cn/" target="_blank" rel="external">有一点</a>–阿里巴巴中国站用户体验部</p><p>5.<a href="http://cdc.tencent.com/" target="_blank" rel="external">腾讯CDC</a>–为用户创造优质在线生活体验</p><p>6.<a href="http://isux.tencent.com/" target="_blank" rel="external">腾讯ISUX</a>–社交用户体验设计</p><p>7.<a href="http://ecd.tencent.com/" target="_blank" rel="external">腾讯ECD</a>-电商用户体验设计部</p><p>8.<a href="http://ued.baidu.com/" target="_blank" rel="external">百度UED</a>–百度搜索用户体验中心</p><p>9.<a href="http://mux.baidu.com/" target="_blank" rel="external">百度MUX</a>–百度无线用户体验中心</p><p>10.<a href="http://www.baiduux.com/" target="_blank" rel="external">百度UEO</a>–百度泛用户体验</p><p>11.<a href="http://ued.sina.com.cn/" target="_blank" rel="external">新浪UED</a>–新浪用户体验中心</p><p>12.<a href="http://udc.weibo.com/" target="_blank" rel="external">新浪微博UDC</a>–让设计无微不至</p><p>13.<a href="http://ued.leju.com/" target="_blank" rel="external">新浪乐居UCD</a>-新浪乐居用户体验设计中心</p><p>14.<a href="http://uedc.163.com/" target="_blank" rel="external">网易UEDC</a>–网易用户体验设计中心</p><p>15.<a href="http://gux.163.com/" target="_blank" rel="external">网易GUX</a>–网易游戏用户体验中心</p><p>16.<a href="http://ued.sogou.com/" target="_blank" rel="external">搜狗UED</a>–搜狗用户体验设计</p><p>17.<a href="http://ued.focus.cn/wordpress/" target="_blank" rel="external">搜狐焦点UED</a>–搜狐焦点用户体验设计</p><p>18.<a href="http://mued.sohu.com/" target="_blank" rel="external">搜狐MUED</a>–搜狐移动门户用户体验团队</p><p>19.<a href="http://uxc.360.cn/" target="_blank" rel="external">360uxc</a>–360UXC用户体验设计中心</p><p>20.<a href="http://gdc.qq.com/" target="_blank" rel="external">腾讯GDC</a>–腾讯游戏设计中心</p><p>21.<a href="http://mxd.tencent.com/" target="_blank" rel="external">腾讯MXD</a>–腾讯移动互联网设计中心</p><p>22.<a href="http://www.alloyteam.com/" target="_blank" rel="external">Alloy Team</a>–腾讯全端 AlloyTeam 团队 Blog</p><p>23.<a href="http://vc.changyou.com/" target="_blank" rel="external">畅游视觉设计中心</a></p><p>24.<a href="http://ued.ctrip.com/blog/" target="_blank" rel="external">携程UED</a>-携程旅行前端开发团队</p><p>25.待续……</p><h1 id="素材网站"><a href="#素材网站" class="headerlink" title="素材网站"></a>素材网站</h1><p>小白、懒人必备</p><p>1.<a href="http://www.lanrentuku.com/" target="_blank" rel="external">懒人图库</a>-让任何一个网页设计师都能轻松找到自己想要的素材</p><p>2.<a href="http://www.sccnn.com/" target="_blank" rel="external">素材中国</a>–打造中国最优秀平面设计素材网站</p><p>3.<a href="http://www.58pic.com/" target="_blank" rel="external">千图网</a>–中国最大的免费素材下载网站</p><p>4.<a href="http://www.sucaitianxia.com/" target="_blank" rel="external">素材天下</a>–打造中国最优秀psd分层设计素材网站</p><p>5.<a href="http://www.noupe.com/" target="_blank" rel="external">noupe</a>– The curious site of the web</p><p>6.<a href="http://www.webdesignerdepot.com/" target="_blank" rel="external">webdesignerdepot</a>– Webdesigner Depot</p><p>7.<a href="http://speckyboy.com/" target="_blank" rel="external">Speckyboy</a>– Web Design News, Resources &amp; Inspiration</p><p>8.<a href="http://webdesignledger.com/" target="_blank" rel="external">WDL</a>– Web Design Ledger</p><p>9.<a href="http://www.onextrapixel.com/" target="_blank" rel="external">OXP</a>– One Extra Pixel, web design magazine</p><p>10.<a href="http://designshack.net/" target="_blank" rel="external">Design Shack</a>– Inspiring web and print design in our gallery, in-depth articles, freebies, and community.</p><p>11.<a href="http://blog.spoongraphics.co.uk/" target="_blank" rel="external">spoongraphics</a>– <a href="http://blog.spoongraphics.co.uk/" target="_blank" rel="external">http://blog.spoongraphics.co.uk/</a></p><p>12.<a href="http://webdesign.tutsplus.com/" target="_blank" rel="external">tuts+</a>–Web Design Tutorials</p><p>13.<a href="http://creativeoverflow.net/" target="_blank" rel="external">creativeoverflow</a>– Design Blog for Anything Creative</p><p>14.<a href="http://smashinghub.com/" target="_blank" rel="external">Smashing Hub</a>– Online resources for Developers and Photographers</p><p>15.<a href="http://designrfix.com/" target="_blank" rel="external">Designrfix</a>– Graphic Design Inspiration &amp; Tutorials Web Design Resources</p><p>16.<a href="http://designinstruct.com/" target="_blank" rel="external">Design Instruct</a>– Design Blog</p><p>17.<a href="http://sixrevisions.com/" target="_blank" rel="external">sixrevisions</a>– Web Design News, Tutorials and Articles</p><p>18.<a href="http://www.youthedesigner.com/" target="_blank" rel="external">youthedesigner</a>– Graphic Design Inspiration, Tutorials, Resources, Freebies and More</p><p>19.<a href="http://www.webresourcesdepot.com/" target="_blank" rel="external">Web Resources Depot</a>– Free Web Resources</p><p>20.<a href="http://www.bittbox.com/" target="_blank" rel="external">bittbox</a>– Free high quality design resources, tutorials and tips for graphic and web designers</p><p>21.<a href="http://www.topdesignmag.com/" target="_blank" rel="external">Top Design Mag</a>– Web Design and Digital Content</p><p>22.<a href="http://www.designtickle.com/" target="_blank" rel="external">DesignTickle</a>–A Dribbble Showcase Magazine</p><p>23.<a href="http://blogsizzle.com/" target="_blank" rel="external">BS</a>–<a href="http://blogsizzle.com/,超多PSD源文件下载" target="_blank" rel="external">http://blogsizzle.com/,超多PSD源文件下载</a></p><p>24.<a href="http://www.tooopen.com/" target="_blank" rel="external">素材公社</a>–中国专业素材网</p><p>25.待续……</p>]]></content>
      
      <categories>
          
          <category> front </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Windows下搭建go语言开发环境</title>
      <link href="/2015/03/27/golang-install/"/>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>博客打算从SAE转移到github上,须花些时间。这段时间一直在学习go语言,还在入门阶段,不过也算了解了一些语法。由于最近博客搬家,也没啥可写的,就写一下自己开发go语言的配置吧。<br><strong>Bracket + Git</strong><br>由于初学并没有采用集成开发环境(liteIDE,eclipse等),因为我想熟悉下go的相关命令,以及go工程项目的管理。<br><a id="more"></a></p><h1 id="GO语言"><a href="#GO语言" class="headerlink" title="GO语言"></a>GO语言</h1><p>Go语言是Google内部主推的语言,它作为一门全新的静态类型开发语言,与当前的开发语言相比具有许多令人兴奋不已的新特性。专门针对多处理器系统的应用编程进行了优化,使用go语言完全可以媲美c、c++的速度,而且更加安全、简洁,支持并行进程。<br>以下是go语言的主要特征:</p><pre><code>1. 自动垃圾回收2. 更丰富的内置类型3. 函数多返回值4. 错误处理5. 匿名函数和闭包6. 类型和接口7. 并发编程8. 反射9. 语言交互性</code></pre><h1 id="Window开发环境搭建"><a href="#Window开发环境搭建" class="headerlink" title="Window开发环境搭建"></a>Window开发环境搭建</h1><p>以上基本都属于废话,搭建开发环境尽快开启编程之旅才是王道,笔者采用Brackets + Git的方式进行学习。使用Brackets主要在于自己一直用的是Brackets,且初学建议先别用IDE,不过sublimeText也是一个非常好的选择。</p><h2 id="1、安装Golang的SDK"><a href="#1、安装Golang的SDK" class="headerlink" title="1、安装Golang的SDK"></a>1、安装Golang的SDK</h2><p>Google的官网被墙,下载地址如下:<a href="http://www.golangtc.com/download" target="_blank" rel="external">http://www.golangtc.com/download</a>,请下载对应系统的版本,之后傻瓜式的下一步安装即可。<br>安装完成之后,打开终端,输入go、或者go version出现如下信息即表示安装成功:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">go version go1.4.1 windows/amd64</div></pre></td></tr></table></figure></p><h2 id="2、配置环境变量"><a href="#2、配置环境变量" class="headerlink" title="2、配置环境变量"></a>2、配置环境变量</h2><p>安装完SDK之后接下来便是配置环境变量了,windows下配置信息如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">GOROOT=D:\go\     --go根目录</div><div class="line">GOPATH=E:XXXXX    --日常开发的根目录,可以配置多个<span class="string">";"</span>分隔</div></pre></td></tr></table></figure></p><p>重新打开cmd,输入go env可以查看配置后的效果:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">set</span> GOARCH=amd64</div><div class="line"><span class="built_in">set</span> GOBIN=</div><div class="line"><span class="built_in">set</span> GOCHAR=6</div><div class="line"><span class="built_in">set</span> GOEXE=.exe</div><div class="line"><span class="built_in">set</span> GOHOSTARCH=amd64</div><div class="line"><span class="built_in">set</span> GOHOSTOS=windows</div><div class="line"><span class="built_in">set</span> GOOS=windows</div><div class="line"><span class="built_in">set</span> GOPATH=E:\code\GoStudy\music;E:\code\GoStudy\calcproj;</div><div class="line"><span class="built_in">set</span> GORACE=</div><div class="line"><span class="built_in">set</span> GOROOT=D:\Go</div><div class="line"><span class="built_in">set</span> GOTOOLDIR=D:\Go\pkg\tool\windows_amd64</div><div class="line"><span class="built_in">set</span> CC=gcc</div><div class="line"><span class="built_in">set</span> GOGCCFLAGS=-m64 -mthreads -fmessage-length=0</div><div class="line"><span class="built_in">set</span> CXX=g++</div><div class="line"><span class="built_in">set</span> CGO_ENABLED=1</div></pre></td></tr></table></figure></p><h2 id="开发工具配置-Brackets"><a href="#开发工具配置-Brackets" class="headerlink" title="开发工具配置(Brackets)"></a>开发工具配置(Brackets)</h2><p>Brackets是Adobe公司的一款前端开发工具,和sublime非常相似(但是就功能上来说弱于sublime),不过笔者更喜欢Brackets的风格,也玩了很长一段时间,因此就决定是它了。<br>官网下载地址:<a href="https://github.com/adobe/brackets/releases" target="_blank" rel="external">Brackets.io</a>,选择合适的版本下载安装即可。<br>Brackets本质上是一个文本编辑器,但是可以通过配置插件的方式打造成一个媲美IDE的工具,下面是我使用到的一些插件,安装插件的方式也很简答,右侧有一个插件管理器,打开即可进行安装:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">1. brackets-code-folding            代码折叠插件</div><div class="line">2. brackets-css-shapes-editor       css插件</div><div class="line">3. brackets-jsbeautifier            代码美化插件</div><div class="line">4. drewkoch.icons                   文件类型图标插件</div><div class="line">5. go-ide                           golang插件(关键字高亮)</div><div class="line">6. gruehle.brackets-autoprefixer    自动补全插件(golang不行)</div><div class="line">7. themesforbrackets                主题插件</div><div class="line">8. websiteduck-wdminmap             右侧minmap插件(类似sublime)</div><div class="line">9. zaggino.brackets-git             git插件</div></pre></td></tr></table></figure></p><p>其他插件的配置都不复杂这里就不一一介绍了,重点介绍一下git插件的配置。当安装好git插件之后,右侧会出现如下图标(为了便于排版,我将图片旋转):</p><center><img src="http://kiritor.github.io/img/git.png" alt="git"></center><p>红线标出的第一个就是git插件了(可以调出git界面),第二个是打开控制台的快捷按钮,等会介绍如何配置git插件使其显示出来。我们点击git图标即可在界面下方唤出git界面如下:</p><center><img src="http://kiritor.github.io/img/git_mark.png" alt="git"></center><p>之后点击设置图标,进行相关设置:</p><center><img src="http://kiritor.github.io/img/git1.png" alt="git"></center><br>对于插件的使用我也就不多提了,非常简单,熟悉下即可上手了<br><br>## 附图<br>最后秀一下最后的效果:<br><center><img src="http://kiritor.github.io/img/brackets.png" alt="git"></center><h1 id="GO小试"><a href="#GO小试" class="headerlink" title="GO小试"></a>GO小试</h1><p>配置好开发环境之后,简单的进行一下go语言的开发。新建一个文件夹,并用brackets打开,新建main.go文件即可进行编辑了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line">func <span class="function"><span class="title">main</span></span>() &#123;</div><div class="line">fmt.Println(<span class="string">"hello go"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>代码编写完后,打开控制台,定位到当前目录下,输入go build main.go即可完成编译,之后直接main(window下即可查看运行结果),也可以直接运行go run main.go直接运行(不产生exe文件)</p><p>到目前为止已经安装好了开发golang的程序的基本环境,可以开心的享受golang的奇妙之处了!</p>]]></content>
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>EasyUI基础入门之Draggable(拖拽)</title>
      <link href="/2015/03/27/easyui-draggable/"/>
      <content type="html"><![CDATA[<p>前面学习了easyui基础的解析器,加载器。对于他们入门阶段我们只需简单的了解下即可，毕竟先阶段并不会太过深入。接下来根据easyui官网文档的顺序安排学习下Draggable插件。</p><h1 id="Draggable是什么"><a href="#Draggable是什么" class="headerlink" title="Draggable是什么"></a>Draggable是什么</h1><p>Draggable是easyui中用于实现拖拽功能的一个插件。利用它，我们可以实现控件的拖拽效果。<br>Draggble覆盖默认值$.fn.draggable.defaults。<br><a id="more"></a></p><h1 id="Draggable"><a href="#Draggable" class="headerlink" title="Draggable"></a>Draggable</h1><p>下面看看官网对于Draggable的描述吧。 </p><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>其属性请参阅官网<br>一个简单的例子,代码如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">   &lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line"></div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">&lt;title&gt;Basic Draggable - jQuery EasyUI Demo&lt;/title&gt;</div><div class="line">&lt;link rel=<span class="string">"stylesheet"</span> <span class="built_in">type</span>=<span class="string">"text/css"</span> href=<span class="string">"jquery-easyui-1.3.6/themes/metro/easyui.css"</span>&gt;</div><div class="line">&lt;link rel=<span class="string">"stylesheet"</span> <span class="built_in">type</span>=<span class="string">"text/css"</span> href=<span class="string">"jquery-easyui-1.3.6/themes/icon.css"</span>&gt;</div><div class="line">&lt;link rel=<span class="string">"stylesheet"</span> <span class="built_in">type</span>=<span class="string">"text/css"</span> href=<span class="string">"jquery-easyui-1.3.6/demo/demo.css"</span>&gt;</div><div class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"jquery-easyui-1.3.6/jquery.min.js"</span>&gt;&lt;/script&gt;</div><div class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"jquery-easyui-1.3.6/jquery.easyui.min.js"</span>&gt;&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line"></div><div class="line">&lt;body&gt;</div><div class="line">&lt;h2&gt;Basic Draggable&lt;/h2&gt;</div><div class="line">&lt;p&gt;Move the boxes below by clicking on it with mouse.&lt;/p&gt;</div><div class="line">&lt;div id=<span class="string">"dd"</span> class=<span class="string">"easyui-draggable"</span> data-options=<span class="string">"handle:'#title'"</span> style=<span class="string">"width:100px;height:100px;"</span>&gt;</div><div class="line">&lt;div id=<span class="string">"title"</span> style=<span class="string">"background:#ccc;width:100px;height:100px;"</span>&gt;容器里面的内容&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;script&gt;</div><div class="line">$(<span class="function"><span class="title">function</span></span> () &#123;</div><div class="line"></div><div class="line">$(<span class="string">"#title"</span>).draggable(&#123;</div><div class="line">proxy: <span class="keyword">function</span> (a) &#123;</div><div class="line">var a = $(<span class="string">'&lt;div class="proxy_div"&gt;你拖我干啥&lt;/div&gt;'</span>);</div><div class="line">a.appendTo(<span class="string">'body'</span>);</div><div class="line"><span class="built_in">return</span> a;</div><div class="line">&#125;,</div><div class="line">cursor: <span class="string">'pointer'</span>,</div><div class="line">edge: <span class="string">'6'</span></div><div class="line">&#125;);</div><div class="line">&#125;);</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line"></div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p> Draggable的事件还是比较好理解的，具体参考官网:</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p> 参阅官网</p><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p> 两种使用的方式：<br> 1、通过html标记创建,方法如下:<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div id=<span class="string">"dd"</span> class=<span class="string">"easyui-draggable"</span> data-options=<span class="string">"handle:'#title'"</span> style=<span class="string">"width:100px;height:100px;"</span>&gt;</div><div class="line">&lt;div id=<span class="string">"title"</span> style=<span class="string">"background:#ccc;width:100px;height:100px;"</span>&gt;容器里面的内容&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p><p> 2、通过js脚本创建:<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">   &lt;div id=<span class="string">"dd"</span> style=<span class="string">"width:100px;height:100px;"</span>&gt;</div><div class="line">   &lt;div id=<span class="string">"title"</span> style=<span class="string">"background:#ccc;"</span>&gt;title&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;script&gt;</div><div class="line">$(<span class="string">'#dd'</span>).draggable(&#123;</div><div class="line">handle: <span class="string">'#title'</span></div><div class="line">&#125;);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p><h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><p>对于Draggable，官网提供了一些个例子地址如下:<a href="http://www.jeasyui.com/demo/main/index.phpplugin=Draggable&amp;theme=default&amp;dir=ltr&amp;pitem=" target="_blank" rel="external">http://www.jeasyui.com/demo/main/index.phpplugin=Draggable&amp;theme=default&amp;dir=ltr&amp;pitem=</a><br>初学来说的话,上述的demo例子就够了。over!</p>]]></content>
      
      <categories>
          
          <category> front </category>
          
      </categories>
      
      
        <tags>
            
            <tag> easyui </tag>
            
            <tag> draggable </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>EasyUI基础入门之easyloader(加载器)</title>
      <link href="/2015/03/27/easyui-loader/"/>
      <content type="html"><![CDATA[<p>在了解完easyui的parser(解析器)之后,接下来就是easyloader(简单加载器)的学习了。</p><h1 id="什么是EasyLoader"><a href="#什么是EasyLoader" class="headerlink" title="什么是EasyLoader"></a>什么是EasyLoader</h1><p>正如其名字一样easyloader的作用是为了动态的加载组件所需的js文件,这体现了EasyUI作为轻量级框架对性能的合理掌握（可以动态的加载所需组件）,不过一般而言很少使用到easyloader(会给使用者带来一定的难度)。那么使用EasyLoader的场景有哪些呢？<br><a id="more"></a></p><h1 id="EasyLoader的使用场景"><a href="#EasyLoader的使用场景" class="headerlink" title="EasyLoader的使用场景"></a>EasyLoader的使用场景</h1><pre><code>● 出于性能的考虑,不一次性的加载easyui核心js、css文件,而是先展示基础文档结构。● 项目只是简单的用到easyui的几个组件,此时可以按需加载该组件的js和css文件。● 你需要使用某个组件,但是不知道该组件是否依赖于其他组件(简单的js引用无法达到),使用easyloader可以自动加载依赖组件。● 你需要把JQuery基础库和自己实现的js结合起来，以达到更好的展示性能。 </code></pre><h1 id="EasyLoader加载器"><a href="#EasyLoader加载器" class="headerlink" title="EasyLoader加载器"></a>EasyLoader加载器</h1><p>简单的了解了什么是easyloader以及其大概的使用场景,接下来看看easyloader的属性、事件和方法。</p><h1 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h1><p>easyloader有7个属性，具体可以参加官网</p><h1 id="Event"><a href="#Event" class="headerlink" title="Event"></a>Event</h1><p>加载器包含两个事件,具体参见官网</p><h1 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h1><p>加载器只有一个方法:load,其参数为module,callback(回调函数)，载入特定的模块，当载入的成功的时候调用该回调函数有效的模块参数可以使一个单一的模块名称、存储模块名称的数组、css样式文件、js脚本文件。</p><h1 id="EasyLoader使用"><a href="#EasyLoader使用" class="headerlink" title="EasyLoader使用"></a>EasyLoader使用</h1><p>接下来我们着眼于easyloader如何使用，通过上面属性表中的modules，不难猜到这个属性就是easyui定义模块用的。modules本质上来说是一个json格式对象。其形式如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">  modules = &#123;</div><div class="line">  draggable:&#123;</div><div class="line">     js : <span class="string">"jquery.draggable.js"</span>,</div><div class="line">     css : <span class="string">"pagination.css"</span>,</div><div class="line">     dependencies : [<span class="string">"linkbutton"</span>]</div><div class="line">   &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p>key值即是定义的模块名称,值又是一个json对象,包含三个属性js、css、dependencies。js就是模块需要导入的js名称,css是该模块的样式,dependencies定义该模块的依赖模块。<br>上面定义了一个模块,接下来谈谈该如何添加我们自定义的模块,并且通过easyloader进行加载。</p><p>第一步:我们先要打开easyloader.js文件,阅读代码(压缩过)我们可以简单的看出来easyui加载的时候到底加载了哪些模块,“_1”是easyui已经定义好的模块.以及各个模块之间的依赖关系。这样,我们通过修改easyloader.js的代码就可以有选择性的加载所需的模块,提高easyui的性能(一般情况下不建议)。那么我们如何简单的定义下自己的模块呢? 我们需要改造一下easyload.js，我们将easyloader.js代码中的所有_1变量替换为easyloader.modules，不过最后一个”modules:_1”的引用不要修改。</p><p>第二步,在easyui原有的模块基础上,我们扩展它,加入自己的模块。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">easyloader.modules = $.extend(&#123;&#125;,&#123;</div><div class="line"><span class="string">"test"</span>:&#123;</div><div class="line">js:<span class="string">'test.js'</span>css:<span class="string">'test.css'</span>&#125;</div><div class="line">&#125;,easyloader.modules);</div></pre></td></tr></table></figure></p><p>上面的代码在原有easyloader.modules的基础上在增加了一个test模块并且定义了模块的js和css。这样我们增加的第一个自定义模块就添加完成了。使用的方式和easyloader加载其他模块一样。</p><p>Tips:我们自己定义的js和css文件必须是绝对路径。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">easyloader.load(<span class="string">'mymodule'</span>, <span class="function"><span class="title">function</span></span>()&#123;      </div><div class="line"> //<span class="keyword">do</span> something</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> front </category>
          
      </categories>
      
      
        <tags>
            
            <tag> easyui </tag>
            
            <tag> loader </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>EasyUI基础入门之Parser(解析器)</title>
      <link href="/2015/03/26/easyui-parser/"/>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>JQuery EasyUI提供的组件包括功能强大的DataGrid,TreeGrid、面板、下拉组合等。用户可以组合使用这些组件,也可以单独使用其中一个。(使用的形式是以插件的方式提供的)<br><a id="more"></a></p><h1 id="EasyUI体系结构"><a href="#EasyUI体系结构" class="headerlink" title="EasyUI体系结构"></a>EasyUI体系结构</h1><p>EasyUI所有的插件主要分为六大部分。Base基础、Layout布局、Menu&amp;Button、Form表单、Window窗口等。从最基础的开始先掌握EasyUI基础部分。Base部分包含了八个基础插件分别为:</p><pre><code>1. parser(解析器)2. easyloader(加载器)3. draggable(拖动)4. droppable(放置)5. resizable(大小调整)6. pagination(分页)7. progressbar(进度条)8. searchbox(搜索框) </code></pre><p>我们先从parser开始。</p><h1 id="Parser-解析器"><a href="#Parser-解析器" class="headerlink" title="Parser(解析器)"></a>Parser(解析器)</h1><p>解析器是easyui非常重要的基础组件,在easyui中我们能够简单的通过class定义一个组件,从而渲染出非常好的交互效果。就是通过parser进行解析的。parser会获取所有在指定范围内定义为easyui组件的class定义,并且根据后缀定义把当前节点解析渲染成特定的组件。<br>parser可以有两种使用方法:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1、$.parser.parse();不带参数,默认解析该页面中所有被定义为easyui组件的节点。 </div><div class="line">2、$.parser.parse(<span class="string">'#cc'</span>);带一个jquery选择器，使用这种方式我们可以单独解析局部的easyui组件节点。</div></pre></td></tr></table></figure></p><p>不过这里要说明的是这个jquery选择器必须是你解析组件的父级以上的节点。也就是说这个查找出来的节点相当于一个容器,它只会解析容器里面的内容。<br>parser属性:</p><p>名称                 类型         描述                       默认值<br>$.parser.auto     boolean    定义是否自动解析easyui组件    true</p><p>名称    参数    描述<br>$.parser.onComplete     context    当语法解析完成之后触发的event</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;title&gt;EasyUI基础之Parser&lt;/title&gt;</div><div class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"js/jquery.min.js"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"js/jquery.easyui.min.js"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;script&gt;</div><div class="line">        <span class="keyword">function</span> <span class="function"><span class="title">closes</span></span>() &#123;</div><div class="line">            $(<span class="string">"#Loading"</span>).fadeOut(<span class="string">"normal"</span>, <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line"></div><div class="line">                $(this).remove();</div><div class="line">                alert(<span class="string">"数据加载完成"</span>);</div><div class="line"></div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">        var pc;</div><div class="line">        $.parser.onComplete = <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">            <span class="keyword">if</span> (pc) &#123;</div><div class="line">                clearTimeout(pc);</div><div class="line">            &#125;</div><div class="line">            pc = <span class="built_in">set</span>Timeout(closes, 1000);</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;div id=<span class="string">'Loading'</span>&gt;</div><div class="line">    &lt;image src=<span class="string">'images/loading.gif'</span>/&gt;</div><div class="line">    &lt;font color=<span class="string">"#2bd4cd"</span> size=<span class="string">"4"</span>&gt;页面正在加载中···&lt;/font&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure><p>上面的例子实际运行的效果是,当dom节点在解析的过程中,界面上会弹出类似”数据正在加载中”,parser解析完毕之后,遮罩层就消失，正常显示页面内（弹出数据加载完成弹出框）。</p><h1 id="Parser-解析器-应用场景"><a href="#Parser-解析器-应用场景" class="headerlink" title="Parser(解析器)应用场景"></a>Parser(解析器)应用场景</h1><p>上面的学习中我们知道,easyui根据class就能正常的渲染页面都是靠parser。通常情况下我们在开发的时候并不会用到解析器。下面来看看神马时候我们需要用到解析器。</p><h2 id="自动调用parser"><a href="#自动调用parser" class="headerlink" title="自动调用parser"></a>自动调用parser</h2><p>最主要的运用场景,只要我们书写相应的class,easyui就能成功的渲染页面,这是因为解析器在默认情况下,会在dom加载完成的时候($(docunment).ready)被调用,而且是渲染整个页面。</p><h2 id="手动调用parser"><a href="#手动调用parser" class="headerlink" title="手动调用parser"></a>手动调用parser</h2><p>需要手动调用的情况是:当页面已经加载完成,但是此时我们使用js生成的DOM中包含了easyui支持的class,并且我们也有将其渲染成easyui组件的需求。在这种情况下手动调用parser就不可避免了。<br>以如下代码为例:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;div class=<span class="string">"easyui-accordion"</span> id=<span class="string">"tt"</span>&gt;</div><div class="line">    &lt;div title=<span class="string">"title1"</span>&gt;1&lt;/div&gt;</div><div class="line">&lt;div title=<span class="string">"title2"</span>&gt;2&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p><p>当上述代码的生成在easyui渲染界面之后,由于easyui不会一直监听页面,所以该段代码并不会并渲染成“手风琴DIV”的样式,这时候就需要我们手动去结下了。不过这里需注意如下方面，上面也有提及。</p><pre><code>1. 解析目标位指定DOM的所有子孙元素,不包好该DOM本身:因此正确的写法为:$parser.parser($(&apos;tt&apos;).parent()),并非   $.parser.parse($(&apos;#tt&apos;));    2. 尽量不要多次解析同一个DOM元素(ID):页面初始化就已经主动渲染过dom节点了,你再次手动解析该dom节点时该dom已经被parser重构,得到的        DOM就并非是你料想的结果，该方式应该尽量避免。</code></pre>]]></content>
      
      <categories>
          
          <category> front </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EasyUI </tag>
            
            <tag> Parser </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>毕业随照</title>
      <link href="/2015/03/26/colleage-life/"/>
      <content type="html"><![CDATA[<p>似乎真的到了该说再见的时候了。<br>向这段充满欢笑，充满浪漫，充满豪情壮志，<br>也充满酸涩与淡淡忧郁的学生时代。<br><a id="more"></a><br>想要用更多的语言把它一一描述出来，<br>可是当提笔之时，<br>却发现过往的一幕幕不停闪现，<br>而我的手，却什么写不出了……</p><p>既然写不出,那就别写了,看图片吧!</p>]]></content>
      
      <categories>
          
          <category> life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 毕业 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JQuery EasyUi框架学习</title>
      <link href="/2015/03/26/jquery-easyui/"/>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>新项目的开发前端技术打算采用EasyUI框架,项目组长将前端EasyUI这块的任务分配给了我.在进行开发之前,需要我这菜鸟对EasyUI框架进行一些基础的入门学习。之后会在学习的过程中将自己遇到的问题和有用的东西记录下来。</p><h1 id="关于EasyUI"><a href="#关于EasyUI" class="headerlink" title="关于EasyUI"></a>关于EasyUI</h1><p>EasyUI框架是基于JQuery的,使用它帮助我们快捷的构建web网页。EasyUI框架是一个简单、易用、强大的轻量级web前端javascript框架。现阶段来说,在开发web项目时,前端的开发我们更喜欢使用jQuery代替原生的javascript,原因大概如下方面:<br><a id="more"></a></p><pre><code>1. JQuery是基于js的扩展,使页面和脚本进行了分离。2. JQuery的宗旨:用最少的代码做更多的事。3. 在javascript的库中,JQuery对性能的理解是十分到位的。4. 基于JQuery的插件越来越多,也越来越人性化,对于项目的开发有一定的借鉴。5、简单、易学、快速上手让其更具吸引力。</code></pre><h1 id="EasyUI的优点"><a href="#EasyUI的优点" class="headerlink" title="EasyUI的优点"></a>EasyUI的优点</h1><p>EasyUI是基于JQuery的框架,相比于其他框架来说其具有如下的优点:</p><pre><code>1. EasyUI可以很容易的帮助创建web页面。2. EasyUI是基于用户界面的插件集合。3. EasyUI提供了构建更加现代化,交互性的js程序应用。4. 通过EasyUI我们可以编写一些html标记来定义用户界面。5. 极大的提升项目开发的时间。</code></pre><p>EasyUI的使用<br>最基本的使用就是引入easyui.min.js文件，以及其对应的jquery.min.js文件。注意的是jquery-easyui是基于jquery的,因此jquery.min.js文件最好先于easyui.min.js先引入。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"jquery-easyui-1.3.6/jquery.min.js"</span>&gt;&lt;/script&gt;</div><div class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"jquery-easyui-1.3.6/jquery.easyui.min.js"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></p><p>前面也说道了,EasyUI是插件集合,需要用到的时候在自行引入就可以了。</p><h1 id="EasyUI的下载和学习"><a href="#EasyUI的下载和学习" class="headerlink" title="EasyUI的下载和学习"></a>EasyUI的下载和学习</h1><p>EasyUI的下载推荐EasyUI官网:<a href="http://www.jeasyui.com/" target="_blank" rel="external">http://www.jeasyui.com/</a> EasyUI的学习,官网上已经提供了非常丰富的学习实例,而且Demo非常丰富。这里推荐几个有用学easyui的站点：</p><pre><code>1. EasyUI官网2. JQueryEasyUI中文社区:http://bbs.jeasyuicn.com/(张宇、夏季)3. EasyUI学习班:http://www.jeasyuicn.com/4. EasyUI入门视频教程(张宇前辈)5. ......</code></pre><p>好了,前期的准备已经差不多了,后续就是一点一点深入学习了。</p>]]></content>
      
      <categories>
          
          <category> front </category>
          
      </categories>
      
      
        <tags>
            
            <tag> easyui </tag>
            
            <tag> jquery </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
